<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>vain0x&#39;s blog</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://vain0x.github.io/blog/"/>
  <updated>2019-01-30T13:08:25.958Z</updated>
  <id>http://vain0x.github.io/blog/</id>
  
  <author>
    <name>vain0x</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>近況 2019-01-30</title>
    <link href="http://vain0x.github.io/blog/2019-01-30/diary/"/>
    <id>http://vain0x.github.io/blog/2019-01-30/diary/</id>
    <published>2019-01-30T11:07:49.000Z</published>
    <updated>2019-01-30T13:08:25.958Z</updated>
    
    <content type="html"><![CDATA[<p>今月の活動のまとめ</p><ul><li>前月分 <a href="https://vain0x.github.io/blog/2018-12-31/diary/">https://vain0x.github.io/blog/2018-12-31/diary/</a></li></ul><h2 id="LSP学習記の連載を書いた"><a href="#LSP学習記の連載を書いた" class="headerlink" title="LSP学習記の連載を書いた"></a>LSP学習記の連載を書いた</h2><ul><li>自作言語 <a href="https://github.com/vain0x/curage-lang" target="_blank" rel="noopener">curage-lang</a> の LSP サーバーを実装していくシリーズ</li><li>LSP (Language Server Protocol) は、いわゆるインテリセンス (ソースコードに警告を出したり入力補完をしたりするやつ) の実装をテキストエディターから分離するのに使える通信プロトコル</li><li>エディターの実装 (特に GUI) に全く触らなくてもインテリセンスが作れて最高<ul><li>JSON を送受信するだけだから、ユニットテストも書きやすい</li></ul></li><li>curage-lang はとてもミニで、let 文で変数を定義する、以外の機能はない</li><li>それでも LSP サーバーの実装の雰囲気は十分につかめた</li></ul><h4 id="LSP学習記-現時点での記事一覧"><a href="#LSP学習記-現時点での記事一覧" class="headerlink" title="LSP学習記: 現時点での記事一覧"></a>LSP学習記: 現時点での記事一覧</h4><ul><li><a href="https://qiita.com/vain0x/items/d050fe7c8b342ed2004e" target="_blank" rel="noopener">LSP学習記 #1</a><ul><li>LSP の基礎部分に触れ、極小の LSP サーバーを準備し、「エディター上にリアルタイムで警告を表示する」機能を作った</li></ul></li><li><a href="https://qiita.com/vain0x/items/490ae33ba3db3c829c13" target="_blank" rel="noopener">LSP学習記 #2 クラゲ言語の構文解析</a><ul><li>構文解析を行い、構文エラーがリアルタイムで出るようにした</li></ul></li><li><a href="https://qiita.com/vain0x/items/31252d77066505ce6117" target="_blank" rel="noopener">LSP学習記 #3 シンボルとハイライト</a><ul><li>ローカル変数定義の静的解析を行い、変数をハイライトする機能を実装した</li></ul></li><li><a href="https://qiita.com/vain0x/items/8414dca7425057f1bbd8" target="_blank" rel="noopener">LSP学習記 #4 シンボルのリネーム - Qiita</a><ul><li>名前の変更機能を実装した</li></ul></li></ul><h2 id="競技プログラミングの成績がよかった"><a href="#競技プログラミングの成績がよかった" class="headerlink" title="競技プログラミングの成績がよかった"></a>競技プログラミングの成績がよかった</h2><p>1年以上前から「そろそろ青」の水色だったが、ついに <strong>青</strong> になった。</p><ul><li>今月も週末は AtCoder に参加した</li><li><a href="https://note.mu/vain0x/n/n995face26f4c" target="_blank" rel="noopener">競プロ参戦記 #28 「白黒経路とカードゲーム」 | エイシング 2019 [ABCD]｜ベイン｜note</a><ul><li>D完</li></ul></li><li><a href="https://note.mu/vain0x/n/n3c2c2c425830" target="_blank" rel="noopener">競プロ参戦記 #29 「最小全域木」 | KEYENCE 2019 [ABCE]｜ベイン｜note</a><ul><li>ABC-E完</li></ul></li><li><a href="https://note.mu/vain0x/n/n78a0d99f0fb9" target="_blank" rel="noopener">競プロ参戦記 #30 「花壇とスシ」  | ABC 116｜ベイン｜note</a><ul><li>C完</li></ul></li><li><a href="https://note.mu/vain0x/n/nef874855fde5" target="_blank" rel="noopener">競プロ参戦記 #31 「料理 / 木の復元」 | 全国統一2019｜ベイン｜note</a><ul><li>D完</li></ul></li></ul><h2 id="競プロ用言語を作り始めた"><a href="#競プロ用言語を作り始めた" class="headerlink" title="競プロ用言語を作り始めた"></a>競プロ用言語を作り始めた</h2><p>picomet-lang <a href="https://github.com/vain0x/picomet-lang" target="_blank" rel="noopener">https://github.com/vain0x/picomet-lang</a></p><ul><li>精選10問こと <a href="https://atcoder.jp/contests/abs/tasks" target="_blank" rel="noopener">AtCoder Beginners Selection</a> を自作言語で解くプロジェクト</li><li>コンパイラにソースコードを埋め込んで提出、実行中にコンパイル→評価、という流れにする……つもりだった<ul><li>でもコンパイラをジャッジ側で実行する必要はない</li><li>手元で中間言語を生成してランタイムに埋め込めば十分</li></ul></li><li><a href="https://github.com/rui314/9cc" target="_blank" rel="noopener">9cc</a> や <a href="http://esumii.github.io/min-caml" target="_blank" rel="noopener">MinCaml</a> を参考にアセンブリ風の中間言語へのコンパイルを試みている<ul><li>C言語をターゲットにしている milone-lang ではやらなかった分野</li><li>関数の呼び出しがなかなか難しい</li></ul></li></ul><h2 id="ポートフォリオサイトを作った"><a href="#ポートフォリオサイトを作った" class="headerlink" title="ポートフォリオサイトを作った"></a>ポートフォリオサイトを作った</h2><p>vain0x’s Page <a href="https://vain0x.github.io">https://vain0x.github.io</a></p><ul><li>このドメインのルート、長いこと Hello! しか書かれてなかったページ</li><li>イチから作り直した</li><li>CSS は慣れてきたので手書きにした</li><li>背景に濃色のグラデーションと透過を使って手軽にそれっぽさを出した</li><li>HTML はテンプレートエンジンではなく、JSX 記法 + <a href="https://github.com/kriasoft/hyperapp-render" target="_blank" rel="noopener">hyperapp-render</a> で静的生成した</li><li>いまのところプロジェクト (knowbug や milone-lang) や連載記事の紹介を載せている</li></ul><h2 id="ブログにコメント欄を追加した"><a href="#ブログにコメント欄を追加した" class="headerlink" title="ブログにコメント欄を追加した"></a>ブログにコメント欄を追加した</h2><ul><li><a href="https://utteranc.es" target="_blank" rel="noopener">utterances</a></li><li>コメント欄を表示して、送信されたデータは GitHub issues に追加される、という仕組み</li><li>サーバーを用意しなくていいという利点</li><li>GitHub にサインインしないとコメントできないという欠点</li></ul><h2 id="ミローネ言語-詰まり中"><a href="#ミローネ言語-詰まり中" class="headerlink" title="ミローネ言語: 詰まり中"></a>ミローネ言語: 詰まり中</h2><p>milone-lang <a href="https://github.com/vain0x/milone-lang" target="_blank" rel="noopener">https://github.com/vain0x/milone-lang</a></p><ul><li>多相関数の実装が難しくて困ってる</li></ul><h2 id="ガルパ-リズムゲーム"><a href="#ガルパ-リズムゲーム" class="headerlink" title="ガルパ (リズムゲーム)"></a>ガルパ (リズムゲーム)</h2><ul><li>人差し指2本でプレイしていたが、右手の中指を含めて3本にした<ul><li>指の負担の分散、高難度の精度向上、という効果を期待</li><li>ノーツに叩く指をアサインする組み合わせが増加し、脳の処理負荷が重くなるので難しい</li><li>いまは慣れてきた</li></ul></li><li>左手の中指も使った4本打鍵も練習中</li><li>2nd Season 悪くない</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今月の活動のまとめ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前月分 &lt;a href=&quot;https://vain0x.github.io/blog/2018-12-31/diary/&quot;&gt;https://vain0x.github.io/blog/2018-12-31/diary/&lt;/a&gt;&lt;
      
    
    </summary>
    
    
      <category term="日記" scheme="http://vain0x.github.io/blog/tags/%E6%97%A5%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>LSP学習記 #1</title>
    <link href="http://vain0x.github.io/blog/2019-01-05/lsp-trial-01/"/>
    <id>http://vain0x.github.io/blog/2019-01-05/lsp-trial-01/</id>
    <published>2019-01-05T14:52:00.000Z</published>
    <updated>2019-01-21T15:35:35.481Z</updated>
    
    <content type="html"><![CDATA[<p>LSP サーバーの実装の練習をしています。この記事は勉強ノートとして、調査事項をまとめつつ、成果物を作成した手順を解説します。</p><p>第1回では LSP の基礎部分に触れ、極小の LSP サーバーを準備し、「エディター上にリアルタイムで警告を表示する」機能を作ります。</p><h2 id="おことわり"><a href="#おことわり" class="headerlink" title="おことわり"></a>おことわり</h2><p>読者には Node.js と TypeScript の基本的な知識を前提とします。</p><p>若干解説調の文章になってしまっていますが、筆者は詳しいわけではないのでご了承ください。</p><h2 id="LSP-とは"><a href="#LSP-とは" class="headerlink" title="LSP とは"></a>LSP とは</h2><p>LSP = Language Server Protocol</p><p>すごく雑に利点をいうと、いわゆるインテリセンス (ソースコードに警告を出したり入力補完をしたりするやつ) の実装をテキストエディターから分離するのに使えます。</p><p>もう少し詳しくは、以下の記事を参考:</p><ul><li><a href="https://microsoft.github.io/language-server-protocol/overview" target="_blank" rel="noopener">Overview</a><ul><li>公式の概要 (英語)</li></ul></li><li><a href="https://qiita.com/atsushieno/items/ce31df9bd88e98eec5c4" target="_blank" rel="noopener">language server protocolについて (前編) - Qiita</a><ul><li>執筆時点で後編はないみたいです</li></ul></li><li><a href="https://qiita.com/himanoa/items/04a105cc9615e85ad420" target="_blank" rel="noopener">LanguageServerProtocol(LSP)のススメ - Qiita</a><ul><li>動作例の GIF があって分かりやすいです</li></ul></li></ul><p>VSCode などのエディターが「LSP クライアント」です。一方で言語固有の機能を提供するほうが「LSP サーバー」になります。</p><h2 id="公式のサンプル"><a href="#公式のサンプル" class="headerlink" title="公式のサンプル"></a>公式のサンプル</h2><p>Microsoft のリポジトリに VSCode の拡張機能のサンプル集があります。そのなかに LSP がらみのものが3つあります。次の lsp-sample がもっとも単純です。</p><p><a href="https://github.com/Microsoft/vscode-extension-samples/tree/515a928615aaab84ae7f66a38e4346db84464fcb/lsp-sample" target="_blank" rel="noopener">Microsoft/vscode-extension-samples/lsp-sample</a></p><p>このリポジトリに関するチュートリアル (英語) があります:</p><ul><li><a href="https://code.visualstudio.com/api/language-extensions/language-server-extension-guide" target="_blank" rel="noopener">Language Server Extension Guide | Visual Studio Code Extension API</a></li></ul><p>次の3つのファイルに注目して中身をみていきます。</p><ul><li><code>package.json</code><ul><li>パッケージの依存関係やビルドスクリプトだけでなく、VSCode の拡張機能に対するさまざまな設定を含んでいる</li></ul></li><li><code>client/src/extension.ts</code><ul><li>VSCode の拡張機能のエントリーポイント</li></ul></li><li><code>server/src/server.ts</code><ul><li>LSP サーバーの実装</li></ul></li></ul><h3 id="サンプル-サンプル言語サーバーの機能"><a href="#サンプル-サンプル言語サーバーの機能" class="headerlink" title="サンプル: サンプル言語サーバーの機能"></a>サンプル: サンプル言語サーバーの機能</h3><p>lsp-sample の LSP サーバーは、テキストファイルの編集時に2つの機能を提供するものです。</p><ul><li>ドキュメントの検証<ul><li>大文字で書かれた単語を警告として報告する</li></ul></li><li>入力補完<ul><li>“JavaScript” “TypeScript” を入力補完候補に出す</li></ul></li></ul><p>これらの機能の実装は <code>server.ts</code> にあって、VSCode (LSP クライアント) から送られてきたメッセージに応答するという流れになっています。</p><h3 id="サンプル-サンプル言語サーバーの起動"><a href="#サンプル-サンプル言語サーバーの起動" class="headerlink" title="サンプル: サンプル言語サーバーの起動"></a>サンプル: サンプル言語サーバーの起動</h3><p>VSCode にこの拡張機能をインストールした状態でプレインテキスト (txt など) を開くと、拡張機能が読み込まれます。</p><p>ここでプレインテキストに反応しているのは <code>package.json</code> の <code>activationEvents</code> (拡張機能を開始する基準のイベント) に <code>onLanguage:plaintext</code> と書かれているからのようです。</p><ul><li><a href="https://code.visualstudio.com/api/get-started/extension-anatomy" target="_blank" rel="noopener">Extension Anatomy | Visual Studio Code Extension API</a></li></ul><p>拡張機能が読み込まれると <code>extension.ts</code> の <code>activate</code> 関数が呼ばれます。これは <code>vscode-languageclient</code> パッケージの機能を使って、LSP クライアントを実行しています。ここで LSP サーバー (<code>server.ts</code>) が新しいプロセスとして起動されているようです。</p><p>これで無事に通信が確立します。ユーザーの操作に応じて、クライアントがサーバーに必要な処理の要求を発行して、サーバーが応答する、というのが繰り返される。めでたし。</p><h2 id="LSP-サーバーをイチから書く"><a href="#LSP-サーバーをイチから書く" class="headerlink" title="LSP サーバーをイチから書く"></a>LSP サーバーをイチから書く</h2><p>さて、いま作っている最小限の LSP サーバー (もどき) がこちらです:</p><p><strong><a href="https://github.com/vain0x/curage-lang/tree/v0.1.0" target="_blank" rel="noopener">curage-lang v0.1.0</a></strong></p><p>lsp-sample との違いは主に3点です。</p><p>1つ目は、 LSP サーバーの実装に <code>vscode-languageserver</code> パッケージを使っていないこと。</p><p>このパッケージを使うと手軽に LSP サーバーが作れて便利そうですが、今回は使いません。後々 Node.js を使わずに言語サーバーを実装したいので、その練習のためです。</p><p>2つ目は、 LSP クライアントとサーバーの接続に標準入出力を使っていること。</p><p><code>lsp/src/extension.ts</code> の一部が異なります。 lsp-sample では、 LSP サーバーが Node.js で動いてることを前提とする設定で、LSP クライアントを起動しているようです。curage-lang lsp は、標準入出力を使ってサーバーと接続する設定に変えています。これにより、サーバーが Node.js 上で動いてなくてもよくなります。</p><p>3つ目は、サーバーとクライアントのパッケージを分けていないこと。分かれているとビルドスクリプト等が複雑化するため。</p><ul><li><code>package.json</code> の中身を調査するためにリポジトリ自体もイチから始めてます。いま思うと回り道だった。lsp-sample から始めたほうがいいです。</li></ul><h2 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h2><p>lsp-sample はここまでにして、自作 LSP サーバーに実装する処理をみていきます。参考:</p><ul><li>Language Server Protocol の公式の仕様: <a href="https://microsoft.github.io/language-server-protocol/specification" target="_blank" rel="noopener">Specification</a></li><li>JSON RPC 2.0 の公式の仕様: <a href="https://www.jsonrpc.org/specification" target="_blank" rel="noopener">JSON-RPC 2.0 Specification</a></li></ul><h3 id="実装-メッセージの受け取り"><a href="#実装-メッセージの受け取り" class="headerlink" title="実装: メッセージの受け取り"></a>実装: メッセージの受け取り</h3><p>LSP クライアントからサーバーへのメッセージとして、以下のような文字列が送られます。(改行は <code>\r\n</code>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Content-Length: 88</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;jsonrpc&quot;: &quot;2.0&quot;,</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;method&quot;: &quot;shutdown&quot;,</span><br><span class="line">    &quot;params&quot;: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>フォーマットは HTTP と似ています。空行までがヘッダーです。 <code>Content-Length</code> ヘッダーは必須で、ボディーの長さ (バイト単位) が指定されます。この例では、後半の JSON がボディーです。</p><p>この文字列は、今回はサーバーのプロセスの標準入力に送られてきます。標準入力を受け取るには <code>process.stdin</code> の <code>data</code> イベントを監視して、送られてくるデータをバッファーにためていけばいいです。</p><ul><li>公式のサンプルを見ると <code>readable</code> イベントと <code>read</code> メソッドを使ってました: <a href="https://nodejs.org/api/process.html#process_process_stdin" target="_blank" rel="noopener">Process | Node.js v11.6.0 Documentation</a></li></ul><p>バッファーがたまったらメッセージ単位で切り分けます。これは単純な文字列処理なので詳細は略。</p><ul><li>なお LSP のヘッダーは <code>Content-Length</code> 以外にもありますが、ここでは未実装にします。また、エラーが起こったときは JSON RPC の仕様にのっとってエラー情報を返送する必要がありますが、これも後回しにします。<ul><li>このあたり curage-lang lsp は未熟なので、まだ LSP サーバー “もどき” を名乗ったほうがいいかも。</li></ul></li></ul><p>サーバーからクライアントに送信するメッセージも同様の形式です。</p><h3 id="実装-通信の開始時"><a href="#実装-通信の開始時" class="headerlink" title="実装: 通信の開始時"></a>実装: 通信の開始時</h3><p>通常、クライアントから最初に送られるメッセージは <a href="https://microsoft.github.io/language-server-protocol/specification#initialize" target="_blank" rel="noopener">initialize リクエスト</a> です。</p><p>リクエストのパラメーター (params) として、さまざまな情報が渡されます。いまは必要なさそうなので略。</p><p>JSON RPC ではリクエストに対してレスポンスを返す必要があります。</p><p>initialize へのレスポンスに載せるデータ (result) は <code>InitializeResult</code> インターフェイスで定義されています。ここには LSP サーバーがどの機能を実装しているか (capabilities) を指定します。いまは何も実装できてないので <code>{}</code> 。</p><p>例えば initialize リクエストがこれなら (実際はかなり長い)、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Content-Length: 92</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;jsonrpc&quot;: &quot;2.0&quot;,</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;method&quot;: &quot;initialize&quot;,</span><br><span class="line">    &quot;params&quot;: &#123; /* 略 */ &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>initialize レスポンスはこう:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Content-Length: 75</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;jsonrpc&quot;: &quot;2.0&quot;,</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;result&quot;: &#123; &quot;capabilities&quot;: &#123;&#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注: レスポンスに method を書かなくていいのは id の値から分かるからだと思います。</li></ul><p>この次にクライアントから <code>initialized</code> 通知が来ます。いまは無視してOK。</p><p>通知 (notification) はリクエストとは違って、レスポンスを返さなくていいメッセージです。</p><h3 id="実装-通信の終了時"><a href="#実装-通信の終了時" class="headerlink" title="実装: 通信の終了時"></a>実装: 通信の終了時</h3><p>通信を終了するには、クライアントがサーバーに <code>shutdown</code> リクエストを送ります。この時点ではまだサーバーは終了しません。クライアントが <code>exit</code> 通知をサーバーに送ったら正常終了です。</p><h3 id="実装-ソースコードの検証"><a href="#実装-ソースコードの検証" class="headerlink" title="実装: ソースコードの検証"></a>実装: ソースコードの検証</h3><p>開始して終了するだけのサーバーができました。そろそろ機能を載せます。</p><p>ソースコードが次の文字列と一致しなければ、一致しない部分に警告を出す、という検証機能です。ハローワールドしか書けないプログラミング言語！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print &quot;hello, world!&quot;</span><br></pre></td></tr></table></figure><ul><li>変更点: <a href="https://github.com/vain0x/curage-lang/commit/2c463d3bc83a8bcff14782d9ae49cf8db4f9acd5" target="_blank" rel="noopener">feat: Trivial source code validation</a></li><li><a href="https://github.com/vain0x/curage-lang/tree/v0.2.0" target="_blank" rel="noopener">変更後のリポジトリ</a></li></ul><p>クライアントで編集されているファイルの情報を得るために、 <a href="https://microsoft.github.io/language-server-protocol/specification#initialize" target="_blank" rel="noopener">initialize レスポンス</a> の <code>capabilities</code> に <code>textDocumentSync</code> オプションを追加しました。これがあると、LSP の仕様として、クライアントから以下の通知を送ってもらえることになってます。(ここでめっちゃ詰まりました。)</p><ul><li><a href="https://microsoft.github.io/language-server-protocol/specification#textDocument_didOpen" target="_blank" rel="noopener"><code>textDocument/didOpen</code> 通知</a>: ファイルが開かれた</li><li><code>textDocument/didClose</code> 通知: ファイルが閉じた</li><li><p><code>textDocument/didChange</code> 通知: ファイルが変更された</p></li><li><p>注: これはすべてのクライアントが実装する機能とされているので、 initialize リクエストの capabilities (クライアントがどの機能に対応しているか) を読まずに使っていいです。</p></li><li>注: ファイルの URI が送られてきますが、これを使ってファイルにアクセスするというものではなく、ファイルを区別するための識別子です。</li></ul><p>こうしてファイルが開かれたり変更されるたびにファイルの中身が送られてくるようになったので、検証ができます。</p><p>LSP では警告やエラーをまとめて diagnostic と呼び、その種類を severity と呼んでます。diagnostic の範囲は、行番号と列番号を使って指定します。例えば 0 行目 i 列目の文字に問題があるときの警告はこんな感じです:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(&#123;</span><br><span class="line">    message: <span class="string">`Expected '<span class="subst">$&#123;expected[i]&#125;</span>'.`</span>,</span><br><span class="line">    severity: DiagnosticSeverity.Warning,</span><br><span class="line">    range: &#123;</span><br><span class="line">        start: &#123; line: <span class="number">0</span>, character: i &#125;,</span><br><span class="line">        end: &#123; line: <span class="number">0</span>, character: i + <span class="number">1</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>diagnostics の配列を作って、 <a href="https://microsoft.github.io/language-server-protocol/specification#textDocument_publishDiagnostics" target="_blank" rel="noopener">textDocumet/publishDiagnostics 通知</a> を送ります。</p><ul><li>注: この通知はドキュメント内の diagnostic をすべて置き換えます。</li></ul><p>検証処理の実装は、1文字ずつ比較するだけなので略。</p><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><h3 id="動作確認-VSCode"><a href="#動作確認-VSCode" class="headerlink" title="動作確認: VSCode"></a>動作確認: VSCode</h3><p>VSCode は開発中の拡張機能をデバッグできます。</p><ul><li>注: <code>.vscode/launch.json</code> に設定があります。詳細は分かりません。</li></ul><p>なんにせよ F5 を押すと VSCode が起動して、ちゃんと LSP サーバーが動きます。めでたし。</p><p><img src="https://qiita-image-store.s3.amazonaws.com/0/74340/38f57697-5ace-02c9-a8b4-e7831b7a0c54.png" alt=""></p><p>(VSCode で curage-lang lsp v0.2.0 が動いている様子)</p><h3 id="動作確認-Sublime-Text-3"><a href="#動作確認-Sublime-Text-3" class="headerlink" title="動作確認: Sublime Text 3"></a>動作確認: Sublime Text 3</h3><p>せっかくなので別の LSP クライアントでも試してみましょう。Sublime Text 3 でやってみます。</p><p>駆け足で手順だけ書くと:</p><ul><li><a href="https://www.sublimetext.com/" target="_blank" rel="noopener">Sublime Text 3 をインストールする</a> (無期限に無償で使えます)</li><li><a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">Package Control をインストールする</a></li><li>Package Control で “LSP” をインストールする</li><li>LSP Settings で <a href="https://github.com/tomv564/LSP#configuration" target="_blank" rel="noopener">LSP クライアントの設定を書く</a><ul><li><code>out/server.js</code> が起動されるようにコマンドを指定しておく。</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"clients"</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"curage"</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"command"</span>:</span><br><span class="line">            [</span><br><span class="line">                <span class="string">"node"</span>,</span><br><span class="line">                <span class="string">"&lt;略&gt;/curage-lang/lsp/out/server.js"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"scopes"</span>: [<span class="string">"text.plain"</span>],</span><br><span class="line">            <span class="attr">"syntaxes"</span>: [],</span><br><span class="line">            <span class="attr">"languageId"</span>: <span class="string">"plaintext"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注: この設定だとあらゆるテキストファイルに関して警告を出してしまうので、何か間違っていそう。</li></ul><p>動いている様子はだいたい同じです。</p><h2 id="まとめと次回"><a href="#まとめと次回" class="headerlink" title="まとめと次回"></a>まとめと次回</h2><p>今回のポイントは以下の3点でした。</p><ul><li>LSP ではクライアントとサーバーがリクエストとレスポンスを投げ合う (ときどき通知)</li><li>クライアントの通知を受け取れた / クライアントに通知を送れた</li><li>自作 LSP サーバーが任意のエディタで動いてて楽しい</li></ul><p>次はもっとプログラミング言語らしいものを検証して、構文エラーの警告を出せるようにします。そのあと、変数のリネームやシンボル参照の検索などをやっていきたいです。</p><ul><li>次回: <a href="https://qiita.com/vain0x/items/490ae33ba3db3c829c13" target="_blank" rel="noopener">LSP学習記 #2 クラゲ言語の構文解析</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;LSP サーバーの実装の練習をしています。この記事は勉強ノートとして、調査事項をまとめつつ、成果物を作成した手順を解説します。&lt;/p&gt;
&lt;p&gt;第1回では LSP の基礎部分に触れ、極小の LSP サーバーを準備し、「エディター上にリアルタイムで警告を表示する」機能を作ります
      
    
    </summary>
    
    
      <category term="言語処理系" scheme="http://vain0x.github.io/blog/tags/%E8%A8%80%E8%AA%9E%E5%87%A6%E7%90%86%E7%B3%BB/"/>
    
      <category term="TypeScript" scheme="http://vain0x.github.io/blog/tags/TypeScript/"/>
    
      <category term="LanguageServerProtocol" scheme="http://vain0x.github.io/blog/tags/LanguageServerProtocol/"/>
    
  </entry>
  
  <entry>
    <title>近況 2018-12-31</title>
    <link href="http://vain0x.github.io/blog/2018-12-31/diary/"/>
    <id>http://vain0x.github.io/blog/2018-12-31/diary/</id>
    <published>2018-12-31T14:59:59.000Z</published>
    <updated>2019-01-12T03:09:34.120Z</updated>
    
    <content type="html"><![CDATA[<p>今月の進捗など</p><ul><li>前月分: <a href="https://vain0x.github.io/blog/2018-11-30/diary/">https://vain0x.github.io/blog/2018-11-30/diary/</a></li></ul><h2 id="hsp3-debug-ginger"><a href="#hsp3-debug-ginger" class="headerlink" title="hsp3-debug-ginger"></a>hsp3-debug-ginger</h2><p><a href="https://github.com/vain0x/hsp3-debug-ginger" target="_blank" rel="noopener">https://github.com/vain0x/hsp3-debug-ginger</a></p><ul><li>前月からやっている、VSCode 対応の HSP デバッガーを作るプロジェクト</li><li>前回の近況では進捗を書き忘れていた</li><li>最小限の機能が揃った<ul><li>グローバル変数を基本型の1次元配列まで表示できる</li><li>assert とかで止まったときに実行中の行がエディター上で強調表示される</li><li>VSCode の一時停止ボタンやステップインボタンで実行の制御ができる</li></ul></li><li>アルファ版のプレリリースを出した</li><li>課題はたくさんある<ul><li>インストール手順が煩雑すぎる</li><li>挙動がおかしい<ul><li>実行中の行にスクロールしてくれない</li></ul></li><li>基本的な機能の不足<ul><li>logmes</li><li>2次元以上の配列の表示</li></ul></li></ul></li></ul><h2 id="milone-lang"><a href="#milone-lang" class="headerlink" title="milone-lang"></a>milone-lang</h2><p><a href="https://github.com/vain0x/milone-lang" target="_blank" rel="noopener">https://github.com/vain0x/milone-lang</a></p><ul><li>セルフホストを目指している F# サブセットのコンパイラ</li><li>リファクタリング、エラーハンドリングの強化、パーサーの微修正などの細かい作業をした</li><li>README にプロジェクトの進捗状況やコンパイル手順などを書いた</li><li>パターンマッチを強化した</li><li>when パターンは、パターンに合致した後に追加の <code>if</code> 文を足せばいい</li><li>as パターンは、パターンに合致するかの判定の前に変数への代入を行えばいい</li><li>or パターンの一部<ul><li>パターンを選言標準形的なものにするとやりやすい</li><li>例えばパターン <code>Foo (A | B) :: _</code> を <code>Foo A :: _ | Foo B :: _</code> にする</li><li>つまり <code>|</code> が一番外側に来るようにする</li><li><code>|</code> の左右のパターンについてそれぞれ合致するか試して、どっちかに合致したら <code>-&gt;</code> の内側に <code>goto</code> する</li><li>いまのところ or を含むパターンでは変数を束縛できない</li></ul></li></ul><h2 id="curage-lang"><a href="#curage-lang" class="headerlink" title="curage-lang"></a>curage-lang</h2><p><a href="https://github.com/vain0x/curage-lang" target="_blank" rel="noopener">https://github.com/vain0x/curage-lang</a></p><ul><li>Language Server Protocol (LSP) の練習用のプロジェクトを始めた</li><li>LSP は Debugger Adapter Protocol と似てるけど、より複雑で難しい</li><li>既存のパーサーを使うのはめんどくさいので処理系を一から書いていて、いちおう自作言語という扱い</li><li>クラゲ言語</li><li>Rust 風の構文 (予定)</li><li>単純な型システム (予定)</li><li>インタプリタ上での実行 (予定)</li><li>いまのところ構文エラーを VSCode 上に警告として表示するやつ (textDocument/publishDiagnostics) だけできている</li><li>Node (TypeScript) 用に LSP の実装の基盤となるフレームワーク的なものがある<ul><li>vscode-languageserver</li><li>何をやっているのかよく分からないので使っていない</li></ul></li></ul><h2 id="競技プログラミング"><a href="#競技プログラミング" class="headerlink" title="競技プログラミング"></a>競技プログラミング</h2><ul><li>AtCoder に毎週参加している</li><li>レートは青に漸近中 (1557 → 1580 → 1582)</li><li><a href="https://note.mu/vain0x/n/ne88e557f5859" target="_blank" rel="noopener">競プロ参戦記 #24 「約数75」 ABC 114｜ベイン｜note</a></li><li><a href="https://note.mu/vain0x/n/n539b9a9ac173" target="_blank" rel="noopener">競プロ参戦記 #25 「クリスマス多次元バーガー」 ABC 115｜ベイン｜note</a></li><li><a href="https://note.mu/vain0x/n/n6aa8c41c4b77" target="_blank" rel="noopener">競プロ参戦記 #26 「和が2冪」  AGC 29 [AB]｜ベイン｜note</a></li><li><a href="https://note.mu/vain0x/n/nb6b19dd4245a" target="_blank" rel="noopener">競プロ参戦記 #27 「ゲーム」 CADDi 2018 [CD]｜ベイン｜note</a></li></ul><h2 id="ウェブアプリ開発"><a href="#ウェブアプリ開発" class="headerlink" title="ウェブアプリ開発"></a>ウェブアプリ開発</h2><ul><li>UI を作り込んだ</li><li>on-the-fly で描画するには複雑なグラフを SVG 画像として生成するスクリプトを書いた<ul><li>Fabric.js でラップされた Canvas API を使って図形を描画して、SVG にエクスポートして、ローカルサーバーに送信して、ファイルに保存する、という遠回り。1回動いたら十分なのでよし</li></ul></li></ul><h2 id="Qiita"><a href="#Qiita" class="headerlink" title="Qiita"></a>Qiita</h2><ul><li><a href="https://qiita.com/vain0x/items/8f8b6effb32cd68c22f3" target="_blank" rel="noopener">シクシク素数列を F# でやってみた - Qiita</a> を投稿した<ul><li>F# で素数判定をやるサンプルコード的なもの</li></ul></li><li><a href="https://qiita.com/yasuabe2613/items/5ab33e103e4105630e4c" target="_blank" rel="noopener">Domain Modeling Made Functional まとめ - Qiita</a> を読んだ<ul><li>元になった F# で DDD をやる本も読んでいる</li></ul></li></ul><h2 id="Trickle"><a href="#Trickle" class="headerlink" title="Trickle"></a>Trickle</h2><ul><li>Trickle を始めた</li><li>トピックごとに活動記録を書いていけるスマートフォンアプリ</li><li>参考 <a href="http://blog.h13i32maru.jp/entry/2018/11/12/092904" target="_blank" rel="noopener">http://blog.h13i32maru.jp/entry/2018/11/12/092904</a></li><li>ガルパメモの垂れ流しになってる</li></ul><h2 id="ガルパ-リズムゲーム"><a href="#ガルパ-リズムゲーム" class="headerlink" title="ガルパ (リズムゲーム)"></a>ガルパ (リズムゲーム)</h2><ul><li>難度26の精度は確実に上がってきている</li><li>難度27以上については、マジックアワーをフルコンボした以外に進歩がない</li><li>アニメの 1st season 良かった</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今月の進捗など&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前月分: &lt;a href=&quot;https://vain0x.github.io/blog/2018-11-30/diary/&quot;&gt;https://vain0x.github.io/blog/2018-11-30/diary/&lt;/a&gt;&lt;/
      
    
    </summary>
    
    
      <category term="日記" scheme="http://vain0x.github.io/blog/tags/%E6%97%A5%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>シクシク素数列を F# でやってみた</title>
    <link href="http://vain0x.github.io/blog/2018-12-16/siku-siku-primes/"/>
    <id>http://vain0x.github.io/blog/2018-12-16/siku-siku-primes/</id>
    <published>2018-12-16T01:34:43.000Z</published>
    <updated>2019-01-12T03:09:34.120Z</updated>
    
    <content type="html"><![CDATA[<p>シクシク素数列アドベントカレンダーという、単一の問題を毎日異なる言語で解く催しがあるみたいです。F# での参加者はいないみたいなので、カレンダー不参加ですがやってみます。</p><p><a href="https://qiita.com/advent-calendar/2018/4949prime-series" target="_blank" rel="noopener">シクシク素数列 Advent Calendar 2018 - Qiita</a></p><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><blockquote><ul><li>数値に4か9を含む素数をシクシク素数と呼ぶことにします<ul><li>19とか41とか149とか。</li></ul></li><li>標準入力として正の整数 N を与えたら N 番目までのシクシク素数を半角カンマ区切りで標準出力してください<ul><li>例 N = 9 の場合、 19,29,41,43,47,59,79,89,97</li></ul></li><li>N は最大で 100 とします</li></ul></blockquote><h2 id="考察"><a href="#考察" class="headerlink" title="考察"></a>考察</h2><p>10進数展開に4か9を含む整数を <strong>シクシク数</strong> と呼ぶことにします。こうするとシクシク素数の条件は</p><ul><li>シクシク数であること</li><li>素数であること</li></ul><p>の2つに分割できて、シンプルに実装できそうです。</p><h2 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h2><p>なるべく読みやすい実装を心がけて書いていきましょう！</p><p>実装方法はたくさんありますが、今回はやんごとなき理由から seq を中心に使っています。</p><h3 id="実装-素数判定"><a href="#実装-素数判定" class="headerlink" title="実装: 素数判定"></a>実装: 素数判定</h3><p>はじめに素数判定の関数を作ります。よくあるやりかたですが、 2 以上 √n 以下の数で割ってみて、いずれも割り切れなければ素数、と判定します。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isPrime n =</span><br><span class="line">  <span class="comment">// n が2未満のケースは除外</span></span><br><span class="line">  <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">then</span> <span class="keyword">false</span> <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// √n の整数部分</span></span><br><span class="line">  <span class="keyword">let</span> r = n |&gt; float |&gt; sqrt |&gt; int</span><br><span class="line"></span><br><span class="line">  seq &#123; <span class="number">2.</span>.r &#125; |&gt; Seq.forall (<span class="keyword">fun</span> m -&gt; n % m &lt;&gt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><code>seq { 2..r }</code> は 2 から r 以下の数からなる数列を表しています。この中の値をそれぞれ m として、 <code>n % m &lt;&gt; 0</code> がすべてについて成り立てばOK。</p><p><code>seq</code> と <code>Seq.</code> ですでにシクシク感が出ていますが、シクシク数の判定は次です。</p><h3 id="実装-シクシク数の判定"><a href="#実装-シクシク数の判定" class="headerlink" title="実装: シクシク数の判定"></a>実装: シクシク数の判定</h3><p>シクシク数かどうかの判定では、 n の10進展開を計算します。割り算を使うことで n を1桁目とそれ以外の部分に分解できるというのがポイント。</p><ul><li><code>n / 10</code> は、n から1桁目を取り除いたもの</li><li><code>n % 10</code> は n の1桁目</li></ul><p>そのため <code>n / 10</code> を10進展開したものに <code>n % 10</code> を付け足せば、n の各桁の数からなる列を構成できます。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">rec</span> digits n =</span><br><span class="line">  seq &#123;</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">yield!</span> digits (n / <span class="number">10</span>)</span><br><span class="line">      <span class="keyword">yield</span> n % <span class="number">10</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>ここでの <code>seq { .. }</code> はブロック内で <code>yield</code> された値からなる列を表します。他の言語にあるリストの内包表記みたいなもの。<code>yield!</code> は複数の値を一挙に <code>yield</code> することを表しています。</p><p>シクシク数の判定は、これで得られた各桁の数のどれかが 4, 9 に等しいかどうかを判定すればOK。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isSikuSiku n =</span><br><span class="line">  digits n |&gt; Seq.exists (<span class="keyword">fun</span> d -&gt; d = <span class="number">4</span> || d = <span class="number">9</span>)</span><br></pre></td></tr></table></figure><h3 id="実装-シクシク素数列挙"><a href="#実装-シクシク素数列挙" class="headerlink" title="実装: シクシク素数列挙"></a>実装: シクシク素数列挙</h3><p>これでシクシク素数判定関数のできあがり！</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isSikuSikuPrime n =</span><br><span class="line">  isSikuSiku n &amp;&amp; isPrime n</span><br></pre></td></tr></table></figure><p>非負整数を列挙して、シクシク素数であるものに絞り込むことで、シクシク素数を昇順に列挙します。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sikuSikuPrimes =</span><br><span class="line">  seq &#123;</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="number">0.</span>.Int32.MaxValue <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">if</span> isSikuSikuPrime n <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>seq { .. }</code> の中身は必要に応じて計算されるので、実際には全整数についてのループが回るわけではないので安心してください。</p><p><code>Seq.take N</code> を使うと、列の前から N 個の要素が列挙された時点で計算を打ち切るようにできます。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sikuSikuPrimes |&gt; Seq.take N</span><br></pre></td></tr></table></figure><h3 id="実装-main"><a href="#実装-main" class="headerlink" title="実装: main"></a>実装: main</h3><p>最後に標準入出力を書きます。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> N = Console.ReadLine() |&gt; int</span><br><span class="line"></span><br><span class="line">sikuSikuPrimes</span><br><span class="line">|&gt; Seq.take N</span><br><span class="line">|&gt; Seq.map string</span><br><span class="line">|&gt; String.concat <span class="string">","</span></span><br><span class="line">|&gt; printfn <span class="string">"%s"</span></span><br></pre></td></tr></table></figure><p><a href="https://dotnetfiddle.net/mIJ1qY" target="_blank" rel="noopener">.NET Fiddle で試す</a></p><h2 id="おまけ"><a href="#おまけ" class="headerlink" title="おまけ"></a>おまけ</h2><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isPrime n =</span><br><span class="line">  <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">then</span> <span class="keyword">false</span> <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> r = n |&gt; float |&gt; sqrt |&gt; int</span><br><span class="line">  seq &#123; <span class="number">2.</span>.r &#125; |&gt; Seq.forall (<span class="keyword">fun</span> m -&gt; n % m &lt;&gt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> testPrime () =</span><br><span class="line">  <span class="keyword">assert</span> (isPrime <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">assert</span> (isPrime <span class="number">19</span>)</span><br><span class="line">  <span class="keyword">assert</span> (isPrime <span class="number">4</span> |&gt; not)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">rec</span> digits n =</span><br><span class="line">  seq &#123;</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">yield!</span> digits (n / <span class="number">10</span>)</span><br><span class="line">      <span class="keyword">yield</span> n % <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> testDigits () =</span><br><span class="line">  <span class="keyword">assert</span> (digits <span class="number">0</span> |&gt; Seq.isEmpty)</span><br><span class="line">  <span class="keyword">assert</span> (digits <span class="number">2019</span> |&gt; Seq.toList = [<span class="number">2</span>; <span class="number">0</span>; <span class="number">1</span>; <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line">testDigits ()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isSikuSiku n =</span><br><span class="line">  digits n |&gt; Seq.exists (<span class="keyword">fun</span> d -&gt; d = <span class="number">4</span> || d = <span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> testIsSikuSiku () =</span><br><span class="line">  <span class="keyword">assert</span> (isSikuSiku <span class="number">42</span>)</span><br><span class="line">  <span class="keyword">assert</span> (isSikuSiku <span class="number">2019</span>)</span><br><span class="line">  <span class="keyword">assert</span> (isSikuSiku <span class="number">12356780</span> |&gt; not)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isSikuSikuPrime n =</span><br><span class="line">  isSikuSiku n &amp;&amp; isPrime n</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sikuSikuPrimes =</span><br><span class="line">  seq &#123;</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="number">0.</span>.Int32.MaxValue <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">if</span> isSikuSikuPrime n <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> N = Console.ReadLine() |&gt; int</span><br><span class="line">sikuSikuPrimes</span><br><span class="line">|&gt; Seq.take N</span><br><span class="line">|&gt; Seq.map string</span><br><span class="line">|&gt; String.concat <span class="string">","</span></span><br><span class="line">|&gt; printfn <span class="string">"%s"</span></span><br></pre></td></tr></table></figure><p>出力例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ fsharpi ./Program.fsx</span><br><span class="line">100</span><br><span class="line">19,29,41,43,47,59,79,89,97,109,139,149,179,191,193,197,199,229,239,241,269,293,347,349,359,379,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,509,541,547,569,593,599,619,641,643,647,659,691,709,719,739,743,769,797,809,829,839,859,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1019,1039,1049,1069,1091,1093,1097,1109,1129,1193,1229,1249,1259,1279,1289,1291,1297,1319</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;シクシク素数列アドベントカレンダーという、単一の問題を毎日異なる言語で解く催しがあるみたいです。F# での参加者はいないみたいなので、カレンダー不参加ですがやってみます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://qiita.com/advent-calendar/2
      
    
    </summary>
    
    
      <category term="F#" scheme="http://vain0x.github.io/blog/tags/F/"/>
    
  </entry>
  
  <entry>
    <title>近況 2018-11-30</title>
    <link href="http://vain0x.github.io/blog/2018-11-30/diary/"/>
    <id>http://vain0x.github.io/blog/2018-11-30/diary/</id>
    <published>2018-11-30T14:59:59.000Z</published>
    <updated>2018-12-01T12:04:26.874Z</updated>
    
    <content type="html"><![CDATA[<p>1ヶ月分のコミットメッセージとツイートを眺めていろいろ書くやつ、3回目</p><ul><li>前回: <a href="https://vain0x.github.io/blog/2018-10-31/diary/">https://vain0x.github.io/blog/2018-10-31/diary/</a></li></ul><h2 id="hsp3-debug-ginger"><a href="#hsp3-debug-ginger" class="headerlink" title="hsp3-debug-ginger"></a>hsp3-debug-ginger</h2><p><a href="https://github.com/vain0x/hsp3-debug-ginger" target="_blank" rel="noopener">https://github.com/vain0x/hsp3-debug-ginger</a></p><h3 id="HDG-knowbug-について"><a href="#HDG-knowbug-について" class="headerlink" title="HDG: knowbug について"></a>HDG: knowbug について</h3><p>以前に HSP3 用のデバッガー knowbug を作った</p><ul><li><a href="https://github.com/vain0x/knowbug" target="_blank" rel="noopener">knowbug</a></li><li>ほとんど完成しているので、更新していない</li><li>いくつか心残りがある:<ul><li>配列とかを1本の文字列 (YAMLっぽい形式) で表していて不便だった</li><li>配列の要素やメンバ変数をツリービューのノードにしようとしてたけど、デバッグの途中で放棄してた</li><li>HSP3 の utf-8 版に対応したい</li><li>未対応の改善要望が来ている</li></ul></li><li>生の Win32 API で GUI やってるところがきつくて knowbug はあんまりいじりたくない</li></ul><p>VSCode 用のデバッガーとして新たに作っているのが  <strong>hsp3-debug-ginger</strong></p><h3 id="HDG-Debug-Adapter-Protocol-DAP"><a href="#HDG-Debug-Adapter-Protocol-DAP" class="headerlink" title="HDG: Debug Adapter Protocol (DAP)"></a>HDG: Debug Adapter Protocol (DAP)</h3><p>hsp3-debug-ginger は <strong>Debug Adapter Protocol</strong> という、開発ツール (IDE) とデバッガーと接続するプロトコルを使っている</p><ul><li>例えばエディターのデバッグ UI で停止ボタンを押したら、プロトコルに則った形式でデバッガーに停止イベントが通知されて、プログラムが停止する、みたいな感じ</li><li>開発ツールからすると、何をデバッグしているか知らなくていい</li><li>デバッガーからすると、ユーザーがどの IDE を使っているか知らなくていい</li><li>VSCode はデバッガーと標準入出力で接続するけど、 HSP のデバッガーは DLL なので標準入出力を使えない</li></ul><h3 id="HDG-hsp3-debug-ginger-の構成"><a href="#HDG-hsp3-debug-ginger-の構成" class="headerlink" title="HDG: hsp3-debug-ginger の構成"></a>HDG: hsp3-debug-ginger の構成</h3><ul><li>VSCode と標準入出力でつながる exe と、HSP からロードされる DLL を別個に作って、 WebSocket で繋げる、という構成にした</li><li>WebSocket をわざわざ使う意味がないので TCP に置き換えた</li><li>Windows のプロセス間通信はどうやるのか知らない</li><li>両方 Rust で書いてる</li><li>C++ だと WebSocket とか TCP とかマルチスレッドとか大変そう</li><li>マルチスレッドの扱いはアクターモデルみたいな感じになってきた</li><li>mpsc チャネルという、複数のスレッドから単一のスレッドにメッセージを送信する仕組みを使っている</li><li>Rx.NET でいうと複数のスレッドに渡した Subject を Observable.Merge して単一スレッドで Subscribe する感じ</li><li>これでメッセージを単一のスレッドにディスパッチしてすべての処理をそこでやれば安全</li><li>と思ったけど HSP のメインスレッド上で行うべき処理が一部あって、どうするか困ってる</li></ul><h3 id="HDG-課題"><a href="#HDG-課題" class="headerlink" title="HDG: 課題"></a>HDG: 課題</h3><p>はやくテストを書きたい</p><ul><li>どこを分離したらテストできるのか分からない</li></ul><h2 id="milone-lang"><a href="#milone-lang" class="headerlink" title="milone-lang"></a>milone-lang</h2><p><a href="https://github.com/vain0x/milone-lang" target="_blank" rel="noopener">https://github.com/vain0x/milone-lang</a></p><h3 id="ML-クロージャ変換"><a href="#ML-クロージャ変換" class="headerlink" title="ML: クロージャ変換"></a>ML: クロージャ変換</h3><p>クロージャ変換が入った</p><ul><li>クロージャ変換について <a href="http://esumii.github.io/min-caml/tutorial-mincaml-16.htm" target="_blank" rel="noopener">http://esumii.github.io/min-caml/tutorial-mincaml-16.htm</a></li><li>簡単にいうと、関数を定義しているところと使用しているところをうまいこと変換しないといけない</li></ul><p>これはいくつかのユースケースに分かれる</p><ul><li>1つ目は、 <strong>関数の定義の中で外側のローカル変数を使ってる</strong> ケース <a href="https://github.com/vain0x/milone-lang/commit/250de343ec44b8f5e7aac540520e9c679c4e194e" target="_blank" rel="noopener">https://github.com/vain0x/milone-lang/commit/250de343ec44b8f5e7aac540520e9c679c4e194e</a></li><li>そのままC言語に変換したらコンパイルできない</li><li>ローカル変数を関数の引数経由で渡すように引数を増やす</li></ul><figure class="highlight fs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// before</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 から u まで fizz buzz を表示する</span></span><br><span class="line"><span class="keyword">let</span> fizzBuzz u =</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">rec</span> go i =</span><br><span class="line">        <span class="keyword">if</span> i &lt;= u <span class="keyword">then</span> <span class="comment">// この u は関数 go のローカル変数じゃない</span></span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">3</span> = <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">                <span class="comment">// 略</span></span><br><span class="line">            go (i + <span class="number">1</span>)</span><br><span class="line">    go <span class="number">0</span></span><br><span class="line"></span><br><span class="line">fizzBuzz <span class="number">15</span></span><br></pre></td></tr></table></figure><figure class="highlight fs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// after</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fizzBuzz u =</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">rec</span> go <span class="comment">(*追加*)</span>u i =</span><br><span class="line">        <span class="keyword">if</span> i &lt;= u <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">3</span> = <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">                <span class="comment">// 略</span></span><br><span class="line">            go <span class="comment">(*追加*)</span>u (i + <span class="number">1</span>)</span><br><span class="line">    go <span class="comment">(*追加*)</span>u <span class="number">0</span></span><br><span class="line"></span><br><span class="line">fizzBuzz <span class="number">15</span></span><br></pre></td></tr></table></figure><ul><li>2つ目は、 <strong>関数呼び出しの引数が足りないケース</strong> <a href="https://github.com/vain0x/milone-lang/commit/e16e9418b09d66399c8e19e33a3b758f0328e43c" target="_blank" rel="noopener">https://github.com/vain0x/milone-lang/commit/e16e9418b09d66399c8e19e33a3b758f0328e43c</a></li><li>引数束縛して関数オブジェクトを作る必要がある</li><li>関数オブジェクトはC言語の上では「関数」ではなくただの値なので <code>f(..)</code> という構文では呼べない<ul><li>だから milone-lang の構文的には同一の式でも、関数オブジェクトを呼んでるのか関数を呼んでるのか区別する必要がある</li></ul></li><li>関数オブジェクトは内部に持っている状態を隠蔽する必要がある<ul><li>C言語の上で型に現れると互換性がなくなるから</li><li><code>void*</code> を使うしかない</li><li>最適化の効きが悪くなるので、すべてこれにするというわけにはいかない</li></ul></li></ul><figure class="highlight fs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add x y = x + y</span><br><span class="line"></span><br><span class="line"><span class="comment">// add は2引数なのに引数が1個</span></span><br><span class="line"><span class="keyword">let</span> inc = add <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 関数ではなく関数オブジェクトの呼び出しとしてC言語にする必要がある</span></span><br><span class="line">inc <span class="number">9</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// コンパイル後のイメージ</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add を関数オブジェクト int -&gt; int から呼べるシグネチャにしたもの</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add1</span><span class="params">(<span class="keyword">void</span>* t, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> add(*(<span class="keyword">int</span>*)t, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 関数 int -&gt; int をコンパイルした結果</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IntIntFun</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span>(*fun)(<span class="keyword">void</span>*, <span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">void</span>* env; <span class="comment">// 関数オブジェクトが持っている状態</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 関数オブジェクトを作る</span></span><br><span class="line"><span class="comment">// 状態と関数のペア</span></span><br><span class="line"><span class="keyword">int</span>* x = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> <span class="keyword">int</span>);</span><br><span class="line">*x = <span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IntIntFun</span> <span class="title">inc</span> = &#123;</span></span><br><span class="line">    .fun = add1,</span><br><span class="line">    .env = (<span class="keyword">void</span>*)x,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 関数オブジェクトを呼び出す</span></span><br><span class="line"><span class="comment">// inc は関数ではないので inc() とはできない</span></span><br><span class="line">inc.fun(inc.env, <span class="number">9</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>関数の引数がないケース</strong> (<code>let f = add</code> みたいなやつ) もこれと同様に処理できる<ul><li>関数参照は引数ゼロの引数束縛</li></ul></li><li>あと <strong>関数の引数が多いケース</strong> (複数の呼び出しに分解する必要がある) とかある</li></ul><h3 id="ML-ユニオン型"><a href="#ML-ユニオン型" class="headerlink" title="ML: ユニオン型"></a>ML: ユニオン型</h3><p>ユニオン型 (判別共用体型) が入った <a href="https://github.com/vain0x/milone-lang/commit/2a994c3aa8bae0b4be38c2e5bbfee0a913e0e6d4" target="_blank" rel="noopener">https://github.com/vain0x/milone-lang/commit/2a994c3aa8bae0b4be38c2e5bbfee0a913e0e6d4</a></p><p>ただし再帰的定義はできない</p><h3 id="ML-ステージ順序"><a href="#ML-ステージ順序" class="headerlink" title="ML: ステージ順序"></a>ML: ステージ順序</h3><p>いままでのソースコードの変換過程は、 パース → 型つけ → MIR化 → クロージャ変換 → C言語化、だった</p><ul><li>MIR化: パターンマッチを条件分岐に変換しつつ、入れ子になった式を平坦にする (K正規化する) という手順</li></ul><p>クロージャ変換は静的コード生成に近いものがある。これを MIR に対して行っていたせいで、入れ子になった式やパターンマッチを生成できなくて、生成処理が分かりにくかった。だから順番を入れ替えてる (作業中)</p><p>パース → 型つけ → クロージャ変換 → MIR化 → C言語化</p><h3 id="ML-その他"><a href="#ML-その他" class="headerlink" title="ML: その他"></a>ML: その他</h3><ul><li><code>y |&gt; f x</code> は構文的には <code>f x</code> という関数オブジェクトに <code>x</code> を適用してるけど、実際には <code>f x y</code> が呼ばれるのでゼロコスト、というのが分かった</li></ul><h2 id="競プロ参戦記"><a href="#競プロ参戦記" class="headerlink" title="競プロ参戦記"></a>競プロ参戦記</h2><p>AtCoder でのコンテスト開催が少なかったため3回だけ</p><ul><li><a href="https://note.mu/vain0x/n/ned281cf01192?magazine_key=m9aa8513f4e97" target="_blank" rel="noopener">競プロ参戦記 第21回 「気温とあみだくじ」 ABC 113｜ベイン｜note</a></li><li><a href="https://note.mu/vain0x/n/n22b97a3e44f8?magazine_key=m9aa8513f4e97" target="_blank" rel="noopener">競プロ参戦記 第22回 「最大の論理積」 / ドワンゴコン5 [ABC]｜ベイン｜note</a></li><li><a href="https://note.mu/vain0x/n/n85e1dd5a0b3d?magazine_key=m9aa8513f4e97" target="_blank" rel="noopener">競プロ参戦記 #23 「チップストーリー」 / DDCC 2019 予選｜ベイン｜note</a></li></ul><p>転倒数の記事の閲覧数がなぜか増え続けていることに気づいた。わりと尻切れトンボな記事だったので、 BIT について加筆した</p><ul><li><a href="https://note.mu/vain0x/n/n0037d6468812" target="_blank" rel="noopener">競プロ参戦記 第10回「転倒数」  Chokudai Speed Run 001 [J]｜ベイン｜note</a></li></ul><h2 id="円周率チャレンジ"><a href="#円周率チャレンジ" class="headerlink" title="円周率チャレンジ"></a>円周率チャレンジ</h2><p>2 を足す操作と平方根をとる操作を繰り返して、数値を円周率に近づけるゲーム。半分全列挙を使って手順を探索した</p><ul><li><a href="https://vain0x.github.io/blog/2018-11-07/pi-challenge/">円周率チャレンジにアルゴリズムでチャレンジ</a></li></ul><h2 id="ブログ"><a href="#ブログ" class="headerlink" title="ブログ"></a>ブログ</h2><ul><li>ヘッダーに競プロ参戦記等へのリンクを貼った</li><li>ローカライズのあやしい部分を修正した</li></ul><h2 id="Web-アプリ開発"><a href="#Web-アプリ開発" class="headerlink" title="Web アプリ開発"></a>Web アプリ開発</h2><ul><li>前月同様、昨日は増えてるが品質は下がってる</li><li>リファクタリングがいるのは分かるけど、どういう方向に持っていけばいいのか……</li></ul><h2 id="ガルパ"><a href="#ガルパ" class="headerlink" title="ガルパ"></a>ガルパ</h2><ul><li>難度 26 楽曲でもフルコンボがたびたび出るようになってきた</li><li>難度 27 楽曲を回復なしでクリアできるように練習してる</li><li>左手プレイは練習してもうまくならないという限界を感じる<ul><li>片方をホールドして動かしながら他方でタップ、みたいなのができない</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1ヶ月分のコミットメッセージとツイートを眺めていろいろ書くやつ、3回目&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前回: &lt;a href=&quot;https://vain0x.github.io/blog/2018-10-31/diary/&quot;&gt;https://vain0x.github.io/b
      
    
    </summary>
    
    
      <category term="日記" scheme="http://vain0x.github.io/blog/tags/%E6%97%A5%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>円周率チャレンジにアルゴリズムでチャレンジ</title>
    <link href="http://vain0x.github.io/blog/2018-11-07/pi-challenge/"/>
    <id>http://vain0x.github.io/blog/2018-11-07/pi-challenge/</id>
    <published>2018-11-07T08:01:00.000Z</published>
    <updated>2018-12-01T12:04:26.874Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://rirosi.net/plus2/" target="_blank" rel="noopener">円周率チャレンジ</a> というゲームが流行中です！</p><p>プログラムを使って良い解法を探索してみたので、考えたことを書いていきます。</p><h2 id="円周率チャレンジとは"><a href="#円周率チャレンジとは" class="headerlink" title="円周率チャレンジとは"></a>円周率チャレンジとは</h2><blockquote><h2 id="円周率チャレンジ"><a href="#円周率チャレンジ" class="headerlink" title="円周率チャレンジ"></a>円周率チャレンジ</h2><p>「円周率チャレンジ」は，「ルートをとる(sqrt)」「2を足す(+2)」の２種類のボタンを使って，<br>数字を円周率に近づけていくゲームです。できるだけ少ない回数でハイスコアを狙いましょう！</p></blockquote><p>例えば +2, √, +2 という手順で操作を行うと、数値は:</p><p>0 → 2 → 1.41421.. → 3.41421..</p><p>と変化して、円周率 π = 3.141592.. に近い数値になります。</p><p>もっと手数を増やせば、 <strong>さらに円周率に近づけられるはず</strong> 。その最良手順を探すゲームです。</p><h2 id="解法1-ビット全探索"><a href="#解法1-ビット全探索" class="headerlink" title="解法1: ビット全探索"></a>解法1: ビット全探索</h2><p>やはり最初に試すのは全探索でしょう！</p><p>手数 N の最良手順を探すことを考えます。ここで手順とは「ルートをとる」と「+2 を足す」の2種類の要素からなる長さ N の列です。手順をすべて列挙して、計算結果と円周率を実際に比べてみれば、何が最良か分かるはずです。</p><p>2種類の要素を 0, 1 で表せば、手順はビット列として扱えて、配列を使うより経済的に全探索できます。参考: <a href="https://qiita.com/drken/items/7c6ff2aa4d8fce1c9361#bit-%E5%85%A8%E6%8E%A2%E7%B4%A2" target="_blank" rel="noopener">ビット演算 (bit 演算) の使い方を総特集！ 〜 マスクビットから bit DP まで 〜 - Qiita</a></p><p>操作列の「実行」は次のようなコードです。下位ビットから順番にみていき、 0 なら +2 の操作を、1 ならルートをとる操作を実行して、最終結果を得ます。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">eval</span></span>(ops: <span class="built_in">i64</span>, n: <span class="built_in">usize</span>) -&gt; <span class="built_in">f64</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> value = <span class="number">0.0_f64</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">        <span class="keyword">if</span> (ops &amp; (<span class="number">1</span> &lt;&lt; i)) == <span class="number">0</span> &#123;</span><br><span class="line">            value += <span class="number">2.0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            value = value.sqrt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これをすべての操作列に適用して、円周率の差が最小のものを探します。抜粋:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//..</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> best_diff = <span class="number">1e9</span>; <span class="comment">// 最小の差</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> best_ops = <span class="number">0</span>; <span class="comment">// 最小の差を達成した操作列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ops <span class="keyword">in</span> <span class="number">0</span>..<span class="number">1</span> &lt;&lt; n &#123; <span class="comment">// 操作列の全列挙</span></span><br><span class="line">    <span class="keyword">let</span> value = eval(ops, n); <span class="comment">// 操作の実行</span></span><br><span class="line">    <span class="keyword">let</span> diff = (value - PI).abs(); <span class="comment">// 円周率との差</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> best_diff &gt; diff &#123; <span class="comment">// 最小値の更新</span></span><br><span class="line">        best_diff = diff;</span><br><span class="line">        best_ops = ops;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//..</span></span><br></pre></td></tr></table></figure><p><a href="https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2015&amp;gist=61011280947f9a6641333f63bc0b90cb" target="_blank" rel="noopener">コード全体はこちら</a></p><p>時間がかかるのでリリースモードを使って (<code>cargo run --release</code>) 実行すると、こんな感じで手数ごとの良い操作列を出します:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">手数 数値                差                 操作</span><br><span class="line">#00 0.0000000000000000 3.1415926535897931</span><br><span class="line">#01 2.0000000000000000 1.1415926535897931 +</span><br><span class="line">..</span><br><span class="line">#27 3.1415927103795092 0.0000000567897160 +/++ +/// //// //// ++// +/++ ++/</span><br><span class="line">#28 3.1415926624518788 0.0000000088620857 +//+ ++// //// //// /++/ /+/+ +++/</span><br></pre></td></tr></table></figure><p>これで手数 N=28 ぐらいまでの最良(?)手順が求まりました。それ以上は時間がかかりすぎるので、別の方法で探索したほうがよさそうです。</p><h2 id="解法2-半分全列挙"><a href="#解法2-半分全列挙" class="headerlink" title="解法2: 半分全列挙"></a>解法2: 半分全列挙</h2><p>全探索では 0 から π に近づけましたが、逆に π から 0 に近づける操作列も考えられます。つまり、</p><blockquote><p>π から始めて、「2を引く」と「2乗する」を組み合わせて 0 に近づけるゲーム</p></blockquote><p>をやってもいいです。このことから、0 と π の <strong>両端から良い手順を探して繋ぐ</strong> という解法が出てきます。いわゆる半分全列挙です。</p><p>具体的には:</p><ul><li>手数 N/2 の操作 F をすべて列挙して、その結果の数値を A とするとき、(A, F) というペアをすべて記録しておく。</li><li>次に、手数 N/2 の操作 G をすべて列挙して、それを π から逆算したときの数値を B とする。</li><li>メモから (B, F) に最も近いものを探して操作 F+G を作れば、これは π に近い数になる。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    F            G</span><br><span class="line">0   →   A ≒ B   →   π</span><br></pre></td></tr></table></figure><p>計算量はどうでしょう。</p><ul><li>メモ ((A, F) の配列) を A についてソートしておけば、メモから探すのは二分探索ができます。</li><li>ソートを工夫しなければ、全体として O(2^(N/2) log N) です。<ul><li>これなら <strong>N = 50 ぐらいまでいけそう</strong> 。</li></ul></li></ul><p><a href="https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2015&amp;gist=17cf3535110ee76685581525e57cad15" target="_blank" rel="noopener">コード全体はこちら</a></p><p>しばらく待つと、53手のかなり強い手順が得られます。小数点以下15桁まで一致。</p><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>執筆時点で1位の (手数 53, スコア Infinity) には及びませんでした。おそらく二分探索の段階で近似的になりすぎてしまうからかなと思います。ヒューリスティックなアルゴリズムや数学的なアプローチの余地がまだまだありそうです。</p><p>なにはともあれ、半分全列挙のよい練習になりました。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://tatsu-zine.com/books/procon-challenge" target="_blank" rel="noopener">プログラミングコンテストチャレンジブック [第2版]【委託】 - 達人出版会</a><ul><li>通称蟻本。半分全列挙が載っていました</li></ul></li></ul><h2 id="Appendix-ソースコード"><a href="#Appendix-ソースコード" class="headerlink" title="Appendix. ソースコード"></a>Appendix. ソースコード</h2><details><br>    <summary>ビット全探索</summary><br><br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::<span class="built_in">f64</span>::consts::PI;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 操作列 ops の下位ビットから r 桁を実行して、結果の数値を得る。</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">eval</span></span>(ops: <span class="built_in">i64</span>, n: <span class="built_in">usize</span>) -&gt; <span class="built_in">f64</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> value = <span class="number">0.0_f64</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">        <span class="keyword">if</span> (ops &amp; (<span class="number">1</span> &lt;&lt; i)) == <span class="number">0</span> &#123;</span><br><span class="line">            value += <span class="number">2.0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            value = value.sqrt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 操作列を読みやすい文字列にする。</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">how</span></span>(ops: <span class="built_in">i64</span>, n: <span class="built_in">usize</span>) -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> acc = <span class="built_in">String</span>::new();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">0</span> &amp;&amp; i % <span class="number">4</span> == <span class="number">0</span> &#123;</span><br><span class="line">            acc.push(<span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ops &amp; (<span class="number">1</span> &lt;&lt; i)) == <span class="number">0</span> &#123;</span><br><span class="line">            acc.push(<span class="string">'+'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            acc.push(<span class="string">'/'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    acc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// n: 手数</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="number">0</span>..<span class="number">29</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> best_diff = <span class="number">1e9</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> best_ops = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ops <span class="keyword">in</span> <span class="number">0</span>..<span class="number">1</span> &lt;&lt; n &#123;</span><br><span class="line">            <span class="keyword">let</span> value = eval(ops, n);</span><br><span class="line">            <span class="keyword">let</span> diff = (value - PI).abs();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> best_diff &gt; diff &#123;</span><br><span class="line">                best_diff = diff;</span><br><span class="line">                best_ops = ops;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> value = eval(best_ops, n);</span><br><span class="line">        <span class="keyword">let</span> diff = (value - PI).abs();</span><br><span class="line">        <span class="keyword">let</span> how = how(best_ops, n);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"#&#123;:&gt;02&#125; &#123;:&gt;.16&#125; &#123;:&gt;0.16&#125; &#123;&#125;"</span>, n, value, diff, how);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></details><details><br>    <summary>半分全列挙</summary><br><br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::<span class="built_in">f64</span>::consts::PI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">lower_bound</span></span>&lt;T: <span class="built_in">PartialOrd</span>&gt;(xs: &amp;[T], y: &amp;T) -&gt; <span class="built_in">usize</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> r = xs.len() + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> r - l &gt; <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> m = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> &amp;xs[m - <span class="number">1</span>] &lt; y &#123;</span><br><span class="line">            l = m;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r = m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    l</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 操作列 ops の下位ビットから n 桁を実行して、結果の数値を得る。</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">eval</span></span>(ops: <span class="built_in">i64</span>, n: <span class="built_in">usize</span>) -&gt; <span class="built_in">f64</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> value = <span class="number">0.0_f64</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">        <span class="keyword">if</span> (ops &amp; (<span class="number">1</span> &lt;&lt; i)) == <span class="number">0</span> &#123;</span><br><span class="line">            value += <span class="number">2.0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            value = value.sqrt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 操作列 ops の上位ビットから n 桁の逆操作を実行して、結果の数値を得る。</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">eval_inv</span></span>(ops: <span class="built_in">i64</span>, n: <span class="built_in">usize</span>) -&gt; <span class="built_in">f64</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> value = PI;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>..n).rev() &#123;</span><br><span class="line">        <span class="keyword">if</span> (ops &amp; (<span class="number">1</span> &lt;&lt; i)) == <span class="number">0</span> &#123;</span><br><span class="line">            value -= <span class="number">2.0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            value *= value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 操作列を読みやすい文字列にする。</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">how</span></span>(ops: <span class="built_in">i64</span>, n: <span class="built_in">usize</span>) -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> acc = <span class="built_in">String</span>::new();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">0</span> &amp;&amp; i % <span class="number">4</span> == <span class="number">0</span> &#123;</span><br><span class="line">            acc.push(<span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ops &amp; (<span class="number">1</span> &lt;&lt; i)) == <span class="number">0</span> &#123;</span><br><span class="line">            acc.push(<span class="string">'+'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            acc.push(<span class="string">'/'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    acc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 手数 n の操作の結果をすべて計算する。</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">enumerate</span></span>(n: <span class="built_in">usize</span>) -&gt; <span class="built_in">Vec</span>&lt;(<span class="built_in">f64</span>, <span class="built_in">i64</span>)&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> memo = <span class="built_in">vec!</span>[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ops <span class="keyword">in</span> <span class="number">0</span>..<span class="number">1</span> &lt;&lt; n &#123;</span><br><span class="line">        <span class="keyword">let</span> value = eval(ops, n);</span><br><span class="line">        memo.push((value, ops));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    memo.sort_by(|(lx, _), (rx, _)| lx.partial_cmp(rx).unwrap());</span><br><span class="line">    memo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// n: 手数</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="number">0</span>..<span class="number">54</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> ln = n / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">let</span> rn = n - ln;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> memo = enumerate(ln);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> best_diff = <span class="number">1e9</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> best_ops = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> r_ops <span class="keyword">in</span> <span class="number">0</span>..<span class="number">1</span> &lt;&lt; rn &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = eval_inv(r_ops, rn);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> i = lower_bound(&amp;memo, &amp;(mid, r_ops));</span><br><span class="line">            <span class="keyword">if</span> !(i &lt; memo.len()) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> (_, l_ops) = memo[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> ops = (r_ops &lt;&lt; ln) | l_ops;</span><br><span class="line">            <span class="keyword">let</span> value = eval(ops, n);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> diff = (value - PI).abs();</span><br><span class="line">            <span class="keyword">if</span> best_diff &gt; diff &#123;</span><br><span class="line">                best_diff = diff;</span><br><span class="line">                best_ops = ops;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> value = eval(best_ops, n);</span><br><span class="line">        <span class="keyword">let</span> diff = (value - PI).abs();</span><br><span class="line">        <span class="keyword">let</span> how = how(best_ops, n);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"#&#123;:&gt;02&#125; &#123;:&gt;.16&#125; &#123;:&gt;.16&#125; &#123;&#125;"</span>, n, value, diff, how);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></details>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://rirosi.net/plus2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;円周率チャレンジ&lt;/a&gt; というゲームが流行中です！&lt;/p&gt;
&lt;p&gt;プログラムを使って良い解法を探索してみたので、考えたことを書いていきます
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://vain0x.github.io/blog/tags/Rust/"/>
    
      <category term="アルゴリズム" scheme="http://vain0x.github.io/blog/tags/%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0/"/>
    
  </entry>
  
  <entry>
    <title>近況 2018-10-31</title>
    <link href="http://vain0x.github.io/blog/2018-10-31/diary/"/>
    <id>http://vain0x.github.io/blog/2018-10-31/diary/</id>
    <published>2018-10-31T14:59:59.000Z</published>
    <updated>2018-12-01T12:04:26.874Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://vain0x.github.io/blog/2018-09-30/diary/">前月</a></li></ul><h3 id="milone-lang"><a href="#milone-lang" class="headerlink" title="milone-lang"></a>milone-lang</h3><ul><li><a href="https://github.com/vain0x/milone-lang" target="_blank" rel="noopener">https://github.com/vain0x/milone-lang</a></li><li>F# のサブセットのコンパイラ milone-lang を作ってる</li><li>前月苦しんでいた字下げ依存構文の構文解析問題はほぼ解決した<ul><li>次のトークンの位置が低すぎたらパースを中止する、みたいな動き</li><li>結果的に再帰下降パーサーとしては自然な実装になった</li></ul></li><li>インタプリタを捨てて、C言語のコードを生成するようにした<ul><li>インタプリタの実装は klac-lang でやったから退屈に感じる</li><li>最終的にはアセンブリや Web Assembly や LLVM をターゲットにしたいが、モチベを維持するために機能追加を優先していく</li></ul></li><li>演算や条件分岐や関数などの基本機能が入った</li><li>シンプルな型推論が入った<ul><li>単一化ベースだが、まだ多相関数は禁止しているのでHMじゃない</li></ul></li><li>ジェネリクスを入れようとして、オートボクシングと型推論の兼ね合いで悩んだ<ul><li>ジェネリクスはやめて、単相化することにした</li><li>例えばタプルは、生成後のCのコードでは型引数ごとに別々の構造体になる</li></ul></li><li>近い目標として、字句解析器をコンパイルしたい<ul><li>リストを入れないと何もできない</li><li>クロージャもほしいけど難しいかも</li></ul></li><li>参考<ul><li>TaPL</li><li><a href="http://esumii.github.io/min-caml/" target="_blank" rel="noopener">速攻MinCamlコンパイラ概説</a></li></ul></li></ul><h3 id="環境再構築"><a href="#環境再構築" class="headerlink" title="環境再構築"></a>環境再構築</h3><ul><li>今年頭 (2018年1月) にパソコンを買い替えた<ul><li><a href="https://vain0x.github.io/blog/2018-01-28/new-to-ubuntu/">Ubuntuデスクトップを使い始めた | vain0x’s blog</a></li></ul></li><li>Ubuntu デスクトップという試みはうまくいっている</li><li>パフォーマンス問題があった<ul><li>Chrome のタブを大量に開いたり VSCode を複数起動すると重たくなる</li></ul></li><li>メモリを 16GB に、ハードディスクを SSD にした</li><li>SSD 換装は初めてだったけど簡単にできた<ul><li>SATAケーブルとSATA電源ケーブルを買ったけど、HDDと繋ぎかえるだけだからいらなかった</li><li>SSD はメンディングテープで固定した</li></ul></li><li>ついでにクリーンインストールした</li></ul><h3 id="競プロ参戦記"><a href="#競プロ参戦記" class="headerlink" title="競プロ参戦記"></a>競プロ参戦記</h3><ul><li>8月中旬から note.mu で <a href="https://note.mu/vain0x/m/m9aa8513f4e97" target="_blank" rel="noopener">競プロ参戦記</a> を始めた</li><li>AGC で惨敗して、2週間ぐらい競プロから離れていた</li><li>先週の天下一は参加して、そこそこの成績だった</li><li>まったりやっていく</li></ul><h3 id="toml-hummer"><a href="#toml-hummer" class="headerlink" title="toml-hummer"></a>toml-hummer</h3><ul><li><a href="https://github.com/vain0x/toml-hummer" target="_blank" rel="noopener">https://github.com/vain0x/toml-hummer</a></li><li>F# 用の TOML パーサー</li><li>あまり進んでない</li><li>日時リテラルを扱えるようになりつつある</li></ul><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><ul><li>機能追加はうまくいっている</li><li>データベース処理ごとテストしてる<ul><li>依存関係を切るの難しい</li></ul></li><li>履歴移動でコンポーネントの状態が初期化される問題はまだ放置してる</li><li>サーバーとクライアントで行ったり来たりする処理の見通しが悪い<ul><li>ステートマシンみたいになってしまう</li><li>再帰下降パーサーみたいに書きたい</li></ul></li></ul><h3 id="ガルパ"><a href="#ガルパ" class="headerlink" title="ガルパ"></a>ガルパ</h3><ul><li>ファントムシーフ (Expert 27) はクリアできた</li><li>今後は 26 帯の精度を上げていきたい</li><li>某の影響をで左手プレイを練習している</li></ul><h3 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h3><ul><li>AtCoder の提出を Git リポジトリにまとめるツールを書いた<ul><li><a href="https://github.com/vain0x/submissions-sync" target="_blank" rel="noopener">https://github.com/vain0x/submissions-sync</a></li><li>GitHub に自動でコミットしたいという野望がある</li></ul></li><li>投稿専用の Twitter クライアント Solotter を地味に改修した<ul><li><a href="https://github.com/vain0x/solotter-web" target="_blank" rel="noopener">https://github.com/vain0x/solotter-web</a></li><li>Express.js で書いていたのが React になった</li><li>いろいろ足したい機能があるけど、いまは milone-lang が優先</li></ul></li><li>記事を投稿した<ul><li><a href="https://qiita.com/vain0x/items/512784ff60ce599dccae" target="_blank" rel="noopener">Rustで競プロするときのプラクティス [2018秋] - Qiita</a></li></ul></li><li>このブログをなんとかしたい<ul><li>更新作業を楽にしたい</li><li>画像を載せやすくしたい</li><li>記事一覧をつけたい</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://vain0x.github.io/blog/2018-09-30/diary/&quot;&gt;前月&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;milone-lang&quot;&gt;&lt;a href=&quot;#milone-lang&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="日記" scheme="http://vain0x.github.io/blog/tags/%E6%97%A5%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>Rustで競プロするときのプラクティス [2018秋]</title>
    <link href="http://vain0x.github.io/blog/2018-10-07/rust-procon/"/>
    <id>http://vain0x.github.io/blog/2018-10-07/rust-procon/</id>
    <published>2018-10-07T11:00:00.000Z</published>
    <updated>2018-12-01T12:04:26.874Z</updated>
    
    <content type="html"><![CDATA[<p>競プロで Rust を使い始めて半年が過ぎました。いまの私のプラクティスを羅列的に書いていきます。</p><h2 id="筆者"><a href="#筆者" class="headerlink" title="筆者"></a>筆者</h2><ul><li>AtCoder 水色</li><li><a href="https://note.mu/vain0x/n/ndcec1623a167" target="_blank" rel="noopener">競プロ参戦記</a> やってます</li></ul><h2 id="フレームワーク"><a href="#フレームワーク" class="headerlink" title="フレームワーク"></a>フレームワーク</h2><p><a href="https://github.com/vain0x/procon/blob/f016133b83c42196837e1b2490ecb5e57ce1ff40/rust/src/main.rs" target="_blank" rel="noopener">自作フレームワークはこちら</a> 。いつもこれの main 関数の中に解答を書いて提出しています。</p><h2 id="入力のパース"><a href="#入力のパース" class="headerlink" title="入力のパース"></a>入力のパース</h2><p>標準機能だけで入力をパースしようとするとだるいです。Qiita にも、すでにこの問題を解決しようという記事がいくつか上がっています。</p><p>私は上述のフレームワークに含まれている <a href="https://github.com/vain0x/procon/blob/f016133b83c42196837e1b2490ecb5e57ce1ff40/rust/src/main.rs#L25-L47" target="_blank" rel="noopener"><code>read!</code> マクロ</a> を使っています。実装が短い (23行) のと、見た目が関数っぽくて好み。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//! グラフのパースの例</span></span><br><span class="line"><span class="keyword">let</span> (N, M) = read!(<span class="built_in">usize</span>, <span class="built_in">usize</span>);</span><br><span class="line"><span class="keyword">let</span> weightd_edges = read![[<span class="built_in">usize</span>, <span class="built_in">usize</span>, <span class="built_in">i64</span>]; M];</span><br></pre></td></tr></table></figure><p>パフォーマンスは若干悪くて、C++ で std::cin を使うより2倍ぐらい遅いです。それでも 10^6 個の整数を読むのに 100 ms 未満なので問題はないはず。ベンチマーク: <a href="https://github.com/vain0x/scan-bench" target="_blank" rel="noopener">scan-bench</a></p><h2 id="デバッグ用のマクロ"><a href="#デバッグ用のマクロ" class="headerlink" title="デバッグ用のマクロ"></a>デバッグ用のマクロ</h2><p><a href="https://qiita.com/yamoridon/items/3be3f0515a79567a0588" target="_blank" rel="noopener">LLDB を使うとデバッグ実行できるらしい</a> です。私はやってなくて、いつも print デバッグしています。</p><h3 id="debug-条件コンパイル"><a href="#debug-条件コンパイル" class="headerlink" title="debug!: 条件コンパイル"></a>debug!: 条件コンパイル</h3><p>デバッグ出力の消し忘れで WA とかは避けたいです。 <a href="https://doc.rust-jp.rs/the-rust-programming-language-ja/1.9/book/conditional-compilation.html" target="_blank" rel="noopener">条件コンパイル</a> を使って、ローカルではデバッグ出力が出る、ジャッジ時は出ない、というふうにしています。</p><p>Debug/Release での分岐は <a href="https://users.rust-lang.org/t/conditional-compilation-for-debug-release/1098/3" target="_blank" rel="noopener">debug_assertions を使えばできる</a> そうです。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// デバッグビルドではこっちの定義が使われる。</span></span><br><span class="line"><span class="meta">#[cfg(debug_assertions)]</span></span><br><span class="line"><span class="built_in">macro_rules!</span> debug &#123;</span><br><span class="line">    <span class="comment">// 略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// リリースビルドではこっちの定義が使われて、 debug!(..) が無になる。</span></span><br><span class="line"><span class="meta">#[cfg(not(debug_assertions))]</span></span><br><span class="line"><span class="built_in">macro_rules!</span> debug &#123;</span><br><span class="line">    ($($arg:expr),*) =&gt; &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="debug-定義の省略"><a href="#debug-定義の省略" class="headerlink" title="debug!: 定義の省略"></a>debug!: 定義の省略</h3><p>ジャッジに不要なコードを提出に含めるのは <em>なんとなく</em> 抵抗があります。そこで、定義はローカルのファイルに書いておき、手元でのデバッグ実行時だけ <code>include!</code> で定義を取り込むという方法があります。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// デバッグ時はローカルのファイルから定義を読み込む</span></span><br><span class="line"><span class="meta">#[cfg(debug_assertions)]</span></span><br><span class="line">include!&#123;<span class="string">"./procon/debug.rs"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// リリース時に debug!(..) を消す</span></span><br><span class="line"><span class="meta">#[cfg(not(debug_assertions))]</span></span><br><span class="line"><span class="built_in">macro_rules!</span> debug &#123;</span><br><span class="line">    ($($arg:expr),*) =&gt; &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで debug! マクロを高機能化しても提出コードが膨れ上がることはなくなります。</p><h3 id="余談-dbg"><a href="#余談-dbg" class="headerlink" title="余談: dbg!"></a>余談: dbg!</h3><p>ちなみに、将来のバージョンでは公式に <code>dbg!</code> という print デバッグ用途のマクロが入るそうです。参考：<a href="https://github.com/rust-lang/rfcs/blob/master/text/2361-dbg-macro.md" target="_blank" rel="noopener">rfcs/2361-dbg-macro.md at master · rust-lang/rfcs</a></p><h2 id="数値型"><a href="#数値型" class="headerlink" title="数値型"></a>数値型</h2><p>数値型は <a href="https://doc.rust-jp.rs/the-rust-programming-language-ja/1.9/book/primitive-types.html" target="_blank" rel="noopener">プリミティブ型</a> に載っているとおりたくさんありますが、よく使うのは4つ:</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">i64</td><td style="text-align:left">10^18 ぐらいまで扱える</td></tr><tr><td style="text-align:left">usize</td><td style="text-align:left">スライスや Vec の添字に使う</td></tr><tr><td style="text-align:left">f64</td><td style="text-align:left">浮動小数点数</td></tr><tr><td style="text-align:left">char</td><td style="text-align:left">文字 (厳密には Unicode scalar value)</td></tr></tbody></table><h3 id="数値型-usize"><a href="#数値型-usize" class="headerlink" title="数値型: usize"></a>数値型: usize</h3><p>usize を int の感覚で書いてると微妙にハマります。マイナスにオーバーフローしたとき、Debug モードでは実行時エラーになります。Release モードではエラーになりませんが、符号なし型なのでマイナスにはならないことに注意です。</p><p>例えば次のコード (x, y: usize) はおかしくて、<code>x &lt; y</code> のとき Debug モードではエラーになり、Release モードでも <code>max</code> は機能してません。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max(<span class="number">0</span>, x - y) <span class="comment">// ✘ ダメ</span></span><br></pre></td></tr></table></figure><p>オーバーフローしないようにするか、i64 を経由すれば動きます:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// monus</span></span><br><span class="line">x - min(x, y)</span><br><span class="line"></span><br><span class="line"><span class="comment">// または、i64 を経由する</span></span><br><span class="line">max(<span class="number">0</span>, x <span class="keyword">as</span> <span class="built_in">i64</span> - y <span class="keyword">as</span> <span class="built_in">i64</span>) <span class="keyword">as</span> <span class="built_in">usize</span></span><br></pre></td></tr></table></figure><h2 id="文字列"><a href="#文字列" class="headerlink" title="文字列"></a>文字列</h2><p>Rust の標準的な文字列型である String (と str) は utf-8 なので、ランダムアクセスできません。そういうときは文字の列 <code>Vec&lt;char&gt;</code> で持つようにします。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s: <span class="built_in">String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文字の列に変換</span></span><br><span class="line"><span class="keyword">let</span> s = s.chars().collect::&lt;<span class="built_in">Vec</span>&lt;_&gt;&gt;();</span><br></pre></td></tr></table></figure><p>これは若干パフォーマンスが悪いです。一時期は <code>Vec&lt;u8&gt;</code> を使っていたんですが、デバッグ出力時に u8 が数字で出るのが不便だったのでやめました……</p><h2 id="Vec"><a href="#Vec" class="headerlink" title="Vec"></a>Vec</h2><p>イテレータを Vec に変換する <code>.collect::&lt;Vec&lt;_&gt;&gt;</code> は頻出ですが、タイプがつらいので略記を用意してます。</p><p>自作トレイトをすべてのイテレータに実装させることで、 C# の拡張メソッドのようなことができます。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">IteratorExt</span></span>: <span class="built_in">Iterator</span> + <span class="built_in">Sized</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">vec</span></span>(<span class="keyword">self</span>) -&gt; <span class="built_in">Vec</span>&lt;Self::Item&gt; &#123;</span><br><span class="line">        <span class="keyword">self</span>.collect()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T: <span class="built_in">Iterator</span>&gt; IteratorExt <span class="keyword">for</span> T &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// e.g.</span></span><br><span class="line"><span class="keyword">let</span> xs = (<span class="number">0</span>..N).map(|i| i + <span class="number">1</span>).vec();</span><br></pre></td></tr></table></figure><h2 id="再帰"><a href="#再帰" class="headerlink" title="再帰"></a>再帰</h2><p>ローカル変数を利用する再帰関数について、7月に「 <a href="https://qiita.com/vain0x/items/90c9580aa34926160ac1" target="_blank" rel="noopener">Rustのクロージャで再帰してみた</a> 」という記事を書きました。クロージャは、mut な変数を書き換えないなら簡単に再帰にできるという結論です。</p><p>mut な変数を書き換えたいなら RefCell とかを使う、と記事では書きました。struct を定義したほうがいいこともあります。いずれにせよ手間なので、マクロで簡略化を図りたいと思っています。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://doc.rust-jp.rs/the-rust-programming-language-ja/1.9/book/" target="_blank" rel="noopener">公式のドキュメントの和訳</a><ul><li>必読</li></ul></li><li><a href="https://qiita.com/hatoo@github/items/fa14ad36a1b568d14f3e" target="_blank" rel="noopener">Rustで競技プログラミング スターターキット - Qiita</a><ul><li>コンパイラバージョンの固定 (rustup override set)</li><li>BinaryHeap を昇順で使う方法 (Reverse)</li><li>浮動小数点で sort などを使う方法 (impl Ord)</li><li>深い再帰でスタックオーバーフローしないようにする方法 (std::thread)</li><li>などについてはこの記事を読んでください</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;競プロで Rust を使い始めて半年が過ぎました。いまの私のプラクティスを羅列的に書いていきます。&lt;/p&gt;
&lt;h2 id=&quot;筆者&quot;&gt;&lt;a href=&quot;#筆者&quot; class=&quot;headerlink&quot; title=&quot;筆者&quot;&gt;&lt;/a&gt;筆者&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;AtCoder
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://vain0x.github.io/blog/tags/Rust/"/>
    
      <category term="競技プログラミング" scheme="http://vain0x.github.io/blog/tags/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
  </entry>
  
  <entry>
    <title>近況 2018-09-30</title>
    <link href="http://vain0x.github.io/blog/2018-09-30/diary/"/>
    <id>http://vain0x.github.io/blog/2018-09-30/diary/</id>
    <published>2018-09-30T14:59:59.000Z</published>
    <updated>2018-12-01T12:04:26.874Z</updated>
    
    <content type="html"><![CDATA[<ul><li>校正の手間を省くため、なるべく箇条書きでやっていく<ul><li>通常の文章を書く頭は README と競プロ参戦記に使う</li></ul></li><li>Twitter ではなく、まとまったものを書いていきたい</li></ul><h3 id="競プロ参戦記"><a href="#競プロ参戦記" class="headerlink" title="競プロ参戦記"></a>競プロ参戦記</h3><ul><li>8月中旬から note.mu で <a href="https://note.mu/vain0x/m/m9aa8513f4e97" target="_blank" rel="noopener">競プロ参戦記</a> を始めた</li><li>3日で終わるかと思ったけど1ヶ月は続いた</li><li>成長やモチベに貢献しているかは微妙<ul><li>以前に参戦記で書いたことと同様の手順で解ける問題をとき損ねるという事件があった</li><li><a href="https://note.mu/vain0x/n/n556db26bb3a8" target="_blank" rel="noopener">競プロ参戦記 第16回「偶奇と多節腕」 ARC103 [CD]｜ベイン｜note</a></li></ul></li><li>note.mu を選んだ理由<ul><li>日本語で書ける、技術よりな日記を書ける、デザインが良い、という条件を満たしてる</li><li>Qiita には日記を書きづらい</li><li>Codeforces blog は日本語では書きづらい</li><li>自前のブログは更新がめんどい</li></ul></li><li>note.mu の問題<ul><li>エディターが微妙に使いづらい</li></ul></li></ul><h3 id="Milone-言語を作り始めた"><a href="#Milone-言語を作り始めた" class="headerlink" title="Milone 言語を作り始めた"></a>Milone 言語を作り始めた</h3><ul><li>リポジトリ: <a href="https://github.com/vain0x/milone-lang" target="_blank" rel="noopener">milone-lang</a></li><li>セキュリティキャンプや Turing Complete FM の影響でC言語のセルフホスティングコンパイラを作るのが大流行</li><li>私もやりたいけどCコンパイラは乗り遅れ感</li><li>自作言語なら楽？</li><li>Rust っぽい構文をさっと考えて実装開始<ul><li>道のりが長すぎて既に飽き気味</li></ul></li><li>F# のサブセットにしようとしてる<ul><li>字下げ依存構文の解析がつらすぎて飽き気味</li></ul></li></ul><h3 id="F-用のTOMLパーサを書き始めた"><a href="#F-用のTOMLパーサを書き始めた" class="headerlink" title="F# 用のTOMLパーサを書き始めた"></a>F# 用のTOMLパーサを書き始めた</h3><ul><li>リポジトリ: <a href="https://github.com/vain0x/toml-hummer" target="_blank" rel="noopener">toml-hummer</a></li><li>習作。既存の TOML パーサ実装はある</li><li>字句解析 → 字句リストを再帰下降パース、という手順でやる<ul><li>パーサコンビネータ (FParsec) もパーサジェネレータ (FsYacc) もいらない、言語機能だけでパースできる、っていうのをやりたい</li><li>パースはわりとすんなりいけてる</li><li>字句解析が正規表現でかなりがちゃがちゃしてる、ここをもっと簡単にしたい</li></ul></li><li>エラー報告の精度を上げるのは大変そう<ul><li>何を使っても大変</li><li>Rust コンパイラのエラー報告はとても偉い</li></ul></li><li>TOML のデータ構造の持ちかたで迷ってる</li></ul><h3 id="React-を始めた"><a href="#React-を始めた" class="headerlink" title="React を始めた"></a>React を始めた</h3><ul><li>Vue.js をちょっとだけやったことはあった<ul><li>極めて便利だけど型や環境構築が煩雑という印象だった</li></ul></li><li>Node.js + SPA の環境構築になれてきた</li><li>とはいえいろいろ諦めた<ul><li>Live Reload</li><li>Hot Module Replacement</li><li>ブラウザ上でのテスト (karma)</li><li>レンダリングのテスト (enzyme)</li></ul></li><li>コードに静的な型がついて、ドメイン層のユニットテストが高速に実行できたらそれでいいと思う</li><li>TypeScript を書く場合、 Vue.js と違って React はシンプルな型がつくのが嬉しい<ul><li>Vue のコンポーネントの型はやばい</li></ul></li><li>ブラウザ履歴の管理や、URL と state の同期がよく分からない</li></ul><h3 id="fsharp-error-builders"><a href="#fsharp-error-builders" class="headerlink" title="fsharp-error-builders"></a>fsharp-error-builders</h3><ul><li>リポジトリ: <a href="https://github.com/vain0x/fsharp-error-builders" target="_blank" rel="noopener">fsharp-error-builders</a><ul><li>F# 用の Option/Result のコンピュテーションビルダーを提供するライブラリ</li></ul></li><li>プロジェクトの名前を変えた<ul><li>リポジトリはハイフン区切りがいい</li></ul></li><li>パフォーマンスの改善を試みた<ul><li>inline をつけてメソッド呼び出しを減らした</li><li><code>Some ()</code> をキャッシュした</li></ul></li><li>それでも for 式はコンピュテーション式の外側で書くより2倍ぐらい遅い<ul><li>F# でパフォーマンスといえば、F# では型引数をどれだけ導入しても煩雑にならないので、構造体をガンガン使うようなコードでは C# に有利がつく可能性がないこともない</li></ul></li></ul><h3 id="Rust-で競プロの入力をパースするマクロ"><a href="#Rust-で競プロの入力をパースするマクロ" class="headerlink" title="Rust で競プロの入力をパースするマクロ"></a>Rust で競プロの入力をパースするマクロ</h3><ul><li>リポジトリ: <a href="https://github.com/vain0x/scan-bench" target="_blank" rel="noopener">scan-bench</a></li><li>Rust で競プロの入力をパースするコードを書くのはとてもめんどい</li><li>いま使ってる read! マクロは悪くないが、性能が低い</li><li>変数を大量に定義するのはマクロでやるのがよい</li><li>scan! マクロを作ってみた<ul><li>シンプルとはいえわりとひどい記述になってるので作り直すかも</li></ul></li><li>std::cin と比較してベンチマークをとった<ul><li>2倍ぐらいは速かった</li></ul></li><li>Travis の設定をやった<ul><li>こういう chore に時間をかけすぎている</li></ul></li></ul><h3 id="ガルパ-リズムゲーム-を始めた"><a href="#ガルパ-リズムゲーム-を始めた" class="headerlink" title="ガルパ (リズムゲーム) を始めた"></a>ガルパ (リズムゲーム) を始めた</h3><ul><li>初音ミクコラボにつられてほいほいインストールした</li><li>リズムゲームはひさしぶり</li><li>最初は Normal や Hard でも四苦八苦していた</li><li>毎日練習してたら Expert ができたりできなかったりするようになった</li><li>ファントムシーフ (Expert 27) は何度も練習してるけどクリアできない</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;校正の手間を省くため、なるべく箇条書きでやっていく&lt;ul&gt;
&lt;li&gt;通常の文章を書く頭は README と競プロ参戦記に使う&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Twitter ではなく、まとまったものを書いていきたい&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=
      
    
    </summary>
    
    
      <category term="日記" scheme="http://vain0x.github.io/blog/tags/%E6%97%A5%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>F#でベンチマークをとる</title>
    <link href="http://vain0x.github.io/blog/2018-09-03/bench-fsharp-by-benchmark-dot-net/"/>
    <id>http://vain0x.github.io/blog/2018-09-03/bench-fsharp-by-benchmark-dot-net/</id>
    <published>2018-09-03T14:59:34.000Z</published>
    <updated>2018-12-01T12:04:26.874Z</updated>
    
    <content type="html"><![CDATA[<p>ベンチマークをとるのは難しい作業です。それらの作業を担う便利なライブラリーとして <a href="https://github.com/dotnet/BenchmarkDotNet" target="_blank" rel="noopener">BenchmarkDotNet</a> があります。本稿では、これを使ってベンチマークをとる例をやっていき、 minimum viable introduction (実用最低限の導入) となることを目指します。</p><h2 id="1-要約"><a href="#1-要約" class="headerlink" title="1. 要約"></a>1. 要約</h2><ul><li>書き出し<ul><li>ベンチマークは意外と大変という話について軽く触れる</li></ul></li><li>導入<ul><li>本稿の構成</li><li>開発環境の明記</li><li>BenchmarkDotNet のサンプル</li></ul></li><li>例<ul><li>一例として「素数判定」を実装する</li><li>素数判定の簡単なベンチマークを書く</li><li>ベンチマークを実行する</li></ul></li><li>おまけ<ul><li>軽くて速いベンチマークに設定する</li><li>ベンチマークを watch する</li></ul></li></ul><h2 id="2-開発環境"><a href="#2-開発環境" class="headerlink" title="2. 開発環境"></a>2. 開発環境</h2><p>F# の開発環境は Getting Started を参照: <a href="http://ionide.io/#getting-started" target="_blank" rel="noopener">Ionide - Crossplatform F# Editor Tools</a></p><p>今回は次を使ってやっていきます。 (執筆日: 2018年8月9日)</p><ul><li>Windows 10</li><li>.NET Core Cli Tools 2.1</li><li>F# 4.1</li><li>Visual Studio Code<ul><li>ionide-fsharp</li></ul></li></ul><h2 id="3-BenchmarkDotNet-にあるサンプルコード"><a href="#3-BenchmarkDotNet-にあるサンプルコード" class="headerlink" title="3. BenchmarkDotNet にあるサンプルコード"></a>3. BenchmarkDotNet にあるサンプルコード</h2><p>F# 用のサンプルをみるとだいたいのイメージはつかめます。</p><p><a href="https://github.com/dotnet/BenchmarkDotNet/tree/v0.11.0/samples/BenchmarkDotNet.Samples.FSharp" target="_blank" rel="noopener">BenchmarkDotNet/samples/BenchmarkDotNet.Samples.FSharp at v0.11.0 · dotnet/BenchmarkDotNet</a></p><h2 id="4-サンプルプロジェクトでやってみる"><a href="#4-サンプルプロジェクトでやってみる" class="headerlink" title="4. サンプルプロジェクトでやってみる"></a>4. サンプルプロジェクトでやってみる</h2><p>例として「素数判定」のベンチマークをやってみましょう。</p><p>まずサンプルプロジェクトを普通のクラスライブラリーとして作ります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new classlib -lang F<span class="comment"># --name PrimeNum</span></span><br></pre></td></tr></table></figure><p>そしてがんばって実装を書く:</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PrieNum/Library.fs</span></span><br><span class="line"><span class="keyword">module</span> PrimeNum</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 以上 p 未満の整数で割り切れなければ素数、と判定する。</span></span><br><span class="line"><span class="comment">// 最大 p - 2 回のループ</span></span><br><span class="line"><span class="keyword">let</span> isPrimeBruteForce (p: int): bool =</span><br><span class="line">    <span class="keyword">if</span> p &lt; <span class="number">2</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">false</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// go m ⇔ p が m 以上 p 未満の整数で割り切れない</span></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">rec</span> go m = m &gt;= p || p % m &lt;&gt; <span class="number">0</span> &amp;&amp; go (m + <span class="number">1</span>)</span><br><span class="line">        go <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 以上 √p 以下の整数で割り切れなければ素数、と判定する。(証明略)</span></span><br><span class="line"><span class="comment">// 最大 √p - 1 回のループなので速いはず</span></span><br><span class="line"><span class="keyword">let</span> isPrime (p: int): bool =</span><br><span class="line">    <span class="keyword">if</span> p &lt; <span class="number">2</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">false</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// √p</span></span><br><span class="line">        <span class="keyword">let</span> r = p |&gt; float |&gt; sqrt |&gt; int</span><br><span class="line">        <span class="comment">// go m ⇔ p が m 以上 r 以下の整数で割り切れない</span></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">rec</span> go m = m &gt; r || p % m &lt;&gt; <span class="number">0</span> &amp;&amp; go (m + <span class="number">1</span>)</span><br><span class="line">        go <span class="number">2</span></span><br></pre></td></tr></table></figure><p>で、ベンチマークです。「実行するとベンチマーク処理を行うようなコンソールアプリ」を F# で作るという形になります。(ユニットテストでいうと expecto 方式)</p><p>コンソールアプリのプロジェクトを作って、そこに BenchmarkDotNet をインストールします。(最新バージョンは <a href="https://www.nuget.org/packages/BenchmarkDotNet/" target="_blank" rel="noopener">NuGet</a> で確認しよう。)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ベンチマークするためのプロジェクトはコンソールアプリとして作る。</span></span><br><span class="line">dotnet new console -lang F<span class="comment"># --name PrimeNumBench</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PrimeNumBench が PrimeNum を参照するようにする。</span></span><br><span class="line">dotnet add PrimeNumBench reference PrimeNum</span><br><span class="line"></span><br><span class="line"><span class="comment"># BenchmarkDotNet をインストールする。 (※やや時間がかかる)</span></span><br><span class="line">dotnet add PrimeNumBench package BenchmarkDotNet --version 0.11.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># インテリセンスが効くように、ここで一度ビルドしておく (※やや時間がかかる)</span></span><br><span class="line">dotnet build PrimeNumBench</span><br></pre></td></tr></table></figure><p>試しに大きめの素数 10000019 (≒100万) が素数かどうかの判定にかかる時間を測定してみましょう。</p><ul><li>測定したい計算をクラスのメソッドとして定義する。<ul><li>モジュールではなく。このあたりは C#-er の気持ちになる。</li></ul></li><li>メソッドがベンチマーク対象であると分かるように <code>BenchmarkAttribute</code> をつける。</li><li><code>main</code> でベンチマークを実行する関数を呼ぶ。</li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PrimeNumBench/Program.fs</span></span><br><span class="line"><span class="keyword">module</span> Program</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> BenchmarkDotNet</span><br><span class="line"><span class="keyword">open</span> BenchmarkDotNet.Attributes</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Benchmarks</span></span>() =</span><br><span class="line">    <span class="meta">[&lt;Benchmark&gt;]</span></span><br><span class="line">    <span class="keyword">member</span> this.IsPrimeBruteForceBench() =</span><br><span class="line">        PrimeNum.isPrimeBruteForce <span class="number">10</span>_000_019</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Benchmark&gt;]</span></span><br><span class="line">    <span class="keyword">member</span> this.IsPrimeBench() =</span><br><span class="line">        PrimeNum.isPrime <span class="number">10</span>_000_019</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main _ =</span><br><span class="line">    <span class="keyword">let</span> _summary = Running.BenchmarkRunner.Run&lt;Benchmarks&gt;()</span><br><span class="line">    <span class="number">0</span></span><br></pre></td></tr></table></figure><p>ベンチマークアプリを <strong>Release モードでビルドして</strong> 実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet run -p PrimeNumBench -c Release</span><br></pre></td></tr></table></figure><p>1分ぐらいかかるので待つと、結果が <em>(ログの海に溺れて)</em> 出てきます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">                 Method |         Mean |         Error |        StdDev |</span><br><span class="line">----------------------- |-------------:|--------------:|--------------:|</span><br><span class="line"> IsPrimeBruteForceBench | 69,125.13 us | 1,118.0498 us | 1,045.8244 us |</span><br><span class="line">           IsPrimeBench |     21.40 us |     0.1367 us |     0.1279 us |</span><br></pre></td></tr></table></figure><p>平方根を取るだけでかなり良い最適化になってるっぽい。なお 1秒 = 1000 ms (ミリ秒) = 10万 us (マイクロ秒) です。</p><h2 id="5-ベンチマークを軽量にする"><a href="#5-ベンチマークを軽量にする" class="headerlink" title="5. ベンチマークを軽量にする"></a>5. ベンチマークを軽量にする</h2><p>試行錯誤している段階ではもうちょっと早く結果がほしいので、ベンチマークの設定を変えて計測精度を下げる代わりに、ベンチマークにかかる時間を短くしてみます。</p><p>ベンチマークをどのように実行するかの設定は Jobs にあるようです。参照: <a href="https://benchmarkdotnet.org/articles/configs/jobs.html" target="_blank" rel="noopener">Jobs | BenchmarkDotNet</a></p><p>ウォームアップや反復の回数を固定するより、パラメーターをいじってアルゴリズムに任せたほうがいいらしいです。具体的にどうするか分からないので、デフォルトの設定でそういうのないかなと思ったんですが、よさげなプルリクが出ているので参考にします:</p><p><a href="https://github.com/dotnet/BenchmarkDotNet/pull/825/files" target="_blank" rel="noopener">Accuracy based job attributes by Zhentar · Pull Request #825 · dotnet/BenchmarkDotNet</a></p><p>相対誤差の上限を増やせばよさそう。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PrimeNumBench/Program.fs</span></span><br><span class="line"><span class="keyword">module</span> Program</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> BenchmarkDotNet</span><br><span class="line"><span class="keyword">open</span> BenchmarkDotNet.Attributes</span><br><span class="line"><span class="keyword">open</span> BenchmarkDotNet.Configs</span><br><span class="line"><span class="keyword">open</span> BenchmarkDotNet.Jobs</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Benchmarks</span></span>() =</span><br><span class="line">    <span class="meta">[&lt;Benchmark&gt;]</span></span><br><span class="line">    <span class="keyword">member</span> this.IsPrimeBruteForceBench() =</span><br><span class="line">        PrimeNum.isPrimeBruteForce <span class="number">10</span>_000_019</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Benchmark&gt;]</span></span><br><span class="line">    <span class="keyword">member</span> this.IsPrimeBench() =</span><br><span class="line">        PrimeNum.isPrime <span class="number">10</span>_000_019</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main _ =</span><br><span class="line">    <span class="keyword">let</span> config =</span><br><span class="line">        <span class="keyword">let</span> rough = AccuracyMode(MaxRelativeError = <span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">let</span> quickRoughJob = Job(<span class="string">"QuickRough"</span>, rough, RunMode.Short)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> c = ManualConfig()</span><br><span class="line">        c.Add(quickRoughJob)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// その他の設定をデフォルトから継承する。</span></span><br><span class="line">        ManualConfig.Union(DefaultConfig.Instance, c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> _summary = Running.BenchmarkRunner.Run&lt;Benchmarks&gt;(config)</span><br><span class="line">    <span class="number">0</span></span><br></pre></td></tr></table></figure><p>ビルドしてからベンチマークの完了まで20秒ぐらいになりました。</p><h2 id="6-ベンチマークを自動実行する"><a href="#6-ベンチマークを自動実行する" class="headerlink" title="6. ベンチマークを自動実行する"></a>6. ベンチマークを自動実行する</h2><p>.NET Core 2.1 から標準入りした <code>dotnet-watch</code> ツールを使うと、ソースコードを更新するたびにベンチマークを自動実行できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet watch -p ./PrimeNumBench -- run -c Release</span><br></pre></td></tr></table></figure><h2 id="7-レポートを公開する"><a href="#7-レポートを公開する" class="headerlink" title="7. レポートを公開する"></a>7. レポートを公開する</h2><p>結果を公開するには、 <code>BenchmarkDotNetArtifacts/results/*.md</code> にマークダウン(GFM)形式で出力されているのを貼っつける。環境の情報が自動で載るので楽です。(Qiita だと微妙に手直しが必要)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BenchmarkDotNet=v0.11.0, OS=Windows 10.0.16299.371 (1709/FallCreatorsUpdate/Redstone3)</span><br><span class="line">Intel Core i3-2310M CPU 2.10GHz (Sandy Bridge), 1 CPU, 4 logical and 2 physical cores</span><br><span class="line">Frequency=2046136 Hz, Resolution=488.7261 ns, Timer=TSC</span><br><span class="line">.NET Core SDK=2.1.302</span><br><span class="line">  [Host]     : .NET Core 2.1.2 (CoreCLR 4.6.26628.05, CoreFX 4.6.26629.01), 64bit RyuJIT DEBUG</span><br><span class="line">  DefaultJob : .NET Core 2.1.2 (CoreCLR 4.6.26628.05, CoreFX 4.6.26629.01), 64bit RyuJIT</span><br></pre></td></tr></table></figure><table><thead><tr><th>Method</th><th style="text-align:right">Mean</th><th style="text-align:right">Error</th><th style="text-align:right">StdDev</th></tr></thead><tbody><tr><td>IsPrimeBruteForceBench</td><td style="text-align:right">69,125.13 us</td><td style="text-align:right">1,118.0498 us</td><td style="text-align:right">1,045.8244 us</td></tr><tr><td>IsPrimeBench</td><td style="text-align:right">21.40 us</td><td style="text-align:right">0.1367 us</td><td style="text-align:right">0.1279 us</td></tr></tbody></table><h2 id="8-おわりに"><a href="#8-おわりに" class="headerlink" title="8. おわりに"></a>8. おわりに</h2><p>よい計測ライフを！</p><h2 id="A-その他"><a href="#A-その他" class="headerlink" title="A. その他"></a>A. その他</h2><ul><li><p>Params 属性に言及したほうがよかったかも</p><p>  <a href="https://benchmarkdotnet.org/articles/features/parameterization.html" target="_blank" rel="noopener">Parameterization | BenchmarkDotNet</a></p></li><li><p>Baesline 属性に言及したほうがよかったかも</p><p>  <a href="https://benchmarkdotnet.org/articles/features/baselines.html" target="_blank" rel="noopener">Benchmark and Job Baselines | BenchmarkDotNet</a></p></li><li><p>サンプルは速さが非自明なもののほうがよかったかも</p><p>  option vs voption とか</p></li></ul><h2 id="B-関連リンク"><a href="#B-関連リンク" class="headerlink" title="B. 関連リンク"></a>B. 関連リンク</h2><ul><li><p><a href="https://benchmarkdotnet.org/" target="_blank" rel="noopener">Showtime | BenchmarkDotNet</a></p><p>  公式サイト</p></li><li><p><a href="https://qiita.com/NetSeed/items/30d8a76163622a4b5be1" target="_blank" rel="noopener">BenchmarkDotNetを使ってみる｡ - Qiita</a></p><p>  紹介記事 (C#)</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ベンチマークをとるのは難しい作業です。それらの作業を担う便利なライブラリーとして &lt;a href=&quot;https://github.com/dotnet/BenchmarkDotNet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BenchmarkDotN
      
    
    </summary>
    
    
      <category term="F#" scheme="http://vain0x.github.io/blog/tags/F/"/>
    
      <category term="チュートリアル" scheme="http://vain0x.github.io/blog/tags/%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB/"/>
    
  </entry>
  
  <entry>
    <title>Rustのクロージャで再帰してみた</title>
    <link href="http://vain0x.github.io/blog/2018-06-28/recurse-rust-closure/"/>
    <id>http://vain0x.github.io/blog/2018-06-28/recurse-rust-closure/</id>
    <published>2018-06-28T14:17:41.000Z</published>
    <updated>2018-12-01T12:04:26.874Z</updated>
    
    <content type="html"><![CDATA[<p>クロージャを再帰呼び出しする方法を考えました。</p><p>競技プログラミングではローカル変数を書き換えながら再帰する処理がよく出てきます。しかし Rust でそれを書こうとするとやや冗長になりがちです。</p><p>本稿では小さなヘルパーを用意して記述を簡略化することを試みました。</p><ul><li>環境: Rust 1.15.1 (AtCoder での現在のバージョン)</li><li>筆者: AtCoder もうすぐ青といい続けて1年</li></ul><h2 id="要約"><a href="#要約" class="headerlink" title="要約"></a>要約</h2><ul><li>競プロではよく再帰する。</li><li>小さなアダプタを書くと再帰呼び出しできる。</li><li>イミュータブルなクロージャはローカル変数を書き換えられない。<ul><li><code>RefCell</code> で対処する。</li></ul></li><li>成果:<ul><li><a href="https://play.rust-lang.org/?gist=97ad8427affee25a31656d750d2a01d6&amp;version=stable&amp;mode=debug" target="_blank" rel="noopener">Fn で再帰するやつ</a></li></ul></li></ul><h2 id="用例1-階乗"><a href="#用例1-階乗" class="headerlink" title="用例1: 階乗"></a>用例1: 階乗</h2><p>単純な例として、階乗の計算を再帰で書けるようにしましょう。内部で自身を参照するために、クロージャは引数に <code>fact</code> (階乗関数) を受け取るようにする方針でいきます。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fact_5 = recurse(<span class="number">5</span>, &amp;|n, fact| &#123;</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span> &#123;</span><br><span class="line">        <span class="number">1_i64</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        n * fact(n - <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="number">1</span> * <span class="number">2</span> * <span class="number">3</span> * <span class="number">4</span> * <span class="number">5</span>, fact_5);</span><br></pre></td></tr></table></figure><p>ここで <code>recurse(x, f)</code> が <code>f(x, f)</code> の意味になるように後で定義するヘルパーです。</p><p>「なぜ作った関数を即座に起動するのか」という疑問があると思いますが、それは実際にそういう用途が多いからです。再帰関数がほしいときは <code>|x| recurse(x, &amp;|x, f| ..)</code> のようにクロージャ化する運用でも大丈夫でしょう。</p><h2 id="実装1-イミュータブル版"><a href="#実装1-イミュータブル版" class="headerlink" title="実装1: イミュータブル版"></a>実装1: イミュータブル版</h2><p><code>recurse</code> の実装は簡単で、<code>fn</code> で定義した関数が再帰可能であることを利用します。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">recurse</span></span>&lt;X, Y&gt;(x: X, f: &amp;<span class="built_in">Fn</span>(X, &amp;<span class="built_in">Fn</span>(X) -&gt; Y) -&gt; Y) -&gt; Y &#123;</span><br><span class="line">    f(x, &amp;|x: X| recurse(x, &amp;f))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点は、クロージャの引数の型がまたそのクロージャの型で……という無限の循環を避けるため、関数を <a href="https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/trait-objects.html" target="_blank" rel="noopener">トレイトオブジェクト</a> への参照という形で扱っていることです。</p><p><code>Fn(X) -&gt; Y</code> というのは「型 <code>X</code> の値を受け取って型 <code>Y</code> の値を返す関数」の型を表すトレイトで、ある種のクロージャは自動的に <code>Fn</code> を実装した型になります。参照: <a href="https://doc.rust-lang.org/std/ops/trait.Fn.html" target="_blank" rel="noopener">std::ops::Fn - Rust</a></p><pre><code>&amp;Fn(X, &amp;Fn(X) -&gt; Y) -&gt; Y        ^^^^^^^^^^           再帰関数の型 (クロージャの引数) ^^^^^^^^^^^^^^^^^^^^^^^     定義したクロージャのトレイトオブジェクトの型</code></pre><h2 id="用例2-DFSで連結成分分解"><a href="#用例2-DFSで連結成分分解" class="headerlink" title="用例2: DFSで連結成分分解"></a>用例2: DFSで連結成分分解</h2><p>次に現実的な例として、グラフの連結成分分解を深さ優先探索で書いてみます。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   0 -- 1</span></span><br><span class="line"><span class="comment">//   | \</span></span><br><span class="line"><span class="comment">//   |  \</span></span><br><span class="line"><span class="comment">//   2 -- 3    4--5</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">let</span> graph =</span><br><span class="line">    <span class="built_in">vec!</span>[</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="number">0</span>],</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="number">0</span>, <span class="number">3</span>],</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="number">5</span>],</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="number">4</span>],</span><br><span class="line">    ];</span><br><span class="line"><span class="keyword">let</span> n = graph.len();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> roots = RefCell::new(<span class="built_in">vec!</span>[n; n]);</span><br><span class="line"><span class="keyword">for</span> u <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">    recurse(u, &amp;|v, go| &#123;</span><br><span class="line">        <span class="keyword">if</span> roots.borrow()[v] &lt; n &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        roots.borrow_mut()[v] = u;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> &amp;w <span class="keyword">in</span> graph[v].iter() &#123;</span><br><span class="line">            go(w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(&amp;*roots.borrow(), &amp;[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br></pre></td></tr></table></figure><p>頂点 <code>v</code> が属す連結成分の代表を <code>roots[v]</code> に入れていきます。</p><p>このとき、再帰の途中で配列を更新する必要があります。しかし <code>roots</code> を let <strong>mut</strong> でミュータブル配列として宣言すると、先ほどの <code>recurse</code> は使えません。というもの、外部のミュータブルな変数を借用するクロージャは <code>Fn</code> トレイトを実装しないからです。</p><p>ここでは <code>RefCell</code> を使ってこの問題を回避しています。クロージャに渡すのが <code>RefCell</code> へのイミュータブルな参照でも、内部の値をミュータブルとして扱えます。参照: <a href="https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/choosing-your-guarantees.html#refcellt" target="_blank" rel="noopener">保証を選ぶ</a></p><p>なんにせよ、それなりに簡潔に再帰処理ができました！</p><ul><li><a href="https://play.rust-lang.org/?gist=97ad8427affee25a31656d750d2a01d6&amp;version=stable&amp;mode=debug" target="_blank" rel="noopener">Rust Playground で試す</a></li></ul><h2 id="実装2-ミュータブル版"><a href="#実装2-ミュータブル版" class="headerlink" title="実装2. ミュータブル版"></a>実装2. ミュータブル版</h2><p><strong>追記</strong>: ミュータブルなローカル変数を書き換えながらクロージャを再帰呼び出しする方法について記述していましたが、 <a href="https://qiita.com/vain0x/items/90c9580aa34926160ac1#comment-1988da50c4701cc0add8" target="_blank" rel="noopener">安全でないコードが書けてしまう</a> ので取り下げました。</p><details><br><summary>変更前の内容はたたんであります。</summary><br><div><br>記述量を減らすのが目的なので、 <code>RefCell</code> をなくす方法も考えてみます。<br><br>クロージャの型が自動で実装するトレイトは <code>Fn</code> のほかに <code>FnMut</code> もあります。<code>FnMut</code> は、簡単にいうと「ミュータブルな状態を持つ関数」の型が実装すべきトレイトです。参照: <a href="https://doc.rust-lang.org/std/ops/trait.FnMut.html" target="_blank" rel="noopener">std::ops::FnMut - Rust</a><br><br>外部のミュータブルな状態 (例えば <code>let mut roots = ...</code>) を触りながら再帰できるように、クロージャが <code>FnMut</code> でもいいようにしてみます。すると、借用検査が <strong>通りません</strong> 。<br><br>通せるようにしたのが以下です:<br><br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">recurse</span></span>&lt;X, Y&gt;(x: X, f: &amp;<span class="keyword">mut</span> <span class="built_in">FnMut</span>(X, &amp;<span class="keyword">mut</span> <span class="built_in">FnMut</span>(X) -&gt; Y) -&gt; Y) -&gt; Y &#123;</span><br><span class="line">    <span class="keyword">let</span> fp = f <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="built_in">FnMut</span>(X, &amp;<span class="keyword">mut</span> <span class="built_in">FnMut</span>(X) -&gt; Y) -&gt; Y;</span><br><span class="line">    <span class="keyword">let</span> f1 = <span class="keyword">unsafe</span> &#123; &amp;<span class="keyword">mut</span> *fp &#125;;</span><br><span class="line">    <span class="keyword">let</span> f2 = <span class="keyword">unsafe</span> &#123; &amp;<span class="keyword">mut</span> *fp &#125;;</span><br><span class="line">    f1(x, &amp;<span class="keyword">mut</span> |x: X| recurse(x, f2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>これをみると分かるように、 <code>recurse</code> は受け取ったクロージャへの参照を2つに複製します: 即座に呼び出すための参照と、再帰用に呼び出すための参照です。ミュータブルな参照は複製できないので、<code>unsafe</code> を使って強制的に複製しています。<br><br>「unsafe だから危険じゃないのか」という疑問がありますが、実行中のクロージャが自分への参照を self, f で2重に受け取っているだけなので、たぶん大丈夫です。<br><br>これで深さ優先探索の例を書き直すと、<code>RefCell</code> が消失してすっきり。<br><br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> roots = <span class="built_in">vec!</span>[n; n];</span><br><span class="line"><span class="keyword">for</span> u <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">    recurse(u, &amp;<span class="keyword">mut</span> |v, go| &#123;</span><br><span class="line">        <span class="keyword">if</span> roots[v] &lt; n &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        roots[v] = u;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> &amp;w <span class="keyword">in</span> graph[v].iter() &#123;</span><br><span class="line">            go(w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><a href="https://play.rust-lang.org/?gist=bceca5a2af42a5436996b99712cb28ed&amp;version=stable&amp;mode=debug" target="_blank" rel="noopener">Rust Playground で試す</a><br></div><br></details><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://github.com/Hoverbear/rust-rosetta/issues/450#issuecomment-175848086" target="_blank" rel="noopener">Stebalien commented on 28 Jan 2016</a></p><p>  Zコンビネータを使ってクロージャを再帰可能にするコードの例。引数として受け取る再帰関数の型は推論されないっぽい。</p></li><li><p><a href="https://www.google.co.jp/search?q=無名再帰&amp;oq=無名再帰" target="_blank" rel="noopener">無名再帰 - Google 検索</a></p><p>  クロージャのような匿名の関数を再帰呼び出しすることを無名再帰というらしい。</p></li></ul><details><br><summary>Source code</summary><br><br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![allow(dead_code)]</span></span><br><span class="line"><span class="meta">#![allow(unused_macros)]</span></span><br><span class="line"><span class="meta">#![allow(unused_imports)]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">recurse</span></span>&lt;X, Y&gt;(x: X, f: &amp;<span class="built_in">Fn</span>(X, &amp;<span class="built_in">Fn</span>(X) -&gt; Y) -&gt; Y) -&gt; Y &#123;</span><br><span class="line">    f(x, &amp;|x: X| recurse(x, &amp;f))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">macro_rules!</span> memo &#123;</span><br><span class="line">    (| $f:ident, $($p:ident $(: $t:ty)*),* | $body:expr) =&gt; &#123;&#123;</span><br><span class="line">        <span class="keyword">use</span> std;</span><br><span class="line">        <span class="keyword">let</span> memo = std::cell::RefCell::new(std::collections::HashMap::new());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">move</span> |$($p $(: $t)*),*| &#123;</span><br><span class="line">            recurse(</span><br><span class="line">                <span class="meta">#[allow(unused_parens)]</span></span><br><span class="line">                &#123; ($($p),*) &#125;,</span><br><span class="line">                &amp;|$($p $(: $t)*),*, $f| &#123;</span><br><span class="line">                    <span class="keyword">let</span> args = ($($p),*).clone();</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Some</span>(&amp;y) = memo.borrow().get(&amp;args) &#123;</span><br><span class="line">                        <span class="keyword">return</span> y;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">let</span> y = $body;</span><br><span class="line">                    memo.borrow_mut().insert(args, y.clone());</span><br><span class="line">                    y</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line">    <span class="keyword">use</span> super::*;</span><br><span class="line">    <span class="keyword">use</span> std::cell::RefCell;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">graph</span></span>() -&gt; <span class="built_in">Vec</span>&lt;<span class="built_in">Vec</span>&lt;<span class="built_in">usize</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//   0 -- 1</span></span><br><span class="line">        <span class="comment">//   | \</span></span><br><span class="line">        <span class="comment">//   |  \</span></span><br><span class="line">        <span class="comment">//   2 -- 3    4--5</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="built_in">vec!</span>[</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="number">0</span>],</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="number">0</span>, <span class="number">3</span>],</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="number">5</span>],</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="number">4</span>],</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">test_fact</span></span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> fact = |n| recurse(n, &amp;|n, fact| <span class="keyword">if</span> n &lt;= <span class="number">1</span> &#123; <span class="number">1_i64</span> &#125; <span class="keyword">else</span> &#123; n * fact(n - <span class="number">1</span>) &#125;);</span><br><span class="line">        <span class="built_in">assert_eq!</span>(fact(<span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">assert_eq!</span>(fact(<span class="number">5</span>), <span class="number">120</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">test_dfs</span></span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> graph = graph();</span><br><span class="line">        <span class="keyword">let</span> n = graph.len();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> roots = RefCell::new(<span class="built_in">vec!</span>[n; n]);</span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">            recurse(u, &amp;|v, go| &#123;</span><br><span class="line">                <span class="keyword">if</span> roots.borrow()[v] &lt; n &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                roots.borrow_mut()[v] = u;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> &amp;w <span class="keyword">in</span> graph[v].iter() &#123;</span><br><span class="line">                    go(w);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">assert_eq!</span>(&amp;*roots.borrow(), &amp;[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">test_memoized_fib</span></span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> fib = memo!(|fib, n: <span class="built_in">i32</span>| <span class="keyword">if</span> n &lt;= <span class="number">1</span> &#123;</span><br><span class="line">            <span class="number">1_i64</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">assert_eq!</span>(fib(<span class="number">5</span>), <span class="number">8</span>);</span><br><span class="line">        <span class="built_in">assert_eq!</span>(fib(<span class="number">20</span>), <span class="number">10946</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![allow(dead_code)]</span></span><br><span class="line"><span class="meta">#![allow(unused_imports)]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">recurse</span></span>&lt;X, Y&gt;(x: X, f: &amp;<span class="keyword">mut</span> <span class="built_in">FnMut</span>(X, &amp;<span class="keyword">mut</span> <span class="built_in">FnMut</span>(X) -&gt; Y) -&gt; Y) -&gt; Y &#123;</span><br><span class="line">    <span class="keyword">let</span> fp = f <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="built_in">FnMut</span>(X, &amp;<span class="keyword">mut</span> <span class="built_in">FnMut</span>(X) -&gt; Y) -&gt; Y;</span><br><span class="line">    <span class="keyword">let</span> f1 = <span class="keyword">unsafe</span> &#123; &amp;<span class="keyword">mut</span> *fp &#125;;</span><br><span class="line">    <span class="keyword">let</span> f2 = <span class="keyword">unsafe</span> &#123; &amp;<span class="keyword">mut</span> *fp &#125;;</span><br><span class="line">    f1(x, &amp;<span class="keyword">mut</span> |x: X| recurse(x, f2))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line">    <span class="keyword">use</span> super::*;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">graph</span></span>() -&gt; <span class="built_in">Vec</span>&lt;<span class="built_in">Vec</span>&lt;<span class="built_in">usize</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//   0 -- 1</span></span><br><span class="line">        <span class="comment">//   | \</span></span><br><span class="line">        <span class="comment">//   |  \</span></span><br><span class="line">        <span class="comment">//   2 -- 3    4--5</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="built_in">vec!</span>[</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="number">0</span>],</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="number">0</span>, <span class="number">3</span>],</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="number">5</span>],</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="number">4</span>],</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">test_fact</span></span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> fact = |n| recurse(n, &amp;<span class="keyword">mut</span> |n, fact| <span class="keyword">if</span> n &lt;= <span class="number">1</span> &#123; <span class="number">1</span> &#125; <span class="keyword">else</span> &#123; n * fact(n - <span class="number">1</span>) &#125;);</span><br><span class="line">        <span class="built_in">assert_eq!</span>(fact(<span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">assert_eq!</span>(fact(<span class="number">5</span>), <span class="number">120</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">test_dfs</span></span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> graph = graph();</span><br><span class="line">        <span class="keyword">let</span> n = graph.len();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> roots = <span class="built_in">vec!</span>[n; n];</span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">            recurse(u, &amp;<span class="keyword">mut</span> |v, go| &#123;</span><br><span class="line">                <span class="keyword">if</span> roots[v] &lt; n &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                roots[v] = u;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> &amp;w <span class="keyword">in</span> graph[v].iter() &#123;</span><br><span class="line">                    go(w);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">assert_eq!</span>(roots, <span class="built_in">vec!</span>[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">test_closure_is_dropped</span></span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> n = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">D</span></span>&lt;<span class="symbol">'a</span>&gt;(<span class="keyword">pub</span> &amp;<span class="symbol">'a</span> <span class="keyword">mut</span> <span class="built_in">i32</span>);</span><br><span class="line">        <span class="keyword">impl</span>&lt;<span class="symbol">'a</span>&gt; <span class="built_in">Drop</span> <span class="keyword">for</span> D&lt;<span class="symbol">'a</span>&gt; &#123;</span><br><span class="line">            <span class="function"><span class="keyword">fn</span> <span class="title">drop</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">                *<span class="keyword">self</span>.<span class="number">0</span> += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            recurse(<span class="number">0</span>, &amp;<span class="keyword">mut</span> |i, go| &#123;</span><br><span class="line">                <span class="keyword">let</span> d = D(&amp;<span class="keyword">mut</span> k);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> i &gt;= n &#123;</span><br><span class="line">                    <span class="built_in">assert_eq!</span>(*d.<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                go(i + <span class="number">1</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">assert_eq!</span>(k, n + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></details>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;クロージャを再帰呼び出しする方法を考えました。&lt;/p&gt;
&lt;p&gt;競技プログラミングではローカル変数を書き換えながら再帰する処理がよく出てきます。しかし Rust でそれを書こうとするとやや冗長になりがちです。&lt;/p&gt;
&lt;p&gt;本稿では小さなヘルパーを用意して記述を簡略化すること
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://vain0x.github.io/blog/tags/Rust/"/>
    
      <category term="競技プログラミング" scheme="http://vain0x.github.io/blog/tags/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
  </entry>
  
  <entry>
    <title>[F#][小ネタ] レコードリテラルと型注釈</title>
    <link href="http://vain0x.github.io/blog/2018-03-11/fsharp-record-literal-and-type-annotation/"/>
    <id>http://vain0x.github.io/blog/2018-03-11/fsharp-record-literal-and-type-annotation/</id>
    <published>2018-03-11T04:06:00.000Z</published>
    <updated>2018-12-01T12:04:26.874Z</updated>
    
    <content type="html"><![CDATA[<p>F# のレコードリテラルのちょっとした問題とちょっとした解決策。</p><h2 id="問題1-フィールド名が重複しているとき"><a href="#問題1-フィールド名が重複しているとき" class="headerlink" title="問題1: フィールド名が重複しているとき"></a>問題1: フィールド名が重複しているとき</h2><p>F# のレコード型を構築する構文では、フィールドの名前から型が推測される。複数のレコード型が同一の名前のフィールドを定義しているとき、そのフィールドは最後に定義されたレコード型のフィールドとみなされる。</p><ul><li>参考: <a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/records" target="_blank" rel="noopener">Records (F#) | Microsoft Docs</a></li></ul><p>例えば REPL (<code>fsharpi</code>) で次のようにすると:</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ fsharpi</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">User</span> </span>=</span><br><span class="line">  &#123;</span><br><span class="line">    Id: int64</span><br><span class="line">    Name: string</span><br><span class="line">  &#125;</span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Book</span> </span>=</span><br><span class="line">  &#123;</span><br><span class="line">    Id: int64</span><br><span class="line">    Name: string</span><br><span class="line">  &#125;</span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">&#123; Id = <span class="number">1</span>L; Name = <span class="string">"Foo"</span> &#125; ;;</span><br></pre></td></tr></table></figure><p>このレコードは Book 型に推論されて、</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Output</span></span><br><span class="line"><span class="keyword">val</span> it : Book = &#123;Id = <span class="number">1</span>L;</span><br><span class="line">                 Name = <span class="string">"Foo"</span>;&#125;</span><br></pre></td></tr></table></figure><p>となる。</p><h2 id="解決1-フィールドを型名で修飾する"><a href="#解決1-フィールドを型名で修飾する" class="headerlink" title="解決1: フィールドを型名で修飾する"></a>解決1: フィールドを型名で修飾する</h2><p>この状態で <code>User</code> をインスタンス化するには、いずれかのフィールド名を修飾付きで指定すればいい。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Input</span></span><br><span class="line">&#123; User.Id = <span class="number">1</span>L; Name = <span class="string">"Foo"</span> &#125; ;;</span><br></pre></td></tr></table></figure><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Output</span></span><br><span class="line"><span class="keyword">val</span> it : User = &#123;Id = <span class="number">1</span>L;</span><br><span class="line">                 Name = <span class="string">"Foo"</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="問題2-レコード型がスコープにないとき"><a href="#問題2-レコード型がスコープにないとき" class="headerlink" title="問題2: レコード型がスコープにないとき"></a>問題2: レコード型がスコープにないとき</h2><p>レコード型がスコープに入っていないとき、つまりそのレコード型が定義されている module や namespace を open していないとき、レコードリテラルの構文はかなり冗長になる。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ fsharpi</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input</span></span><br><span class="line"><span class="keyword">module</span> Types =</span><br><span class="line">  <span class="class"><span class="keyword">type</span> <span class="title">User</span> </span>=</span><br><span class="line">    &#123;</span><br><span class="line">      Id: int64</span><br><span class="line">      Name: string</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">type</span> <span class="title">Book</span> </span>=</span><br><span class="line">    &#123;</span><br><span class="line">      Id: int64</span><br><span class="line">      Name: string</span><br><span class="line">    &#125;</span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> T = Types;;</span><br><span class="line"></span><br><span class="line">&#123; T.User.Id = <span class="number">1</span>L; T.User.Name = <span class="string">"Foo"</span> &#125; ;;</span><br></pre></td></tr></table></figure><p>注意点は、 <code>T.User.Id</code> を見た時点でレコードの型が決定されるにもかかわらず <code>Name</code> の修飾を省略できないことだ:</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Input</span></span><br><span class="line">&#123; T.User.Id = <span class="number">1</span>L; Name = <span class="string">"Foo"</span> &#125; ;;</span><br></pre></td></tr></table></figure><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Output</span></span><br><span class="line">  &#123; T.User.Id = <span class="number">1</span>L; Name = <span class="string">"Foo"</span> &#125; ;;</span><br><span class="line">  ------------------^^^^</span><br><span class="line"></span><br><span class="line">error FS0039: The record label 'Name' is not defined.</span><br></pre></td></tr></table></figure><h2 id="解決2-型注釈をつける"><a href="#解決2-型注釈をつける" class="headerlink" title="解決2: 型注釈をつける"></a>解決2: 型注釈をつける</h2><p>レコードリテラルの型を明示的に指定すると、非修飾でフィールド名を使えるようだ:</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Input</span></span><br><span class="line">(&#123; Id = <span class="number">1</span>L; Name = <span class="string">"Foo"</span> &#125;: T.User) ;;</span><br></pre></td></tr></table></figure><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Output</span></span><br><span class="line"><span class="keyword">val</span> it : Types.User = &#123;Id = <span class="number">1</span>L;</span><br><span class="line">                       Name = <span class="string">"Foo"</span>;&#125;</span><br></pre></td></tr></table></figure><p>束縛時に型を指定してもよい。型名が前に来るので、こちらのほうが読みやすい気がする:</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Input</span></span><br><span class="line"><span class="keyword">let</span> user: T.User = &#123; Id = <span class="number">1</span>L; Name = <span class="string">"Foo"</span> &#125;</span><br><span class="line">user ;;</span><br></pre></td></tr></table></figure><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Output</span></span><br><span class="line"><span class="keyword">val</span> it : Types.User = &#123;Id = <span class="number">1</span>L;</span><br><span class="line">                       Name = <span class="string">"Foo"</span>;&#125;</span><br></pre></td></tr></table></figure><p>さらに、次のように <code>id</code> を経由すると型名とリテラルの近接性がより明確になる:</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Input</span></span><br><span class="line">id&lt;T.User&gt; &#123; Id = <span class="number">1</span>L; Name = <span class="string">"Foo"</span> &#125; ;;</span><br></pre></td></tr></table></figure><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Output</span></span><br><span class="line"><span class="keyword">val</span> it : Types.User = &#123;Id = <span class="number">1</span>L;</span><br><span class="line">                       Name = <span class="string">"Foo"</span>;&#125;</span><br></pre></td></tr></table></figure><p>これはやりすぎかもしれない、というのも初見では <code>id</code> がなんのためにあるのか分からないからだ。</p><h2 id="修飾の強制"><a href="#修飾の強制" class="headerlink" title="修飾の強制"></a>修飾の強制</h2><p>レコード型に <code>[&lt;RequireQualifiedAccess&gt;]</code> をつかうと、レコード型をスコープに入れてもフィールド名はスコープに入らなくなる。つまり、前述の冗長な構文を使う必要がある……とずっと思っていたが、「型注釈」の方法であれば問題ない。</p><p>この属性をつけておくと、フィールド名が重複するかどうか気にしなくてよくなる。重複したフィールド名が後ろに追加されることでレコードリテラルの型が変わることもなくなる。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;RequireQualifiedAccess&gt;]</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">User</span> </span>=</span><br><span class="line">  &#123;</span><br><span class="line">    Id: int64</span><br><span class="line">    Name: string</span><br><span class="line">  &#125;</span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">(&#123; Id = <span class="number">1</span>L; Name = <span class="string">"Foo"</span> &#125;: User) ;;</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>フィールド名の重複を避けよう。</li><li>フィールド名が重複しているときは <code>型名.フィールド名 = ...</code> としよう。</li><li>レコード型がスコープにないときは <code>({ ... }: 型名)</code> としよう。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;F# のレコードリテラルのちょっとした問題とちょっとした解決策。&lt;/p&gt;
&lt;h2 id=&quot;問題1-フィールド名が重複しているとき&quot;&gt;&lt;a href=&quot;#問題1-フィールド名が重複しているとき&quot; class=&quot;headerlink&quot; title=&quot;問題1: フィールド名が重複
      
    
    </summary>
    
    
      <category term="Tips" scheme="http://vain0x.github.io/blog/tags/Tips/"/>
    
      <category term="F#" scheme="http://vain0x.github.io/blog/tags/F/"/>
    
  </entry>
  
  <entry>
    <title>『コミットメッセージに「プレフィックス」をつける』を検討した</title>
    <link href="http://vain0x.github.io/blog/2018-01-30/commit-message-prefixes/"/>
    <id>http://vain0x.github.io/blog/2018-01-30/commit-message-prefixes/</id>
    <published>2018-01-30T13:40:38.000Z</published>
    <updated>2018-12-01T12:04:26.874Z</updated>
    
    <content type="html"><![CDATA[<p>Qiita で <a href="https://qiita.com/numanomanu/items/45dd285b286a1f7280ed" target="_blank" rel="noopener">コミットメッセージに 「プレフィックス」 をつける</a> というアイディアが紹介されていて、その効用の一つとして挙げられている:</p><blockquote><p>プレフィックスを意識しながら順序立てて機能を作成する癖が身につく</p></blockquote><p>という点が、試験運用していて実際に魅力的だと感じた。</p><p>関連して、どうやら <a href="http://pronama.azurewebsites.net/2015/06/20/github-emoji-commit-message/" target="_blank" rel="noopener">テキストエディター Atom のリポジトリーではコミットメッセージに絵文字をつけるようにしている</a> らしい。</p><p>しかし GitHub のコロン記法 (<code>:sparkles:</code> みたいなの) はターミナル上では絵文字として表示されないし、そもそも特定のサービスに不必要に依存したくない。では utf-8 の絵文字そのものではどうかというと、フォントによっては表示されなかったり、 utf-8 に依存するのが気になる。ターミナル上では色がつかない (※フォントによる) ので視認性もいまいちだ。</p><p>入力が面倒だという問題は、コミットフックでコロン記法 (<code>:sparkles:</code> みたいなの) から絵文字に自動で変換するという案もある (※試していない)。</p><p>また、単純に ASCII 文字を使うという手もある。 <code>+ Add new feature</code> とか <code>- Remove a file</code> みたいな感じだ。 <code>+</code> と <code>-</code> ぐらいならいいが、それ以外はかなり涙ぐましい状態になる。</p><p>以下の観点について比較してみよう。</p><ul><li><strong>楽さ</strong>。プレフィックスをつけてコミットメッセージを書くのに手間がかからないほうがよい。</li><li><strong>明確さ</strong>。表記と意味の関係が自然であるほど覚えやすく、曖昧性が低い。初めて見た人にでも意味が分かるとなおよい。</li><li><strong>視認性</strong>。プレフィックスの意味を把握している人にとって、パット見て分かりやすいか。</li><li><strong>依存関係</strong>。寿命のなさそうな技術に依存するのはマイナス。</li></ul><table><thead><tr><th style="text-align:left">種類</th><th style="text-align:left">楽さ</th><th style="text-align:left">明確さ</th><th style="text-align:left">視認性</th><th style="text-align:left">依存関係</th></tr></thead><tbody><tr><td style="text-align:left"><strong>英語</strong></td><td style="text-align:left">○</td><td style="text-align:left">○</td><td style="text-align:left">△</td><td style="text-align:left">○</td></tr><tr><td style="text-align:left"><strong>絵文字</strong></td><td style="text-align:left">×</td><td style="text-align:left">△</td><td style="text-align:left">○</td><td style="text-align:left">△</td></tr><tr><td style="text-align:left"><strong>コロン記法</strong></td><td style="text-align:left">△</td><td style="text-align:left">△</td><td style="text-align:left">○</td><td style="text-align:left">×</td></tr><tr><td style="text-align:left"><strong>ASCII</strong></td><td style="text-align:left">○</td><td style="text-align:left">×</td><td style="text-align:left">△</td><td style="text-align:left">○</td></tr></tbody></table><p>依存関係の評価に関して念のためにいうと、 GitHub や utf-8 に限界を感じているわけではなくて、10年後ぐらいにひょっこり消えてる可能性がないこともないぐらいの意味。</p><p>そういうわけで <code>feat:</code> とかを使っていくことにする。</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li>numanomanu (2018) 「【今日からできる】コミットメッセージに 「プレフィックス」 をつけるだけで、開発効率が上がった話」 <a href="https://qiita.com/numanomanu/items/45dd285b286a1f7280ed" target="_blank" rel="noopener">https://qiita.com/numanomanu/items/45dd285b286a1f7280ed</a> (2018/01/28 アクセス.)</li><li>jz5 (2015) 「GitHub で絵文字入りコミットメッセージを活用しているプロジェクトを調べてみた」 <a href="http://pronama.azurewebsites.net/2015/06/20/github-emoji-commit-message/" target="_blank" rel="noopener">http://pronama.azurewebsites.net/2015/06/20/github-emoji-commit-message/</a> (2018/01/28 アクセス.)</li><li><a href="https://github.com/atom/atom/blob/ca71d581036ed093dd2df964fcc9bec0b5f7ff0d/CONTRIBUTING.md#git-commit-messages" target="_blank" rel="noopener">atom/atom の CONTRIBUTING.md で絵文字について書かれている部分</a> (2018/01/30 アクセス.)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Qiita で &lt;a href=&quot;https://qiita.com/numanomanu/items/45dd285b286a1f7280ed&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;コミットメッセージに 「プレフィックス」 をつける&lt;/a&gt; とい
      
    
    </summary>
    
    
      <category term="バージョン管理" scheme="http://vain0x.github.io/blog/tags/%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E7%AE%A1%E7%90%86/"/>
    
      <category term="Essay" scheme="http://vain0x.github.io/blog/tags/Essay/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntuデスクトップを使い始めた</title>
    <link href="http://vain0x.github.io/blog/2018-01-28/new-to-ubuntu/"/>
    <id>http://vain0x.github.io/blog/2018-01-28/new-to-ubuntu/</id>
    <published>2018-01-28T08:53:43.000Z</published>
    <updated>2018-12-01T12:04:26.874Z</updated>
    
    <content type="html"><![CDATA[<p>普段づかいする環境をWindowsからUbuntuに移した話。</p><h2 id="要約"><a href="#要約" class="headerlink" title="要約"></a>要約</h2><ul><li>もともと Windows 10 だった。</li><li>Linux が便利らしいので、やってみたかった。</li><li>調べてみたらかなり試す価値がありそうだった。</li><li>安めのパソコンを買って試しているが、あまり問題がない。</li></ul><h2 id="調査"><a href="#調査" class="headerlink" title="調査"></a>調査</h2><p>2017年11月ぐらいのこと。使っていたノートパソコン(dynabook)が2011年ぐらいからの古株なので、買い替えることにした。</p><p>Linux 環境は Windows よりプログラミングに向いている [要出典] 的な話をわりと聞くので一度試してみようと思い、仮想環境を使ったり、普段の作業がどのぐらい Ubuntu でもできるのか調査したりした。</p><p>同じ用途のアプリが Ubuntu 環境でも提供されているというのもあるし、いまはウェブアプリやクロスプラットフォーム対応のアプリが多いので、替えが効かないのは Visual Studio (C# や F# での開発に使う) ぐらいだった。それに関しても、 .NET Core 2.0 のリリース以後、じわじわ VSCode に移行している。WPF で GUI アプリが作れなくなるが、他の GUI ツールキットを覚えるいい機会だろう。</p><p>予想外だったのは Sublime Text 3 の Ubuntu 版が日本語 IME と相性が悪くて使いづらいことで、いまは VSCode で代用している。メモ帳 (Markdown エディター) 代わりとしてはオーバースペックなので何か用意したい。</p><h2 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h2><p>次に Ubuntu をインストールすべきパソコンを探した。メーカーによっては起動できないのもあるらしい (※よく知らない) ので、実際にインストールして動かした人のいるものを選ぶのがよさそうだ。次の記事を参考にして、 Inspiron のデスクトップを買った:</p><p>参考: <a href="http://www.dell.com/support/article/jp/ja/jpbsd1/sln151664/%E3%83%87%E3%83%ABpc%E3%81%ABubuntu-linux%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95?lang=ja" target="_blank" rel="noopener">デルPCにUbuntu Linuxをインストールする方法</a></p><p>インストール手順まで詳しく書いてあって、ぽちぽちしたらできた。マウスやキーボードもそのまま動いて安心した。</p><h2 id="移行"><a href="#移行" class="headerlink" title="移行"></a>移行</h2><p>データの移行時は文字コードの問題があった。テキストファイルの一部が shift_jis だったが、これは nkf コマンドを使ってすべて utf-8 にした。シェルスクリプトの簡単な練習になった。</p><p>音楽ファイルのメタタグも一部が shift_jis なために文字化けしていたが、これは Windows のアプリで一括変換した。どうも <strong>一部壊れている</strong> ような気がする。気のせいだと思いたい。</p><h2 id="現状"><a href="#現状" class="headerlink" title="現状"></a>現状</h2><p>何か問題が起こったときに対処できるか、というのが一番の不安要素だが、いまのところ問題はない。やったことといえば、まだ外付けハードディスクが自動的にマウントされるように fstab の設定を書いたぐらいだが。</p><p>それに、このごろは Web 系の勉強 (HTML/CSS/ES2016/TypeScript/Node.js/Vue.js) で忙しくて、OS 非依存なレイヤーしか触っていいない。</p><p>Clang (C++) で競プロをやったり、 OCaml で TaPL のサンプルを動かしたりしたい。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;普段づかいする環境をWindowsからUbuntuに移した話。&lt;/p&gt;
&lt;h2 id=&quot;要約&quot;&gt;&lt;a href=&quot;#要約&quot; class=&quot;headerlink&quot; title=&quot;要約&quot;&gt;&lt;/a&gt;要約&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;もともと Windows 10 だった。&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="日記" scheme="http://vain0x.github.io/blog/tags/%E6%97%A5%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>インテリセンス快適な構文とAPI</title>
    <link href="http://vain0x.github.io/blog/2018-01-13/intellisense-comfortable/"/>
    <id>http://vain0x.github.io/blog/2018-01-13/intellisense-comfortable/</id>
    <published>2018-01-13T14:08:23.000Z</published>
    <updated>2018-12-01T12:04:26.874Z</updated>
    
    <content type="html"><![CDATA[<p>インテリセンスの快適さと言語の構文に関するエッセイ。</p><h2 id="Intellisensability"><a href="#Intellisensability" class="headerlink" title="Intellisensability"></a>Intellisensability</h2><p>コードを書いているときに入力補完の候補とその概要がポップアップメニューに出てくるやつを <strong>インテリセンス</strong> と呼ぶことにします。インテリセンスを使うとコードを書くのが楽になりますが、頻繁に暴発する場合は逆に手間になります。インテリセンスが役に立っている状態を <strong>インテリセンス快適</strong> と呼ぶことにします。</p><h2 id="インテリセンス快適な構文"><a href="#インテリセンス快適な構文" class="headerlink" title="インテリセンス快適な構文"></a>インテリセンス快適な構文</h2><h3 id="暴発の例-既知の単語と新しい単語"><a href="#暴発の例-既知の単語と新しい単語" class="headerlink" title="暴発の例: 既知の単語と新しい単語"></a>暴発の例: 既知の単語と新しい単語</h3><p>インテリセンスが暴発しやすい状況の1つに、ユーザーが新しい単語を書こうとしているときに、既存の単語を補完候補に出してしまう現象があります。ここでいう新しい単語とは、まだ定義を書いていない変数や関数の名前です。例えば1引数のラムダ式 (関数オブジェクトのリテラル) の構文が <code>&lt;parameter&gt; =&gt; &lt;expression&gt;</code> だったとして、次のようなコードを書くと、</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xs = <span class="keyword">new</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line">xs.Select(x =&gt; x + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>最後の行の <code>xs.Select(</code> の後、入力補完は <code>Select</code> の引数として式を期待して使用可能な名前 (<code>xs</code> など) を補完しようとし、入力しようとしている単語 (<code>x</code>) をハイジャックしがちです。</p><p>一方、同じ種類のラムダ式の構文が <code>fun &lt;parameter&gt; -&gt; &lt;expression&gt;</code> だった場合、これは <code>fun</code> キーワードの直後の式は新しい単語ではないので、入力補完を抑制 <strong>でき</strong> ます。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xs = [|<span class="number">1</span>; <span class="number">2</span>; <span class="number">3</span>|]</span><br><span class="line"></span><br><span class="line">xs |&gt; Array.map (<span class="keyword">fun</span> x -&gt; x + <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="暴発の例-参照と定義の語順"><a href="#暴発の例-参照と定義の語順" class="headerlink" title="暴発の例: 参照と定義の語順"></a>暴発の例: 参照と定義の語順</h3><p>似たような例として、語順の問題もあります。例えば次の関数の定義では、型パラメーター <code>T</code> を定義される位置 (<code>&lt;T&gt;</code>) より前の位置 (<code>T Identity</code>) に書かなければいけませんが、この段階では補完候補として <code>T</code> が現れないので、他の <code>T</code> から始まる単語を入力しがちです。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C#</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> T Identity&lt;T&gt;(T <span class="keyword">value</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一方 Java では、型パラメーターを定義する位置を移動することにより、この問題を解決しています。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">identity</span><span class="params">(T value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最近見つけた別の例に TypeScript の <code>import</code> があります。これは他のファイル (モジュール) にある定義を参照できるようにするための構文で、次のように書けます:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// "./other.ts" で定義されている A, B, C を修飾なしで参照可能にする。</span></span><br><span class="line"><span class="keyword">import</span> &#123; A, B, C &#125; <span class="keyword">from</span> <span class="string">"./other"</span>;</span><br></pre></td></tr></table></figure><p>波括弧の中を入力している段階では、どのモジュールを参照するつもりなのかインテリセンスが知らないので、入力補完は起きません。しかし、先に <code>import { } from &quot;./other&quot;;</code> と書いてから波括弧の中に戻ることで入力補完ができるようになります。もし語順が逆だったら、カーソルの移動なしで入力補完ができていたでしょう:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 擬似コード</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./other"</span> &#123; A, B, C &#125;;</span><br></pre></td></tr></table></figure><h3 id="快適な構文の例-ドット記法"><a href="#快適な構文の例-ドット記法" class="headerlink" title="快適な構文の例: ドット記法"></a>快適な構文の例: ドット記法</h3><p>C系の構文を持つオブジェクト指向言語 (C++ とか) では <code>x.m</code> でメンバーを参照しますが、 <code>.</code> を入力したときに入力補完が起こるのが通例です。これにより、入力中の式に対して可能な操作をワンタッチで検索でき、メモリアクセスの負荷を減らします。</p><p>前述の上のコードにある <code>xs.Select</code> についても、配列 <code>xs</code> に対する map 操作の名前を忘れても <code>xs.</code> と書いた瞬間に候補が出て、それをざっと眺めれば <code>Select</code> を思い出すことができるはずです。(たぶん)</p><p>一方、前述の下のコード (<code>xs |&gt; Array.map</code>) では、<code>xs</code> を書いた後に配列の操作が <code>Array</code> モジュール (※名前空間のようなもの) に含まれていることを思い出さなければ連鎖を続けることができません。ややインテリセンス快適さを損ねます。</p><p>C# には、型の定義に対して非侵入的にメソッドを増やすことができる、拡張メソッドという糖衣構文があり、これのおかげでインテリセンス快適さがかなり高まります。前述の <code>Select</code> がその一例です。拡張メソッドを定義するには、関数の定義の第一引数に <code>this</code> というキーワードをつければいいのですが、</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定義側</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Scream</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> message</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> message.ToUpper() + <span class="string">"!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参照側</span></span><br><span class="line"><span class="keyword">var</span> message = <span class="string">"hello"</span>.Scream(); <span class="comment">// Scream("hello") の糖衣構文</span></span><br><span class="line">Console.WriteLine(message); <span class="comment">//=&gt; HELLO!</span></span><br></pre></td></tr></table></figure><p>もしこの制約がなかったら、 <code>&quot;hello&quot;.</code> と入力した瞬間に第一引数の型が <code>string</code> であるすべての関数が候補に上がってしまい、一覧性を失います。</p><h2 id="インテリセンス快適でないAPIの例"><a href="#インテリセンス快適でないAPIの例" class="headerlink" title="インテリセンス快適でないAPIの例"></a>インテリセンス快適でないAPIの例</h2><p>最高にインテリセンス快適な状況は、入力したい単語の一部を数文字入力した時点で、候補リストの一番上にその単語が現れて、そのままコミットするという流れです。候補に現れても一番上でなければ、マウスで選択するにせよ、カーソル移動するにせよ、追加の手間がかかります。</p><p>API の設計によってインテリセンスの検索性を損ねることがあります。C# で、もし2つの値が等しいことを表明する関数が <code>Assert.Equal</code> (<code>Assert</code> モジュールの中の <code>Equal</code> 関数) だったら、 <code>Assert.Equals</code> (すべての型に継承される関数の1つ) と混乱します。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等しくなければ表明エラー</span></span><br><span class="line">Assert.Equal(actual, expected);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 何も起こらない。</span></span><br><span class="line">Assert.Equals(left, right);</span><br></pre></td></tr></table></figure><p>これは日本語入力の際に「か」(→ 火 可 …)などを漢字変換するときの問題に似ています。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>言語やAPIはインテリセンス快適さをなるべく損ねないように作りましょう。</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li>id:tosaka2(2016)「グラニ インターン体験記」, <a href="http://tosaka2.hatenablog.com/entry/2016/09/27/183801" target="_blank" rel="noopener">http://tosaka2.hatenablog.com/entry/2016/09/27/183801</a> 2018年1月12日アクセス.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;インテリセンスの快適さと言語の構文に関するエッセイ。&lt;/p&gt;
&lt;h2 id=&quot;Intellisensability&quot;&gt;&lt;a href=&quot;#Intellisensability&quot; class=&quot;headerlink&quot; title=&quot;Intellisensability&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="Essay" scheme="http://vain0x.github.io/blog/tags/Essay/"/>
    
      <category term="プログラミング言語" scheme="http://vain0x.github.io/blog/tags/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E/"/>
    
  </entry>
  
  <entry>
    <title>SQLの検索条件と検索項目の分離</title>
    <link href="http://vain0x.github.io/blog/2018-01-05/sql-search-only-keys/"/>
    <id>http://vain0x.github.io/blog/2018-01-05/sql-search-only-keys/</id>
    <published>2018-01-05T14:30:37.000Z</published>
    <updated>2018-12-01T12:04:26.878Z</updated>
    
    <content type="html"><![CDATA[<p>複数の検索条件があるときに検索項目をselect句で毎回列挙するのがだるい問題について考えました。</p><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>例えばブログシステムで、「最近の記事を列挙する」クエリーと「特定のカテゴリーの記事を列挙する」ものがあるとします。SQL文は次のようになるでしょう：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 最近の記事を列挙するクエリー</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="comment">-- 実際にはカラムがいっぱい並ぶ。</span></span><br><span class="line">    a.title</span><br><span class="line">    , a.created_at</span><br><span class="line">    , comments.content</span><br><span class="line">    , comments.created_at</span><br><span class="line">    , categories.category_name</span><br><span class="line"><span class="keyword">from</span> articles <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">join</span> comments</span><br><span class="line">    <span class="keyword">using</span> (article_id)</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> categories</span><br><span class="line">    <span class="keyword">using</span> (category_id)</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    a.created_at &gt;= :first_date</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.created_by <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 特定のカテゴリーの記事を列挙するクエリー</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="comment">-- 上のクエリーと似たような内容になる。</span></span><br><span class="line">    a.title</span><br><span class="line">    , a.created_at</span><br><span class="line">    , comments.content</span><br><span class="line">    , comments.created_at</span><br><span class="line">    , categories.category_name</span><br><span class="line"><span class="keyword">from</span> articles <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">join</span> comments</span><br><span class="line">    <span class="keyword">using</span> (article_id)</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> categories</span><br><span class="line">    <span class="keyword">using</span> (category_id)</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    <span class="comment">-- ここは全く違う。</span></span><br><span class="line">    categories.category_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">and</span> categories.category_id = :category_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.created_by <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><p>2つのクエリーは結合するテーブルの個数や検索条件こそ異なりますが、結果として得られるリストは同じです。SQLに重複が多くて、あとで困りそうです。</p><h2 id="解決策"><a href="#解決策" class="headerlink" title="解決策"></a>解決策</h2><h3 id="1-アスタリスクとビュー"><a href="#1-アスタリスクとビュー" class="headerlink" title="1. アスタリスクとビュー"></a>1. アスタリスクとビュー</h3><p><code>select</code> 句に <code>*</code> を書くと、すべてのカラム名を列挙したことになります。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> articles <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">join</span> comments</span><br><span class="line">    <span class="keyword">using</span> (article_id)</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> categories</span><br><span class="line">    <span class="keyword">using</span> (category_id)</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    a.created_at &gt;= :first_date</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.created_by <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><p>重複が大幅に減りました。基本的にはこれで十分でしょう。なお、 <code>*</code> を使うと「カラムが追加されるたびにデータ量が増え、しかもそのことに気づきづらい」などの問題があるので使うべきでないという意見もあります。</p><p>テーブルを結合する部分が重複したままですが、これはビューを使うという手があります。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ビューを定義しておく。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> article_aggregates <span class="keyword">as</span></span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> articles <span class="keyword">as</span> a</span><br><span class="line">    <span class="keyword">join</span> comments <span class="keyword">using</span> (article_id)</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span> categories <span class="keyword">using</span> (category_id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 検索クエリー</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> a.*</span><br><span class="line"><span class="keyword">from</span> article_aggregates <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    a.created_at &gt;= :first_date</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.created_by <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p>あらかじめテーブルを結合して検索するビュー  <code>article_aggregates</code> を用意しておき、それを <code>from</code> 句に指定することにより、テーブルが始めから結合されているのと同じ状況でクエリーを書くことができます。</p><p>依然として <code>order by</code> は重複したままです。</p><h3 id="2-クエリービルダー"><a href="#2-クエリービルダー" class="headerlink" title="2. クエリービルダー"></a>2. クエリービルダー</h3><p>文字列連結やORM(EntityFrameworkなど)を用いて、カラムのリストを共通化する方法があります。(大げさにいうと)SQLを対象とするDSLを用意するのです。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 文字列連結を用いる方法。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    @(articleColumns.map(c =&gt; <span class="string">"a."</span> + c)</span><br><span class="line">    .concat(commentColumns.map(c =&gt; <span class="string">"comments."</span> + c))</span><br><span class="line">    .join(<span class="string">","</span>))</span><br><span class="line"><span class="keyword">from</span> article_aggregates <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    a.created_at &gt;= :first_date</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> @orders.join(<span class="string">","</span>)</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// クエリービルダーを用いる方法 (擬似コード)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> a = db.articles_aggregate_view <span class="keyword">in</span></span><br><span class="line">    db.query()</span><br><span class="line">    .from(a)</span><br><span class="line">    .where(a.created_at &gt;= first_date)</span><br><span class="line">    .order_by([ &#123; desc: a.created_at &#125; ])</span><br></pre></td></tr></table></figure><p>前述のビューを使う方法と合わせて、重複は完全になくなりました。</p><p>この方法の問題は、SQL文を静的に取り出す(検索したりexplainにかけたりする)のが難しくなることです。また、SQLインジェクション攻撃に対策しておく必要があります。</p><h3 id="3-検索とフェッチの分離"><a href="#3-検索とフェッチの分離" class="headerlink" title="3. 検索とフェッチの分離"></a>3. 検索とフェッチの分離</h3><ol><li>あらかじめ、主キーのリストから必要なデータを列挙する方法を用意しておき、</li><li>主キーだけを取得するクエリーを検索条件ごとに書く、</li></ol><p>という方法です。例えば次のようになります：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 主キーの値に基づいてレコードを検索するクエリー</span></span><br><span class="line"><span class="comment">-- (前述のテンプレートエンジンを使っている。)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    a.title</span><br><span class="line">    , a.created_at</span><br><span class="line">    , comments.content</span><br><span class="line">    , comments.created_at</span><br><span class="line">    , categories.category_name</span><br><span class="line"><span class="keyword">from</span> articles <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">join</span> comments</span><br><span class="line">    <span class="keyword">using</span> (article_id)</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> categories</span><br><span class="line">    <span class="keyword">using</span> (category_id)</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    a.article_id <span class="keyword">in</span> ( @articleIds.join(<span class="string">","</span>) )</span><br><span class="line">    <span class="keyword">and</span> comments.comment_id <span class="keyword">in</span> ( @commentIds.join(<span class="string">","</span>) )</span><br><span class="line">    <span class="keyword">and</span> (categories.category_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">and</span> category_id = @categoryId)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.created_by <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><p>検索のためのクエリーは次のとおりです：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 最近の記事(のID)を列挙するクエリー</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    a.article_id, comments.comment_id, a.category_id</span><br><span class="line"><span class="keyword">from</span> articles <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">join</span> comments</span><br><span class="line">    <span class="keyword">using</span> (article_id)</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    a.created_at &gt;= :first_date</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 特定のタグがついた記事を列挙するクエリー</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    a.article_id, comments.comment_id, a.category_id</span><br><span class="line"><span class="keyword">from</span> articles <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">join</span> comments</span><br><span class="line">    <span class="keyword">using</span> (article_id)</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> categories</span><br><span class="line">    <span class="keyword">using</span> (category_id)</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    category_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">and</span> category_id = :category_id</span><br></pre></td></tr></table></figure><p>クエリーの数が増えますが、 (テーブルの個数 + 1) 個ぐらいなら問題ないでしょう。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><ul><li>すべてのカラムをフェッチしたい場合は <code>*</code> を使い、</li><li>フェッチしたくないカラムがある場合はクエリーを2段階に分ける、</li></ul><p>と良いかも！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;複数の検索条件があるときに検索項目をselect句で毎回列挙するのがだるい問題について考えました。&lt;/p&gt;
&lt;h2 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h2&gt;&lt;p&gt;例えばブログシステムで、「
      
    
    </summary>
    
    
      <category term="Tips" scheme="http://vain0x.github.io/blog/tags/Tips/"/>
    
      <category term="Essay" scheme="http://vain0x.github.io/blog/tags/Essay/"/>
    
      <category term="データベース" scheme="http://vain0x.github.io/blog/tags/%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>async関数が例外を捕捉する挙動について</title>
    <link href="http://vain0x.github.io/blog/2017-12-23/async-function-and-exception/"/>
    <id>http://vain0x.github.io/blog/2017-12-23/async-function-and-exception/</id>
    <published>2017-12-22T15:00:00.000Z</published>
    <updated>2018-12-01T12:04:26.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="現象"><a href="#現象" class="headerlink" title="現象"></a>現象</h2><p>C# では async キーワードでマークされた関数の内部では await 式が使えるようになります。では、 await を使わなくていい場合はつけなくてもいいのでしょうか？</p><p>例えば、次の <code>NeverAsync</code> メソッドと <code>NeverNoAsync</code> メソッドは、どちらもタスクを返す非同期な関数ですが、実際に非同期な処理 (<code>FooAsync</code>) を実行する前に例外を投げてしまうとします。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">SampleClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// async キーワードがついている。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="keyword">int</span>&gt; <span class="title">NeverAsync</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> FooAsync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// async キーワードなし。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Task&lt;<span class="keyword">int</span>&gt; <span class="title">NeverNoAsync</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">        <span class="keyword">return</span> FooAsync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="keyword">int</span>&gt; <span class="title">FooAsync</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// なにか非同期な処理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これらのメソッドを起動した結果は次のようになります。</p><ul><li>async がついている <code>NeverAsync</code> のほうは <code>throw</code> の時点で return してタスクを返します。返されたタスクは Faulted 状態になっていて、 <code>Exception</code> プロパティーから送出された例外を取得できます。</li><li>async のついていない <code>NeverNoAsync</code> のほうは、当たり前ですが、例外を伝播します。</li></ul><p>つまり async キーワードがついているだけで、次のような try-catch 文が生成されていると解釈できます。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Task&lt;<span class="keyword">int</span>&gt; <span class="title">NeverAsync_Compiled</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* async メソッドの中身 (throw とか FooAsync とか) */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="comment">/* 返されるタスク */</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Task.FromException&lt;<span class="keyword">int</span>&gt;(ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="影響"><a href="#影響" class="headerlink" title="影響"></a>影響</h2><p>この挙動の違いの影響を受ける例を挙げます。次のように非同期操作のエラー処理を <code>ContinueWith</code> で書くと、</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">BarAsync()</span><br><span class="line">.ContinueWith(task =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (task.Status)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> TaskStatus.Faulted:</span><br><span class="line">            <span class="keyword">var</span> ex = task.Exception;</span><br><span class="line">            <span class="comment">// エラー処理</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>非同期メソッド <code>BarAsync</code> に async キーワードがついていなくて例外が投げられたとき、エラー処理が行われるのではなく例外が伝播されます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>async キーワードをつけると、例外が捕捉されてエラー状態のタスクを返すようになる。</li><li><code>async () =&gt; await FooAsync()</code> と <code>() =&gt; FooAsync()</code> は例外発生時の挙動が異なる。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://d.hatena.ne.jp/naga_sawa/20160703/1467517912" target="_blank" rel="noopener">C# 非同期メソッドを作るにあたり、例外が出るタイミングでハマったメモ - ..たれろぐ..</a> (2017年10月16日閲覧)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;現象&quot;&gt;&lt;a href=&quot;#現象&quot; class=&quot;headerlink&quot; title=&quot;現象&quot;&gt;&lt;/a&gt;現象&lt;/h2&gt;&lt;p&gt;C# では async キーワードでマークされた関数の内部では await 式が使えるようになります。では、 await を使わなくていい場
      
    
    </summary>
    
    
      <category term="Tips" scheme="http://vain0x.github.io/blog/tags/Tips/"/>
    
      <category term="C#" scheme="http://vain0x.github.io/blog/tags/C/"/>
    
      <category term="非同期" scheme="http://vain0x.github.io/blog/tags/%E9%9D%9E%E5%90%8C%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>[C#] コンストラクタの自動生成 #1</title>
    <link href="http://vain0x.github.io/blog/2017-12-04/csharp-constructor-generation-01/"/>
    <id>http://vain0x.github.io/blog/2017-12-04/csharp-constructor-generation-01/</id>
    <published>2017-12-03T15:31:05.000Z</published>
    <updated>2018-12-01T12:04:26.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="要約"><a href="#要約" class="headerlink" title="要約"></a>要約</h2><p>C# のフィールドや自動実装プロパティーの定義から、完全コンストラクターを自動生成したい。</p><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><ul><li>引数の値をフィールドやプロパティーに代入する処理だけからなるコンストラクターを <strong>完全コンストラクター</strong> と呼ぶ。<ul><li>現実のコンストラクターは入力検証 (参照型の値が null でないことを検査したり、数値の範囲を検査したりすること) を含むことが多いが、それでも完全コンストラクターと呼ぶかは <strong>調整中</strong> 。</li></ul></li></ul><p>次のようなクラスがあるとき、</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次のように完全コンストラクターを機械的に生成したい。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成されたコンストラクター</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="keyword">int</span> age, <span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Age = age;</span><br><span class="line">        Name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="関連ツールと言語サポート"><a href="#関連ツールと言語サポート" class="headerlink" title="関連ツールと言語サポート"></a>関連ツールと言語サポート</h2><p>完全コンストラクターを生成するツールはすでにある。</p><h3 id="RecordConstructorGenerator"><a href="#RecordConstructorGenerator" class="headerlink" title="RecordConstructorGenerator"></a><strong><a href="https://github.com/ufcpp/RecordConstructorGenerator" target="_blank" rel="noopener">RecordConstructorGenerator</a></strong></h3><p>Visual Studio 2015 でアナライザーが使えるようになり、静的コード生成などの処理を IDE 上で行なうのが簡単になった。この「RecordConstructorGenerator」アナライザーをインストールしておくと、手軽に完全コンストラクターを自動生成できる。</p><p>極めて便利だが、しかし、少しだけ不満がある。</p><ul><li>自動実装プロパティーへの代入処理は生成されるが、フィールドへの代入処理も生成してほしい。</li><li>null 検査を生成してほしいことがある。</li></ul><p>実装が分かりやすくて、後述の自作アナライザーの参考になった。</p><h3 id="Visual-Studio-2017"><a href="#Visual-Studio-2017" class="headerlink" title="Visual Studio 2017"></a>Visual Studio 2017</h3><p>Visual Studio 2017 では、標準で完全コンストラクターを生成する機能が追加された。(Roslyn の機能か？)</p><p>どのフィールド・プロパティーについて代入処理を生成するかを選べるので便利。また、同じ方法で、同値性の定義なども生成できる。とはいえ、メンバーが追加・削除されたときの自動修正にまでは対応していない。</p><h3 id="自作-RecordTypeAnalyzer"><a href="#自作-RecordTypeAnalyzer" class="headerlink" title="自作/RecordTypeAnalyzer"></a>自作/<a href="https://github.com/vain0x/RecordTypeAnalyzer" target="_blank" rel="noopener">RecordTypeAnalyzer</a></h3><p>困ったときは自作。</p><p>完全コンストラクターやコピーコンストラクタ―のみならず、等価性や比較の自動生成など、 F# のレコード型が備えるような、さまざまな機能を自動生成し、さらに定義の変更に合わせて自動修正する機能を備えたアナライザー、というのを目指した。</p><p>ところで、レコード型で等価性などを定義できるのは、型がイミュータブルだからだ。イミュータブルでない型に構造的同値性を定義するわけにはいかないので、型がイミュータブルかどうかを自動で判定する機能を実装した。問題は、完全コンストラクターを実装したい対象の型は、イミュータブルなものに限らないということだ。このあたりを考慮すると、仕様が複雑化してくる。</p><p>やや詰め込みすぎて、アナライザー初心者にはつらくなってきた。そこで、いったん仕様を縮小して動くものを作ることにした。いま思うと、この時点で「RecordConstructorGenerator を改造する」方向に進まなかったのは悪い癖だろう。</p><h3 id="自作-BoilerplateConstructorGenerator"><a href="#自作-BoilerplateConstructorGenerator" class="headerlink" title="自作/BoilerplateConstructorGenerator"></a>自作/<a href="https://github.com/vain0x/BoilerplateConstructorGenerator" target="_blank" rel="noopener">BoilerplateConstructorGenerator</a></h3><p>完全コンストラクターやコピーコンストラクタ―の自動生成と、定義が変わったときの自動修正機能を備えたアナライザー、というのを目指した。</p><p>自動修正はコンストラクターの実装を分析して検出しようとしたが、前述のようにバリデーションの扱いのせいで誤検出がひどかったのでやめた。 <code>// analyzer: complete-constructor</code> というマジックコメントを挿入することで検出することにした。</p><p>現時点ではこれを使っている。コピーコンストラクターの自動生成機能がないことと、なぜか変更点がないのに変更が検出されている状態になる不具合があるのでリリースに至っていないが、なかなか快適だ。</p><h2 id="余談-レコード型"><a href="#余談-レコード型" class="headerlink" title="余談: レコード型"></a>余談: レコード型</h2><p>C# にも言語機能としてレコード型を導入する計画がある。 C# 8.0 候補とのことなので期待して待っていよう。</p><p><a href="https://github.com/dotnet/csharplang/issues/39" target="_blank" rel="noopener">Champion “Records” · Issue #39 · dotnet/csharplang</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;要約&quot;&gt;&lt;a href=&quot;#要約&quot; class=&quot;headerlink&quot; title=&quot;要約&quot;&gt;&lt;/a&gt;要約&lt;/h2&gt;&lt;p&gt;C# のフィールドや自動実装プロパティーの定義から、完全コンストラクターを自動生成したい。&lt;/p&gt;
&lt;h2 id=&quot;例&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="C#" scheme="http://vain0x.github.io/blog/tags/C/"/>
    
      <category term="Essay" scheme="http://vain0x.github.io/blog/tags/Essay/"/>
    
  </entry>
  
  <entry>
    <title>IReadOnlyListがIListを実装すべき理由</title>
    <link href="http://vain0x.github.io/blog/2017-05-20/why-ireadonlylist-should-implement-ilist/"/>
    <id>http://vain0x.github.io/blog/2017-05-20/why-ireadonlylist-should-implement-ilist/</id>
    <published>2017-05-20T11:00:09.000Z</published>
    <updated>2018-12-01T12:04:26.874Z</updated>
    
    <content type="html"><![CDATA[<p>主張: <code>IReadOnlyList&lt;_&gt;</code> を実装するクラスは、 <code>IList&lt;_&gt;</code> と <code>IList</code> も実装したほうがいい。</p><p>理由は2つあります。</p><h2 id="理由1-IEnumerable-拡張メソッド"><a href="#理由1-IEnumerable-拡張メソッド" class="headerlink" title="理由1: IEnumerable 拡張メソッド"></a>理由1: IEnumerable 拡張メソッド</h2><p>1つ目の理由は、<code>IEnumerable&lt;_&gt;</code> に対する拡張メソッドが <code>IReadOnlyList&lt;_&gt;</code> ではなく <code>IList&lt;_&gt;</code> 用に最適化されているからです。</p><p><code>IEnumerable&lt;_&gt;</code> に対する拡張メソッドはインターフェイス経由では <code>GetEnumerator</code> メソッドしか起動できないので、例えばシーケンスの最後の要素を取得するメソッド (<code>Last</code>) を素直に実装するには、1度すべての要素を列挙して、最後の値を返すことになります。これではパフォーマンスが損なので、与えられたシーケンスをまず <code>IList&lt;_&gt;</code> に動的キャストできないか試みて、可能ならインデックスを使って最後の要素を取得する、という最適化が入っています。 (<a href="https://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs,3628defc5be1468a" target="_blank" rel="noopener">Enumerable.Last の参考実装</a>)</p><p>したがって、「<code>IReadOnlyList&lt;_&gt;</code> が <code>IEnumerable&lt;_&gt;</code> にキャストされて <code>Enumerable.Last</code> される」といったシナリオのパフォーマンスを最大化するために、 <code>IList&lt;_&gt;</code> を実装しておいたほうがいいわけです。</p><h2 id="理由2-WPF"><a href="#理由2-WPF" class="headerlink" title="理由2: WPF"></a>理由2: WPF</h2><p>2つ目の理由は、WPF アプリケーションから参照されうるクラスライブラリーに限った話になりますが、「WPF の DataGrid はコレクションが非ジェネリックな <code>IList</code> を実装していることを前提としている」ことです。</p><p>簡単にいうと、DataGrid (表) に <code>IList</code> を実装していないコレクションを渡すと、セルの編集ができなくなります。詳細については、既に Qiita に記事があるので、こちらを参照してください:</p><p><a href="http://qiita.com/gaya_K/items/d1737fc829502c916d18" target="_blank" rel="noopener">DataGrid（WPF） の ItemsSource には IList が必要</a></p><p>~~また、実際の動きを確認したい場合はこちらからソースコードを入手できます:</p><p><a href="https://github.com/vain0x/VainZero.Sandbox.CSharp/tree/2017-05-20-DataGrid" target="_blank" rel="noopener">DataGrid.ItemsSource が IList を実装している場合としていない場合の比較</a>~~ (リンク切れ)</p><h2 id="例外"><a href="#例外" class="headerlink" title="例外"></a>例外</h2><p>もちろん上記で述べたような懸念があたらないことが分かっているケースでは、<code>IList&lt;_&gt;</code> や <code>IList</code> を実装しなくてもよいでしょう。</p><h2 id="おまけ-ReadOnlyCollection"><a href="#おまけ-ReadOnlyCollection" class="headerlink" title="おまけ: ReadOnlyCollection"></a>おまけ: ReadOnlyCollection</h2><p><code>IList&lt;_&gt;</code> はメンバーの数が多くて、実装するのは非常にめんどうですが、 <code>IList&lt;_&gt;</code> をラップして読み取り専用なリスト (<code>IReadOnlyList&lt;_&gt;</code>) として振る舞わせる <code>ReadOnlyCollection&lt;_&gt;</code> というのが標準にあります。これを継承して実装すると楽です。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;主張: &lt;code&gt;IReadOnlyList&amp;lt;_&amp;gt;&lt;/code&gt; を実装するクラスは、 &lt;code&gt;IList&amp;lt;_&amp;gt;&lt;/code&gt; と &lt;code&gt;IList&lt;/code&gt; も実装したほうがいい。&lt;/p&gt;
&lt;p&gt;理由は2つあります。&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
    
      <category term="C#" scheme="http://vain0x.github.io/blog/tags/C/"/>
    
      <category term=".NET" scheme="http://vain0x.github.io/blog/tags/NET/"/>
    
  </entry>
  
  <entry>
    <title>awaitでスレッドを切り替える</title>
    <link href="http://vain0x.github.io/blog/2017-04-05/switch-on-await/"/>
    <id>http://vain0x.github.io/blog/2017-04-05/switch-on-await/</id>
    <published>2017-04-05T06:00:00.000Z</published>
    <updated>2018-12-01T12:04:26.874Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://qiita.com/vain0x/items/945591e96b7338478cb5" target="_blank" rel="noopener">Qiita</a></p><p>awaitでスレッドを切り替えるための簡単なヘルパーメソッドを作ったので紹介します。</p><p>実装とサンプルはここにあります: <a href="https://gist.github.com/vain0x/fd5880b77d019cdb91d4a58dd52813a2" target="_blank" rel="noopener">await-for-context-switching.cs</a></p><h2 id="前提-Awaitable-パターン"><a href="#前提-Awaitable-パターン" class="headerlink" title="前提: Awaitable パターン"></a>前提: Awaitable パターン</h2><ul><li>Awaitable パターンについては <a href="http://ufcpp.net/study/csharp/sp5_awaitable.html#awaiter" target="_blank" rel="noopener">非同期メソッドの内部実装</a> などを参照。</li></ul><h2 id="OK-await-→-UI-処理"><a href="#OK-await-→-UI-処理" class="headerlink" title="OK: await → UI 処理"></a>OK: await → UI 処理</h2><p>まず await が1つだけの非同期メソッドでは、Task に対する await が自動的に同期コンテクスト (SynchronizationContext) を捕捉する機能を用いることで、以下のように簡単にかけます。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Do</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Do は UI スレッドで起動されるとする。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重い処理を非同期で実行する。</span></span><br><span class="line">    <span class="keyword">var</span> x = <span class="keyword">await</span> HeavyTask();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// UI スレッドで結果を使う。</span></span><br><span class="line">    UIOperation(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="問題-await-→-await-→-UI-操作"><a href="#問題-await-→-await-→-UI-操作" class="headerlink" title="問題: await → await → UI 操作"></a>問題: await → await → UI 操作</h2><p>しかし await が2回以上ある場合に同様に書くと、必要以上に早く UI スレッドに戻ってしまいます。以下の例では、2つ目の重たい非同期処理である <code>SecondHeavyTask</code> が完了するまで、UI スレッドがブロックされます。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Do</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Do は UI スレッドで起動されるとする。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重たい非同期処理</span></span><br><span class="line">    <span class="keyword">var</span> x = <span class="keyword">await</span> HeavyTask();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// もう1つ重たい非同期処理 (!)</span></span><br><span class="line">    <span class="keyword">var</span> y = <span class="keyword">await</span> SecondHeavyTask(x);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ここは UI スレッドに戻って処理したい。</span></span><br><span class="line">    UIOperation(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを避けるには、 Task.Run や ContinueWith などを使って、await を1つにまとめる必要があります。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Do</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a =</span><br><span class="line">        <span class="keyword">await</span> Task.Run(<span class="keyword">async</span> () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> x = <span class="keyword">await</span> HeavyTask();</span><br><span class="line">            <span class="keyword">var</span> y = <span class="keyword">await</span> SecondHeavyTask(x);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> &#123; x, y &#125;;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    UIOperation(a.x, a.y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>インデントが2段階深くなることと、変数を匿名型経由で渡していることが気になります。</p><p>冒頭のヘルパーメソッドを使うと次のようにできます。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Do</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = <span class="keyword">await</span> TaskModule.SwitchToTaskPool();</span><br><span class="line">    <span class="keyword">var</span> x = <span class="keyword">await</span> HeavyTask();</span><br><span class="line">    <span class="keyword">var</span> y = <span class="keyword">await</span> SecondHeavyTask();</span><br><span class="line">    <span class="keyword">await</span> context;</span><br><span class="line">    UIOperation(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これには</p><ul><li>インデントが浅くなった。</li><li>同期コンテクストを使うこと (UI 操作の直前で UI スレッドに戻ること) が明確になった。</li></ul><p>という利点があります。</p><h2 id="仕組み"><a href="#仕組み" class="headerlink" title="仕組み"></a>仕組み</h2><p>ヘルパーメソッドの仕組みを簡単に説明しておきます。</p><h3 id="継続"><a href="#継続" class="headerlink" title="継続"></a>継続</h3><p><code>await</code> には継続を取り出す機能があります。どういうことかというと、例えば次の「task を await して、その結果を使って何か処理をする」コードは:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="keyword">await</span> task;</span><br><span class="line">F(x);</span><br></pre></td></tr></table></figure><p><code>await</code> の時点で <code>task</code> が完了していなかったとすると、次のようなコードと同様の振る舞いになります:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> awaiter = task.GetAwaiter();</span><br><span class="line">awaiter.OnCompleted(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> x = awaiter.GetResult();</span><br><span class="line">    F(x);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> nextTask;  <span class="comment">// ←コンパイラーが生成するタスク</span></span><br></pre></td></tr></table></figure><p>※実際にこのように変換されるわけではありません。雰囲気大事。</p><p>ここで <code>awaiter.OnCompleted</code> にラムダ式が渡されていますが、これが継続です。</p><p><code>GetAwaiter</code> メソッド経由で生成される awaiter を自作することで、この継続を好きなように使えます。</p><h3 id="SwitchToTaskPool"><a href="#SwitchToTaskPool" class="headerlink" title="SwitchToTaskPool"></a>SwitchToTaskPool</h3><p><a href="https://gist.github.com/vain0x/fd5880b77d019cdb91d4a58dd52813a2#file-await-for-context-switching-cs-L186" target="_blank" rel="noopener">TaskModule.SwitchToTaskPool</a> は awaitable のインスタンスを生成するだけのメソッドです。ついでにここで同期コンテクストを捕まえています。</p><p>awaitable/awaiter の実装は <a href="https://gist.github.com/vain0x/fd5880b77d019cdb91d4a58dd52813a2#file-await-for-context-switching-cs-L94" target="_blank" rel="noopener">これ</a> です。<code>GetAwaiter</code> が起動されたときにすることが特にないので、awaitable と awaiter を同じインスタンスにしています。先述の通り、この awaitable の <code>OnCompleted</code> メソッドに継続が渡されるわけですが、これは継続をタスクプール上で実行させるために <code>Task.Run</code> に渡します。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnCompleted</span>(<span class="params">Action continuation</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Task.Run(continuation);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>そのため、 <code>await TaskModule.SwitchToTaskPool</code> より後ろの部分がタスクプールで実行されることになります。</p><p>また、await 式の結果は <code>awaiter.GetResult</code> から取得されます。 <code>Task&lt;_&gt;</code> の場合はタスクの結果の値がそうです。<code>SwitchToTaskPoolAwaitable</code> の場合は保存しておいた同期コンテクストを返すようになっています。</p><h3 id="同期コンテクストを-await-する"><a href="#同期コンテクストを-await-する" class="headerlink" title="同期コンテクストを await する"></a>同期コンテクストを await する</h3><p><code>await</code> 式には、<code>Task</code> に限らず <code>GetAwaiter</code> メソッドを提供する任意の値を渡せますが、 <code>GetAwaiter</code> は拡張メソッドでもかまいません。</p><p><code>SynchronizationContext</code> はいかにも <code>await</code> 可能な感じなので、次のように <code>GetAwaiter</code> を生やしています。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SynchronizationContextAwaiter <span class="title">GetAwaiter</span>(<span class="params"><span class="keyword">this</span> SynchronizationContext @<span class="keyword">this</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SynchronizationContextAwaiter(@<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これが生成する <a href="https://gist.github.com/vain0x/fd5880b77d019cdb91d4a58dd52813a2#file-await-for-context-switching-cs-L138" target="_blank" rel="noopener">SynchronizationContextAwaiter</a> は、先ほどの SwitchToTaskPoolAwaitable とほぼ同じで、継続をタスクプールではなく同期コンテクストに放り込むものです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://qiita.com/vain0x/items/945591e96b7338478cb5&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Qiita&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;awaitでスレッドを切り替えるための簡単なヘルパーメソ
      
    
    </summary>
    
    
      <category term="C#" scheme="http://vain0x.github.io/blog/tags/C/"/>
    
      <category term="非同期" scheme="http://vain0x.github.io/blog/tags/%E9%9D%9E%E5%90%8C%E6%9C%9F/"/>
    
  </entry>
  
</feed>
