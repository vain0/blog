<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>vain0x&#39;s blog</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://vain0x.github.io/blog/"/>
  <updated>2019-06-30T12:17:28.699Z</updated>
  <id>http://vain0x.github.io/blog/</id>
  
  <author>
    <name>vain0x</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>近況 2019-06-30</title>
    <link href="http://vain0x.github.io/blog/2019-06-30/diary/"/>
    <id>http://vain0x.github.io/blog/2019-06-30/diary/</id>
    <published>2019-06-30T14:59:59.000Z</published>
    <updated>2019-06-30T12:17:28.699Z</updated>
    
    <content type="html"><![CDATA[<p>今月の活動について</p><ul><li>前月分 <a href="https://vain0x.github.io/blog/2019-05-31/diary/">https://vain0x.github.io/blog/2019-05-31/diary/</a></li></ul><h2 id="ミローネ言語"><a href="#ミローネ言語" class="headerlink" title="ミローネ言語"></a>ミローネ言語</h2><p><a href="https://github.com/vain0x/milone-lang" target="_blank" rel="noopener">https://github.com/vain0x/milone-lang</a></p><ul><li>F# のサブセットで書かれた、セルフホスティングを目指しているコンパイラ</li><li>Hindley-Milner 型推論の理解に誤りがあって、型推論器にバグがあった</li></ul><h2 id="knowbug"><a href="#knowbug" class="headerlink" title="knowbug"></a>knowbug</h2><p>スクリプト言語 HSP3 のデバッガ</p><p><a href="https://github.com/vain0x/knowbug" target="_blank" rel="noopener">https://github.com/vain0x/knowbug</a></p><p>HSP/knowbug とは:</p><ul><li>Hot Soup Processor (HSP) というスクリプト言語がある<ul><li>Windows やスマートフォン向けの GUI アプリが簡単に作れるということで人気がある</li></ul></li><li>デバッガーがある<ul><li>主に実行中に変数の値を表示したり、ステップ実行の操作をしたりする機能を持つ</li></ul></li><li>デバッガーは「特定のインターフェイスを満たす関数を公開する DLL」なので、これを差し替えれば別のデバッガーに切り替えられる</li><li>2008 年ぐらいに公式のデバッガーからフォークして、さまざまな機能を追加したのが <strong>knowbug</strong><ul><li>最終リリース (v1.22.1) は 2015 年</li></ul></li></ul><p>問題:</p><ul><li>文字列エンコーディングの問題がある</li><li>HSP は少なくとも2003年ぐらいから存在する古参言語で、UTF-8 ではなく shift_jis (cp932) をベースにしている</li><li>UTF-8 版のランタイムもリリースされたが、knowbug は shift_jis 版しかサポートしていない</li><li>機能改善の要望もたまに受けていた</li><li>コードベースに手を加えるのが難しく、対応できていなかった</li><li>特に、変数の値を表示するために文字列を構築する部分と、変数の値をメモリから読み取る部分が結合していたのがつらかった</li><li>変数のデータをメモリから読み取るのは、HSP ランタイム側の挙動を知っていないといけない部分が多くて、修正難度が高い</li><li>GUI の中に計算やデータが埋め込まれている部分も少なくなかった</li></ul><p>作業:</p><ul><li>ちまちまリファクタリングを進めた</li><li>処理から特定の仕事をクラスや関数に切り離したり</li><li>グローバル変数を使うのではなく引数からオブジェクトを受けるようにしたり</li><li>誰も使ってなさそうな機能の削除したり</li></ul><p>文字列エンコーディング問題:</p><ul><li>文字列を <code>char*</code> や <code>string</code> ではなく、エンコーディングごとに異なる型を使うことで混在を防ぐ</li><li><code>Utf8String</code> とか <code>HspString</code> とか</li><li>エンコーディング変換を行う関数で型変換を行う</li><li>型検査が通ればエンコーディングを正常に変換できているとみなせる</li></ul><p>パスAPI:</p><ul><li>HSP ランタイムからもらえるオブジェクトをポインタで直接持つと問題がある<ul><li>そのオブジェクトが有効かどうか判定できない</li><li>そのオブジェクトのどの部分に情報があるか分かりにくい</li><li>モック化が難しくて、テストできない</li></ul></li><li>「HSP のオブジェクトを指す経路」(オブジェクトパス)を考える<ul><li>すべての生存しているオブジェクトにはグローバルからの経路がある</li><li>例えば「モジュール @foo の配列変数 bar の要素 (1) の値」という感じ</li></ul></li><li>オブジェクトパスを指定して「このオブジェクトに関して、何らかの情報をください」という形式でデータを取得する、という設計に変更した<ul><li>経路を遡ることで、オブジェクトの生存判定を確実に行える</li><li>情報の取り方を knowbug 側の都合に合わせて設計できる</li><li>情報を取得する部分と加工する部分が自然に切り離せる</li></ul></li><li>テストもしやすいはず<ul><li>HSP ランタイム側のデータは必ずインターフェイス越しに取得されるので、このインターフェイスのテストダブルを作れば HSP ランタイムがなくても knowbug 側のコードを動かせるはず</li><li>まだテストは書いていない</li></ul></li><li>課題もある<ul><li>パスの一部である必要がないオブジェクトがけっこうある<ul><li>「実行位置に対応するスクリプトファイル」とか</li></ul></li><li>オブジェクトを指定する際に必ずパスを使うのではなく、オブジェクトを指し示すもの (例えば「グローバル変数 (i 番目)」とか) を別に用意して、それをパスの上に配置するというのもありえる</li><li>リファクタリングというよりリライトになってしまった</li></ul></li><li>GoF のデザインパターンの Mediator に近いかもしれない</li></ul><p>進捗:</p><ul><li>余暇の大半を費やしたおかげで、必要な機能はおおよそ揃った</li><li>動作確認がいまいち</li><li>上述の通りテストも書きたい</li></ul><h2 id="競技プログラミング"><a href="#競技プログラミング" class="headerlink" title="競技プログラミング"></a>競技プログラミング</h2><p>週末は AtCoder に参加した。新体制 ABC では安定して E 完を取れていてよい。</p><ul><li><a href="https://qiita.com/vain0x/items/9d503673bfe678929c5c" target="_blank" rel="noopener">競プロ参戦記 #49 Maximum Sum of Minimum | M-SOLUTIONS</a></li><li><a href="https://qiita.com/vain0x/items/e74a23d5c62711f95ea0" target="_blank" rel="noopener">競プロ参戦記 #50 Sum Equals Xor | ABC 129</a></li><li><a href="https://qiita.com/vain0x/items/f26ccc47098a7a2dd96b" target="_blank" rel="noopener">競プロ参戦記 #51 Successive Subtraction | diverta 2019 2</a></li><li><a href="https://qiita.com/vain0x/items/43ba0051dcdb673b054f" target="_blank" rel="noopener">競プロ参戦記 #52 Common Subsequence | ABC 130</a></li><li><a href="https://qiita.com/vain0x/items/44e9f4987fee472463b7" target="_blank" rel="noopener">競プロ参戦記 #53 Friendships | ABC 131</a></li></ul><h2 id="その他-Web-アプリの開発環境整備"><a href="#その他-Web-アプリの開発環境整備" class="headerlink" title="その他: Web アプリの開発環境整備"></a>その他: Web アプリの開発環境整備</h2><p>Docker-Compose を使って Web アプリの開発環境を構築できるようにした</p><ul><li>開発環境とステージング環境・本番環境で設定が違う (例えばデータベースの名前を分けたい) が、どうすればいいのか迷った</li><li>とりあえず docker-compose の設定ファイルを分割して <code>docker-compose -f docker-base.yml -f docker-dev.yml</code> のようなコマンド (のエイリアス) を使う方針にした</li><li>Docker 環境内で jest がなぜか動作しなかったので ava に変更した</li></ul><h2 id="その他-de-Bruijn-インデックス"><a href="#その他-de-Bruijn-インデックス" class="headerlink" title="その他: de Bruijn インデックス"></a>その他: de Bruijn インデックス</h2><p>TaPL の実装を読むと、変数の表現に de Bruijn インデックスが使われていてよく分からないので、de Bruijn インデックスの説明の部分を改めて読んだ。分かった気がするので、その内容をここでまとめる。</p><p>抽象構文木の上にカーソルを置くと考えると分かりやすい気がする。いま見ているノードより上で束縛される (あるいはどこにも束縛されない) 変数を自由変数である。例えば以下の項を考える。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\x. \y. (\f. f x) x</span><br></pre></td></tr></table></figure><p>どこでもいいが一例として <code>\f. f x</code> の部分に注目しているとする。このとき上で束縛されている x, y は (いま注目している項の視点では) 自由変数である。</p><p>自由変数には順番がある。抽象構文木を下から上に向かって辿るときに、束縛に遭遇する順番で並んでいるとみなす。上の例では <code>[y, x]</code> という配列。これを <strong>名前付け文脈</strong> という。</p><p><strong>ある変数の出現の de Bruijn インデックスは、その項の名前付け文脈において、その変数が何番目であるかを表している。</strong></p><p>形式的な表現ではないが、これで de Bruijn インデックスを定められていると思う。</p><p>上の例の <code>\f. f x</code> の内側にある <code>f</code> の de Bruijn インデックスを考える。この項から上に辿ると束縛 <code>f, y, x</code> がこの順で見つかるので、これが名前付け文脈である。<code>f</code> は 0 番目に出現するので、de Bruijn インデックスは 0 である。</p><p><code>x</code> についても同様で、名前付け文脈は同じく <code>f, y, x</code> なので、de Bruijn インデックスは 2 である。</p><p>最後にもう1つの例として、1段階外側に出現する <code>x</code> を考える。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\x. \y. (\f. f x) x</span><br><span class="line">                  ^</span><br></pre></td></tr></table></figure><p>これを上に辿ると <code>y, x</code> なので、de Bruijn インデックスは 1 になる。</p><p>名前付け文脈の計算は、木を下方向に巡回するとき (DFS でも BFS でも可)、束縛の内側に入るたびに名前付け文脈を伸ばし、出るたびに削る、という操作をすればいい。リストと相性がいい。</p><h2 id="その他-クロージャと存在型"><a href="#その他-クロージャと存在型" class="headerlink" title="その他: クロージャと存在型"></a>その他: クロージャと存在型</h2><p>TaPL を読んでいたら存在型を使ってクロージャをデコードできるような気がしてきた。</p><p>クロージャのある言語で以下のように書いたとする。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> inc x = x + n</span><br><span class="line"><span class="keyword">let</span> f = inc</span><br><span class="line">f <span class="number">3</span> <span class="comment">//=&gt; 5</span></span><br></pre></td></tr></table></figure><p>これをクロージャのない言語に変換したいとする。</p><p>クロージャのインターフェイスは「環境」(キャプチャされた値の集合)と「関数」の2つ。環境の型を存在型で隠蔽すればいい。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> inc env x = = x + env.n</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f =</span><br><span class="line">    <span class="comment">// 型 X = &#123;n: Nat&#125; を隠蔽する存在型のインスタンス</span></span><br><span class="line">    &#123;*&#123;<span class="attr">n</span>: Nat&#125;, &#123;env = &#123;n = n&#125;, fun = inc&#125;&#125;</span><br><span class="line">    <span class="keyword">as</span> ∃X, &#123;<span class="attr">env</span>: X, <span class="attr">fun</span>: X -&gt; Nat -&gt; Nat&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// クロージャを呼ぶ</span></span><br><span class="line"><span class="keyword">let</span> &#123;X, &#123;env, fun&#125;&#125; = f</span><br><span class="line">fun env <span class="number">3</span> <span class="comment">//=&gt; 5</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今月の活動について&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前月分 &lt;a href=&quot;https://vain0x.github.io/blog/2019-05-31/diary/&quot;&gt;https://vain0x.github.io/blog/2019-05-31/diary/&lt;/a&gt;&lt;
      
    
    </summary>
    
    
      <category term="日記" scheme="http://vain0x.github.io/blog/tags/%E6%97%A5%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>近況 2019-05-31</title>
    <link href="http://vain0x.github.io/blog/2019-05-31/diary/"/>
    <id>http://vain0x.github.io/blog/2019-05-31/diary/</id>
    <published>2019-05-31T14:59:59.000Z</published>
    <updated>2019-05-31T15:01:58.693Z</updated>
    
    <content type="html"><![CDATA[<p>今月の活動のまとめ</p><ul><li>前月分 <a href="https://vain0x.github.io/blog/2019-04-30/diary">https://vain0x.github.io/blog/2019-04-30/diary</a></li></ul><h2 id="ミローネ言語"><a href="#ミローネ言語" class="headerlink" title="ミローネ言語"></a>ミローネ言語</h2><p><a href="https://github.com/vain0x/milone-lang/commits?author=vain0x&amp;since=2019-04-30&amp;until=2019-05-31" target="_blank" rel="noopener">https://github.com/vain0x/milone-lang/commits?author=vain0x&amp;since=2019-04-30&amp;until=2019-05-31</a></p><ul><li>セルフホスティングを目指している F# サブセットのコンパイラ</li></ul><h3 id="ミローネ-多相関数の単相化"><a href="#ミローネ-多相関数の単相化" class="headerlink" title="ミローネ: 多相関数の単相化"></a>ミローネ: 多相関数の単相化</h3><p><a href="https://github.com/vain0x/milone-lang/blob/628adf3b38c27a79d3c58936e2b9ca1d01d99693/boot/MiloneLang/Monomorphizing.fs" target="_blank" rel="noopener">Monomorphizing.fs</a></p><ul><li>多相関数の単相化を実装した</li><li>C++ のテンプレートのように型引数ごとにコード複製する</li><li>コードのコメントにおおよそ解説を書いた</li><li>例えば以下の flip は任意のペアに作用するジェネリック関数であり、そのままではC言語にコンパイルできない</li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> flip (x, y) = (y, x)</span><br></pre></td></tr></table></figure><ul><li>以下のような呼び出しがあるとする</li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>, <span class="string">"one"</span>) |&gt; flip</span><br></pre></td></tr></table></figure><ul><li>この式における flip には <code>(int, string) -&gt; (string, int)</code> という単相型がついている</li><li>この型を使用箇所の型 (use-site type) と呼ぶ</li><li>flip を複製して、この単相型を持たせたものを用意する (単相化インスタンスと呼ぶ)</li><li>flip の呼び出しを単相化インスタンスの呼び出しに変換する</li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> flipForIntStringPair (x: int, y: string) = (y, x)</span><br><span class="line"></span><br><span class="line">(<span class="number">1</span>, <span class="string">"one"</span>) |&gt; flipForIntStringPair</span><br></pre></td></tr></table></figure><ul><li>この変換をひたすら繰り返す</li><li>このアルゴリズムは基本的なケースではたぶん動く</li><li>効率が悪いし、そもそも停止性を証明できてない</li><li>ひとまず開発当初からの懸念だった多相関数のコード生成ができて安心した</li></ul><h3 id="ミローネ-モジュール内の相互再帰"><a href="#ミローネ-モジュール内の相互再帰" class="headerlink" title="ミローネ: モジュール内の相互再帰"></a>ミローネ: モジュール内の相互再帰</h3><p><a href="https://github.com/vain0x/milone-lang/commit/8eb8b30b1b90b842a2062bdfe2b14125ac9f4d42" target="_blank" rel="noopener">https://github.com/vain0x/milone-lang/commit/8eb8b30b1b90b842a2062bdfe2b14125ac9f4d42</a></p><ul><li>F# には module rec という機能があって、rec キーワードつきで定義したモジュールに配置された関数は相互参照できる</li><li>構文解析や型推論をはじめとして、コンパイラの各ステージは巨大な相互再帰として実装されている</li><li>そのためこの機能は重要。(必須ではない。<code>let .. and ..</code> 構文を使うという手もある。関数オブジェクトを使うという手もある)</li><li>アルゴリズムは単純なトポロジカルソートと接ぎ木</li></ul><p>手順:</p><ul><li>最初のモジュール (<code>Foo/Foo.milone</code>) をパースする</li><li><code>open Foo.Bar</code> のような open 文を収集しておく</li><li>open されているモジュール (<code>Foo/Bar.milone</code> など) を探してパースする</li><li>これを再帰的に繰り返すとトポロジカルオーダーでモジュールが並ぶ</li><li>あとは各モジュールの抽象構文木を接合する</li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bar</span></span><br><span class="line"><span class="keyword">let</span> bar () = .. <span class="keyword">in</span> ()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Foo</span></span><br><span class="line"><span class="keyword">let</span> main _ = .. <span class="keyword">in</span> ()</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓↓↓</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bar () = .. <span class="keyword">in</span></span><br><span class="line"><span class="keyword">let</span> main _ = .. <span class="keyword">in</span> ()</span><br></pre></td></tr></table></figure><ul><li>これだと open していないモジュールに含まれる関数が見えてしまったりするが、そのへんは厳密にしてない</li><li>セルフホスティングという目的の障害にならない問題は積極的に無視していく</li></ul><h3 id="ミローネ-再帰的な判別共用体"><a href="#ミローネ-再帰的な判別共用体" class="headerlink" title="ミローネ: 再帰的な判別共用体"></a>ミローネ: 再帰的な判別共用体</h3><p><a href="https://github.com/vain0x/milone-lang/commit/d9dbc8e5e8fc71318d2d4a10c7c302c64c32e2a1" target="_blank" rel="noopener">https://github.com/vain0x/milone-lang/commit/d9dbc8e5e8fc71318d2d4a10c7c302c64c32e2a1</a></p><ul><li>F# の判別共用体は Struct 属性をつけなければヒープに確保されて参照として取り扱われる</li><li>そのため判別共用体がその型自身への参照を持つようなことも可能</li><li>ミローネ言語コンパイラでも抽象構文木の型などにこの機能を利用している</li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// よくある抽象構文木</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Expr</span> </span>=</span><br><span class="line">    | Int <span class="keyword">of</span> int</span><br><span class="line">    | Add <span class="keyword">of</span> Expr * Expr <span class="comment">// Expr 自身を再帰的に参照している</span></span><br></pre></td></tr></table></figure><ul><li>判別共用体はトークンの種類にも使われている</li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">TokenKind</span> </span>=</span><br><span class="line">    | Int <span class="keyword">of</span> int</span><br><span class="line">    | Plus</span><br><span class="line">    | ParenL <span class="comment">// (</span></span><br><span class="line">    | ParenR <span class="comment">// )</span></span><br></pre></td></tr></table></figure><ul><li>ペイロード (<code>of int</code> の部分) を持たないバリアント (Int とか Plus とか) を参照として取り扱うとき、いちいち malloc するのは無駄</li><li>F# では定数として扱われていて、おそらく同一のインスタンスが使いまわされる</li><li>場合分けが発生するし、ペイロードのないバリアントのリストを事前に列挙してグローバル変数を宣言して……みたいなコードを書くことになってめんどくさい</li><li>ペイロードをポインタ経由で持つ、というルールにした</li><li>例えば TokenKind はC言語で以下の型に表現する</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> TokenKindTag &#123;</span><br><span class="line">    Int, Plus, ParenL, ParenR,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TokenKind</span> &#123;</span></span><br><span class="line">    <span class="keyword">enum</span> TokenKindTag tag;</span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> *int_; <span class="comment">// Int of int のペイロード</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>ペイロードのないバリアントは <code>(struct TokenKind){.tag = Plus}</code> のように値で生成される</li><li>理想的には再帰型のみポインタ経由で参照するという方針にしたい</li><li>あるいは「ペイロードの sizeof が16バイトを超えるとき」みたいな判定でもいいかも</li><li>再帰型のペイロードならタグ (enum) のサイズがついて 4 + 4 + .. &gt; 16 になる</li><li>そもそも抽象構文木の表現に再帰的な判別共用体を使わないという実装方針もありうる</li></ul><h3 id="ミローネ-ラムダ式"><a href="#ミローネ-ラムダ式" class="headerlink" title="ミローネ: ラムダ式"></a>ミローネ: ラムダ式</h3><ul><li>抽象構文木を組み替える雑実装</li><li><code>fun x -&gt; y</code> を <code>let f x = y in f</code> にする</li></ul><h2 id="競技プログラミング"><a href="#競技プログラミング" class="headerlink" title="競技プログラミング"></a>競技プログラミング</h2><p>週末は AtCoder に参加。ABC が6問構成になって、かなりエキサイティング</p><ul><li><a href="https://qiita.com/vain0x/items/fd9854b5863f1634dd04" target="_blank" rel="noopener">競プロ参戦記 #45 DivRem Number | diverta 2019</a></li><li><a href="https://qiita.com/vain0x/items/8fcd5bf0704b3011b8fc" target="_blank" rel="noopener">競プロ参戦記 #46 XOR Matching | ABC 126</a></li><li><a href="https://qiita.com/vain0x/items/87f227f867749600b5ee" target="_blank" rel="noopener">競プロ参戦記 #47 Cell Distance | ABC 127</a></li><li>競プロ参戦記 #48 Frog Jump | ABC 128 (TODO: 明日書く)</li></ul><h2 id="picomet-lang"><a href="#picomet-lang" class="headerlink" title="picomet-lang"></a>picomet-lang</h2><p><a href="https://github.com/vain0x/picomet-lang" target="_blank" rel="noopener">https://github.com/vain0x/picomet-lang</a></p><ul><li>JavaScript をターゲットにコンパイルする作業を開始した<ul><li>全然できてない</li></ul></li></ul><h2 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h2><p>ゴールデンウィークにやろうとしたことができなかったので、終わってからいろいろやった</p><blockquote><p>イベントを利用してパーサーと構文木を分離するやつ、具象構文木をラップして抽象構文木を作るやつ、ロスレスな具象構文木を作ってラウンドトリップさせるやつ、とかの理解を深めるつもりだったのに (2019/05/03)</p></blockquote><h2 id="その他-イベント型のパーサー"><a href="#その他-イベント型のパーサー" class="headerlink" title="その他: イベント型のパーサー"></a>その他: イベント型のパーサー</h2><p><a href="https://github.com/vain0x/playground/tree/master/play/2019-05-04-event-based-parser" target="_blank" rel="noopener">https://github.com/vain0x/playground/tree/master/play/2019-05-04-event-based-parser</a></p><ul><li><a href="https://github.com/rust-analyzer/rust-analyzer" target="_blank" rel="noopener">rust-analyzer</a> の ra_parser (Rust の構文解析の実装) で採用されている方式の小さい版</li><li>構文解析の結果としてツリーではなく「イベント」のリストを生成するというもの (リンク先を参照)</li><li>ツリーの設計とパーサーの実装を切り離せる</li><li>パーサーが「トークンのリストに階層構造を作る」という作業しかしなくなる (できなくなる)<ul><li>トークンを増減させたり順番を入れ替えたりということはしない</li><li>そういうのはイベントを受け取ってツリーを組み立てる部分の責務</li></ul></li><li>親子関係の指定を厳密にしなくてよくなる</li><li>エラー耐性が高い、らしいが感覚はつかめていない</li></ul><blockquote><p>字句解析はソースコードを区間分割して各区間に種類を割り当てるもの、構文解析はトークンのリストを (順番を変えずに) ツリーにするもの、みたいな直観を得つつある (2019/05/05)</p></blockquote><h2 id="その他-rowan-の-TypeScript-移植"><a href="#その他-rowan-の-TypeScript-移植" class="headerlink" title="その他: rowan の TypeScript 移植"></a>その他: rowan の TypeScript 移植</h2><p><a href="https://github.com/vain0x/playground/tree/master/play/2019-05-06-picolyn" target="_blank" rel="noopener">https://github.com/vain0x/playground/tree/master/play/2019-05-06-picolyn</a></p><ul><li><a href="https://github.com/rust-analyzer/rowan" target="_blank" rel="noopener">rowan</a> というライブラリがある<ul><li>ロスレスな具象構文木を扱う対象言語非依存のライブラリ</li><li>Roslyn (C#) や Swift コンパイラなどで採用されているらしい Red/Green ツリーの実装</li></ul></li><li>Rust で書かれているのでメモリ管理が煩雑</li><li>実装を参考にしながら TypeScript で小さく作り直してる</li><li>これをラップして抽象構文木として操作するあたりの直観がまだ得られていない</li></ul><h2 id="その他-prettier-printer-の-Rust-移植"><a href="#その他-prettier-printer-の-Rust-移植" class="headerlink" title="その他: prettier printer の Rust 移植"></a>その他: prettier printer の Rust 移植</h2><p><a href="https://github.com/vain0x/playground/tree/master/play/2019-05-11-prettier-printer-rust-from-scratch" target="_blank" rel="noopener">https://github.com/vain0x/playground/tree/master/play/2019-05-11-prettier-printer-rust-from-scratch</a></p><ul><li>空白と改行を自動的に使い分けて最適な文字列描画のレイアウトを構成するアルゴリズム</li><li>中身を読んで、Haskell で書かれた参考実装を Rust に移植してみた</li><li>(自作言語の) コードフォーマッターを作るときに使えるかもしれない</li></ul><h2 id="その他-C-のコンストラクタ自動生成ツール-for-VSCode"><a href="#その他-C-のコンストラクタ自動生成ツール-for-VSCode" class="headerlink" title="その他: C# のコンストラクタ自動生成ツール (for VSCode)"></a>その他: C# のコンストラクタ自動生成ツール (for VSCode)</h2><p><a href="https://github.com/vain0x/csharpextensions" target="_blank" rel="noopener">https://github.com/vain0x/csharpextensions</a></p><ul><li>VSCode 上で動く C# 拡張</li><li>既存の拡張 (C# extensions) に類似機能があったが、思うように動かないケースがあった<ul><li>sealed class や struct に反応しない</li><li>(プロパティではなく) フィールドに対応していない</li></ul></li><li>開発も停止していたので fork して自分好みに書き換えた<ul><li>正規表現ベースかつやっつけ改修なので、正常に動かないケースも少なくない</li></ul></li><li>publish した<ul><li><code>vain0x.csharp-gen-ctor</code></li></ul></li></ul><h2 id="その他-クラゲ言語"><a href="#その他-クラゲ言語" class="headerlink" title="その他: クラゲ言語"></a>その他: クラゲ言語</h2><p><a href="https://github.com/vain0x/curage-lang" target="_blank" rel="noopener">https://github.com/vain0x/curage-lang</a></p><ul><li>LSP の動作確認のスクリーンショットをつけた</li><li><a href="https://github.com/vain0x/curage-lang/compare/v0.1.0...v0.2.0" target="_blank" rel="noopener">バージョン間の差分</a> へのリンクをつけた</li></ul><h2 id="その他-WPF-ナビゲーションサンプル"><a href="#その他-WPF-ナビゲーションサンプル" class="headerlink" title="その他: WPF ナビゲーションサンプル"></a>その他: WPF ナビゲーションサンプル</h2><p><a href="https://github.com/vain0x/wpf-nav-sample" target="_blank" rel="noopener">https://github.com/vain0x/wpf-nav-sample</a></p><ul><li>ページ遷移を含むアプリの構成のサンプル</li><li>2年ぐらい前に作っていたやつをせっかくなので完成させた</li><li>要点:<ul><li>DataTemplate を使うとビューモデルからビューへのマッピングを作れる</li><li>ContentPresenter を使うとビューモデル層で表示するコントロールを切り替えられて、ページ遷移ができる</li><li>RelativeSource を使うとビューモデル上でのフレームとページの相互参照を回避できる</li></ul></li></ul><h2 id="その他-Rx"><a href="#その他-Rx" class="headerlink" title="その他: Rx"></a>その他: Rx</h2><p>Rx.NET (<a href="https://github.com/dotnet/reactive" target="_blank" rel="noopener">dotnet/reactive</a>) と <a href="https://github.com/runceel/ReactiveProperty" target="_blank" rel="noopener">ReactiveProperty</a> を使った WPF アプリを改修して思ったことのメモ書き</p><p>要点:</p><ul><li>WPF と Rx の組み合わせは必然</li><li>Flux は冗長性と引き換えにすべてを解決する</li><li>Rx ストリームの自動停止を有効活用すべし</li></ul><h3 id="Rx-PropertyChanged-から-Rx-への道筋"><a href="#Rx-PropertyChanged-から-Rx-への道筋" class="headerlink" title="Rx: PropertyChanged から Rx への道筋"></a>Rx: PropertyChanged から Rx への道筋</h3><ul><li>WPF のバインディング機能には <code>INotifyPropertyChanged.PropertyChanged</code> (プロパティの値が変化したときに起こすイベント) を適切に発火する必要がある</li><li><code>string NameSan =&gt; Name + &quot;さん&quot;</code> みたいな get プロパティについても発火する必要がある</li><li>この例では Name が変化したときに NameSan が変化した旨のイベントを発火しなければいけない</li><li>そうしないと NameSan をバインディングしている部分の UI に変更が反映されない</li><li>つまり「Name が NameSan に依存されている」ことを Name が知っている、という記述</li><li>この例では単一オブジェクト内での依存だが、他のオブジェクトに依存されることもある</li><li>依存関係を逆転して「NameSan が Name に依存している」ように記述したい</li><li>オブザーバーパターンを使う</li><li>C# におけるオブザーバーパターンの実装では event と Rx がよい</li><li>Rx を使う</li></ul><h3 id="Rx-Flux"><a href="#Rx-Flux" class="headerlink" title="Rx: Flux"></a>Rx: Flux</h3><ul><li>ReactiveProperty (new で作ったもの) をあちこちに置くと整合性を維持するのが難しい<ul><li>TODO: これは詳細を書いた方がいい</li></ul></li><li>イミュータブルなデータ (S) を値とする ReactiveProperty を1個だけ用意する</li><li>残りはそこから導出する (<code>state.Select().ToReactiveProperty()</code> とする)</li><li>データの変更を通知するための <code>Subject&lt;Func&lt;S, S&gt;&gt;</code> を用意しておいて、各コンポーネントに渡す</li><li>例えば導出した RP が TwoWay バインディングで変化したら、変更に基づくデータの更新関数を onNext して渡す<ul><li><code>Text.Subscribe(text =&gt; subject.OnNext(state =&gt; state.SetText(text)))</code> みたいな</li></ul></li></ul><p>利点:</p><ul><li>整合性の維持がとても簡単になる</li><li>変更を集約する subject に ObserveOn(dispatcher) を挟むだけでスレッドセーフになる<ul><li>別スレッドからも変更操作をしたいときにやる</li><li>シングルスレッドモデルなのでパフォーマンスは下がる</li></ul></li><li>おまけ: 根元の ReactiveProperty を Dispose しただけで下流が一気に停止する<ul><li>Subscribe したときに発生する IDisposable を CompositeDisposable に詰めていく作業をしなくていい</li></ul></li></ul><p>欠点:</p><ul><li>コードがやたら冗長<ul><li>CRUD してるだけの部分とかは N 倍になる</li></ul></li></ul><p>注意点:</p><ul><li>ReactiveProperty は Subscribe した瞬間に発火するので、それがイミュータブルなデータに差分を作ってしまうと無駄にループが回る<ul><li>イミュータブルなデータの更新時に、差分がないことを検出して同一インスタンス (this) を返すようにしておく</li><li>あるいはイミュータブルなデータが構造的同値性を備えるようにしておく</li></ul></li></ul><h3 id="Rx-可変コレクションの集計"><a href="#Rx-可変コレクションの集計" class="headerlink" title="Rx: 可変コレクションの集計"></a>Rx: 可変コレクションの集計</h3><ul><li>可変コレクション (ObservableCollection) の要素から飛んでくる通知 (IObservable が出力するイベントを通知と呼ぶことにする) を集計する方法で苦労していた</li><li>コレクションに Add/Remove が起こるたびに Merge をやり直すという力技だった<ul><li>パフォーマンスが悪すぎる</li></ul></li><li>上記の方法でおおよそ解決した</li></ul><p>簡単にかくと:</p><ul><li>イミュータブルなデータには配列 (ImmutableArray) でコレクションの各要素に対応するデータを持つ</li><li>変化するたび、コレクション側で差分を計算して ObservableCollection に対応する変更を行う</li><li>データが追加されたときは対応する要素を生成する<ul><li>自分がリストに含まれているかを TakeWhile でチェックしておく</li><li>要素の生成時に、要素内の変更を購読して上述の subject に送るようにしておく</li></ul></li><li>データが削除されたときは対応する要素を削除する<ul><li>TakeWhile のおかげで要素は自動で停止するので、特に Dispose などをする必要はない</li></ul></li><li>結局、この可変コレクションがしているのは差分を計算して同期するというだけで、IObservable/IDisposable のわずらわしさからは解放されている</li></ul><p>課題:</p><ul><li>差分計算が難しい<ul><li>現状は1要素の Add/Remove しかないから簡単</li><li>Move が入ると大変</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今月の活動のまとめ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前月分 &lt;a href=&quot;https://vain0x.github.io/blog/2019-04-30/diary&quot;&gt;https://vain0x.github.io/blog/2019-04-30/diary&lt;/a&gt;&lt;/l
      
    
    </summary>
    
    
      <category term="日記" scheme="http://vain0x.github.io/blog/tags/%E6%97%A5%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>近況 2019-04-30</title>
    <link href="http://vain0x.github.io/blog/2019-04-30/diary/"/>
    <id>http://vain0x.github.io/blog/2019-04-30/diary/</id>
    <published>2019-04-30T14:59:59.000Z</published>
    <updated>2019-05-03T17:46:15.021Z</updated>
    
    <content type="html"><![CDATA[<p>今月の活動のまとめ</p><ul><li>前月分 <a href="https://vain0x.github.io/blog/2019-03-31/diary">https://vain0x.github.io/blog/2019-03-31/diary</a></li></ul><h2 id="picomet-lang"><a href="#picomet-lang" class="headerlink" title="picomet-lang"></a>picomet-lang</h2><p><a href="https://github.com/vain0x/picomet-lang/commits?since=2019-03-31&amp;until=2019-04-30" target="_blank" rel="noopener">https://github.com/vain0x/picomet-lang/commits?since=2019-03-31&amp;until=2019-04-30</a></p><ul><li>自作のプログラミング言語処理系</li><li><code>&amp;&amp;</code> や <code>-=</code> などの細かい機能を実装した</li><li>正準化を実装した</li></ul><p>正準化 (canonicalize) は「式」から副作用を排除する操作。picomet-lang では代入や関数呼び出しを式として認めているので、式を評価すると副作用が起こりうる。そのため <code>x + y</code> を評価するとき <code>x</code>, <code>y</code> のどちらを先に評価するかで結果が変わる。例えば <code>y + x</code> に書き換えたりできない。これでは後々の解析でプログラムを変形するのが困難になる。</p><p>そこで、プログラムを次のような条件を満たす中間言語に変形する。</p><ul><li>プログラムは文の列である</li><li>文は if や return のような制御文、関数呼び出し、代入である</li><li>式はリテラル、変数、演算である</li></ul><p>例えば以下は、関数呼び出しが入れ子になっていたり、引数式の評価の途中で代入が発生する厄介な式である。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f(g(<span class="keyword">if</span> y == <span class="number">0</span> &#123;</span><br><span class="line">    y += <span class="number">1</span>;</span><br><span class="line">    x</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    x / y</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p>この例では、文を外側に移動したり、中間変数を導入したりして、条件を満たすように変形できる。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> y == <span class="number">0</span> &#123;</span><br><span class="line">    y += <span class="number">1</span></span><br><span class="line">    t = x</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    t = x / y</span><br><span class="line">&#125;</span><br><span class="line">u = g(t)</span><br><span class="line">_ = f(u)</span><br></pre></td></tr></table></figure><p>この形式はC言語やアセンブリに近くて、後続のコード生成がやりやすい。</p><p>そういえば「<a href="https://vain0x.github.io/blog/2019-02-26/interpreter-written-in-hsp3/">HSP3 でスクリプト言語の処理系を書く</a>」の記事に以下のように書いたが、</p><blockquote><p>はじめ、Rust のように式の中に文を書けるような文法にしていたが、break などのジャンプ命令によってスタックの構造が壊れてしまうということを知った<br>例えば while (p()) { s += (if (q()) { break } else { 1 }) } みたいな式だと、+= の左辺の s がスタックに乗った状態で break に到達してしまうので、ジャンプする前にそれをポップする必要がある。</p></blockquote><p>正準化を施せば問題なさそうだ。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正準化前: 式の中にジャンプ命令があるので問題を起こす</span></span><br><span class="line"><span class="keyword">while</span> p() &#123;</span><br><span class="line">    s += <span class="keyword">if</span> q() &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正準化後: 問題ない</span></span><br><span class="line"><span class="keyword">while</span> p() &#123;</span><br><span class="line">    <span class="keyword">if</span> q() &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        t = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    s += t</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ネギ言語"><a href="#ネギ言語" class="headerlink" title="ネギ言語"></a>ネギ言語</h2><p><a href="https://github.com/vain0x/negi-lang/commits?since=2019-03-31&amp;until=2019-04-30" target="_blank" rel="noopener">https://github.com/vain0x/negi-lang/commits?since=2019-03-31&amp;until=2019-04-30</a></p><ul><li>HSP3 で書いたスクリプト言語処理系</li><li>GC が高確率でスタックオーバーフローを起こす問題がさすがに好ましくないので、マークをつける処理を再帰からループに書き換えた</li><li>簡易的なマップ (連想配列) を実装した</li></ul><h2 id="hsp3-ginger"><a href="#hsp3-ginger" class="headerlink" title="hsp3-ginger"></a>hsp3-ginger</h2><p><a href="https://github.com/vain0x/hsp3-ginger" target="_blank" rel="noopener">https://github.com/vain0x/hsp3-ginger</a></p><ul><li>VSCode で HSP3 の開発を行うための拡張機能</li><li>とりあえずシンタックスの定義を用意した<ul><li>Atom 用のものを微調整しただけ</li></ul></li><li>まったりやっていく</li></ul><h2 id="競技プログラミング"><a href="#競技プログラミング" class="headerlink" title="競技プログラミング"></a>競技プログラミング</h2><p>週末に AtCoder に参加し、気まぐれに Codeforces (コドフォ) に1回参加した。ABC は安定して全完。高難度の問題への取り組みはいまいち。</p><ul><li><a href="https://qiita.com/vain0x/items/911a7ef1c5834d60503b" target="_blank" rel="noopener">競プロ参戦記 #40 Cake 123 | ABC123</a></li><li><a href="https://qiita.com/vain0x/items/99a93d17426f88bd26de" target="_blank" rel="noopener">競プロ参戦記 #41 Handstand | ABC124</a></li><li><a href="https://qiita.com/vain0x/items/bfad6cb1fa7bec912e06" target="_blank" rel="noopener">競プロ参戦記 #42 Polynomial Divisors | Tenka1 2019</a></li><li><a href="https://qiita.com/vain0x/items/c3ab29132c1558f791e9" target="_blank" rel="noopener">競プロ参戦記 #43 Flipping Signs | ABC 125</a></li><li><a href="https://qiita.com/vain0x/items/80cc96b3c83dfd5f17a6" target="_blank" rel="noopener">競プロ参戦記 #44 Three Religions | コドフォ #556 Div.2</a></li></ul><h2 id="Underpass-Webアプリ"><a href="#Underpass-Webアプリ" class="headerlink" title="Underpass (Webアプリ)"></a>Underpass (Webアプリ)</h2><p><a href="https://github.com/vain0x/underpass" target="_blank" rel="noopener">https://github.com/vain0x/underpass</a></p><ul><li>任意のパスフレーズを厳しく制限されたパスワードに変換するアプリ</li><li>まれに「数字、小文字、大文字」を含む10文字以下のパスワード、などを要求されることがある</li><li>そういうパスワードは作れないこともないが、<strong>安全性を覚えやすさを両立できない</strong></li><li>安全かつ覚えやすいパスフレーズからそういうパスワードを導出するためのアプリがこれ</li><li>ほんとに安全なのか自信がない</li></ul><h2 id="Who-to-Follow"><a href="#Who-to-Follow" class="headerlink" title="Who-to-Follow"></a>Who-to-Follow</h2><p><a href="https://github.com/vain0x/who-to-follow-examples" target="_blank" rel="noopener">https://github.com/vain0x/who-to-follow-examples</a></p><ul><li>Elm で who-to-follow のサンプルを書いてみた</li><li>ユーザーをランダムに3人表示する、×ボタンを押すと別のユーザーを表示する、というもの<ul><li>ユーザーのリストは GitHub の API でとってくる</li></ul></li><li>非同期処理や乱数生成が出てくるので Cmd の練習になった</li><li>本当は TypeScript + Redux でも同じのを書いて比較という形にしたかった<ul><li>Redux がめんどくさくなってやめた</li></ul></li></ul><h2 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h2><h3 id="その他-WPF-のビューモデルを自動生成するやつ"><a href="#その他-WPF-のビューモデルを自動生成するやつ" class="headerlink" title="その他: WPF のビューモデルを自動生成するやつ"></a>その他: WPF のビューモデルを自動生成するやつ</h3><p><a href="https://github.com/vain0x/playground/blob/1a6012bb8d2d1002c690e7a614c2b7316b16e19b/play/2019-04-24-virtual-view-model-for-wpf/wpf_sands/MainWindow.xaml.cs#L472" target="_blank" rel="noopener">https://github.com/vain0x/playground/blob/1a6012bb8d2d1002c690e7a614c2b7316b16e19b/play/2019-04-24-virtual-view-model-for-wpf/wpf_sands/MainWindow.xaml.cs#L472</a></p><ul><li>イミュータブルなオブジェクトのツリーからミュータブルなオブジェクトのツリー (<code>INotifyPropertyChanged</code> を実装してる) を作って、それを差分更新していく、というもの</li><li>TwoWay バインディングをどうにかしないといけないのが辛い</li></ul><h3 id="その他-WPF-の-FontFamily-が異常に重たい"><a href="#その他-WPF-の-FontFamily-が異常に重たい" class="headerlink" title="その他: WPF の FontFamily が異常に重たい"></a>その他: WPF の FontFamily が異常に重たい</h3><ul><li>WPF で作っていたアプリの動作が重かった</li><li>TextBlock や TextBox に FontFamily でローカルのフォントファイル (Noto Sans CJK JP) を指定するのをやめたらかなり早くなった</li><li>小さい再現コードを作ってないから別の原因かもしれない</li></ul><h3 id="その他-PHP-のアロー関数の構文が良い"><a href="#その他-PHP-のアロー関数の構文が良い" class="headerlink" title="その他: PHP のアロー関数の構文が良い"></a>その他: PHP のアロー関数の構文が良い</h3><ul><li>「<a href="https://qiita.com/rana_kualu/items/7fbdd520a7e355599f7d" target="_blank" rel="noopener">PHPでアロー関数を使えるようになる</a>」という記事を読んだ</li><li>PHP 7.4 から <code>fn($x, $y, ..) =&gt; z</code> という短い構文のラムダ式が入る<ul><li>いままでは昔の JavaScript と同様の <code>function($x, $y, ..) { return $z; }</code> のような形式しかなかった</li></ul></li><li>C# や JavaScript の <code>(x, y, ..) =&gt; z</code> という構文 (先頭に <code>fn</code> キーワードがない) は曖昧性やパーサーの実装への影響の大きさから却下されたらしい</li><li>C# のアロー関数構文は構文解析やエラー耐性の面から好ましくないので、<strong>PHP 流のラムダ式が流行ると嬉しい</strong></li><li>私の自作言語のラムダ式構文は以下:<ul><li>klac-lang: <code>(x, y, ..) =&gt; z</code> (C# と同じ、構文解析にめちゃくちゃ苦労した)</li><li>milone-lang: <code>fun x y .. -&gt; z</code> (F# と同じ)</li><li>picomet-lang: <code>|x, y, ..| z</code> (Rust と同じ)</li><li>negi-lang: <code>fun(x, y, ..) z</code> (PHP に似ているが <code>=&gt;</code> がない)</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今月の活動のまとめ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前月分 &lt;a href=&quot;https://vain0x.github.io/blog/2019-03-31/diary&quot;&gt;https://vain0x.github.io/blog/2019-03-31/diary&lt;/a&gt;&lt;/l
      
    
    </summary>
    
    
      <category term="日記" scheme="http://vain0x.github.io/blog/tags/%E6%97%A5%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>近況 2019-03-31</title>
    <link href="http://vain0x.github.io/blog/2019-03-31/diary/"/>
    <id>http://vain0x.github.io/blog/2019-03-31/diary/</id>
    <published>2019-03-31T14:59:59.000Z</published>
    <updated>2019-04-02T14:30:39.775Z</updated>
    
    <content type="html"><![CDATA[<p>今月の活動のまとめ</p><ul><li>前月分 <a href="https://vain0x.github.io/blog/2019-02-27/diary">https://vain0x.github.io/blog/2019-02-27/diary</a></li></ul><h2 id="picomet-lang"><a href="#picomet-lang" class="headerlink" title="picomet-lang"></a>picomet-lang</h2><p><a href="https://github.com/vain0x/picomet-lang" target="_blank" rel="noopener">https://github.com/vain0x/picomet-lang</a></p><ul><li>自作のプログラミング言語処理系</li><li>curage-lang　を参考に、hover などの機能を持つ LSP サーバーを用意した</li><li>相互再帰関数や HM 型推論を実装した</li><li>malloc 的なもので <code>[int]</code> (int の配列) を動的確保できるようになったので、たいていの問題は解けるようになった<ul><li>現実的には動的配列やハッシュテーブルがないと辛い</li></ul></li><li>バックエンドよりフロントエンドに力を入れて、最小実用製品にしたほうがよさそうな気がしてきた</li><li>Docker を使って手軽にビルドできるようにしたが、やめた<ul><li>Windows でも Ubuntu でもビルドしづらくなっただけだった</li><li>ビルドするための bash スクリプトを用意しつつ、Windows 向けには別途インストラクションを README に書くということにした</li></ul></li></ul><h2 id="ネギ言語"><a href="#ネギ言語" class="headerlink" title="ネギ言語"></a>ネギ言語</h2><p><a href="https://github.com/vain0x/negi-lang" target="_blank" rel="noopener">https://github.com/vain0x/negi-lang</a></p><ul><li>C言語に移植してみた</li><li>初めてC言語でまとまったコードを書いた</li><li>動的配列と enum class がほしかった</li></ul><h2 id="Tsunotoshi"><a href="#Tsunotoshi" class="headerlink" title="Tsunotoshi"></a>Tsunotoshi</h2><p><a href="https://github.com/vain0x/tsunotoshi" target="_blank" rel="noopener">https://github.com/vain0x/tsunotoshi</a></p><ul><li>オンラインブックマークアプリ</li><li>実験的に、サーバーサイドレンダリングを行うような仕組みに変更しているが、迷走中</li></ul><h2 id="競技プログラミング"><a href="#競技プログラミング" class="headerlink" title="競技プログラミング"></a>競技プログラミング</h2><p>週末の AtCoder に加えて Codeforces の問題もいくつか解いた。成績は芳しくない。</p><ul><li><a href="https://qiita.com/vain0x/items/b869075e3df587e2ecde" target="_blank" rel="noopener">競プロ参戦記 #35 Decayed Bridges | ABC 120</a></li><li><a href="https://qiita.com/vain0x/items/9faf89f843f96d8c46cd" target="_blank" rel="noopener">競プロ参戦記 #36 XOR World | ABC 121</a></li><li><a href="https://qiita.com/vain0x/items/cd075fd5229fa6ec5ef5" target="_blank" rel="noopener">競プロ参戦記 #37 Skyscrapers | CR #545 Div.2</a></li><li><a href="https://qiita.com/vain0x/items/9adda58a3fc6d31fff3e" target="_blank" rel="noopener">競プロ参戦記 #38 Reversi | AGC 31</a></li><li><a href="https://qiita.com/vain0x/items/671ebca10c08b161d1bf" target="_blank" rel="noopener">競プロ参戦記 #39 Minimum Triangulation | エデュフォ 62 Div.2</a></li></ul><h2 id="ガルパ-リズムゲーム"><a href="#ガルパ-リズムゲーム" class="headerlink" title="ガルパ (リズムゲーム)"></a>ガルパ (リズムゲーム)</h2><ul><li>EX トライマスターを取得した (2回目)</li><li>2nd Season 最高だった</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今月の活動のまとめ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前月分 &lt;a href=&quot;https://vain0x.github.io/blog/2019-02-27/diary&quot;&gt;https://vain0x.github.io/blog/2019-02-27/diary&lt;/a&gt;&lt;/l
      
    
    </summary>
    
    
      <category term="日記" scheme="http://vain0x.github.io/blog/tags/%E6%97%A5%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>近況 2019-02-27</title>
    <link href="http://vain0x.github.io/blog/2019-02-27/diary/"/>
    <id>http://vain0x.github.io/blog/2019-02-27/diary/</id>
    <published>2019-02-27T14:31:49.000Z</published>
    <updated>2019-02-27T12:59:21.570Z</updated>
    
    <content type="html"><![CDATA[<p>今月の活動のまとめ</p><ul><li>前月分: <a href="https://vain0x.github.io/blog/2019-01-30/diary/">https://vain0x.github.io/blog/2019-01-30/diary/</a></li></ul><h2 id="ネギ言語"><a href="#ネギ言語" class="headerlink" title="ネギ言語"></a>ネギ言語</h2><p>HSP3 で JavaScript 風の構文を持つ自作言語のインタプリタを書くプロジェクトを始めた。</p><p><a href="https://github.com/vain0x/negi-lang" target="_blank" rel="noopener">https://github.com/vain0x/negi-lang</a></p><ul><li>詳細はこちらの記事を参照: <a href="https://vain0x.github.io/blog/2019-02-26/interpreter-written-in-hsp3/">HSP3 でスクリプト言語の処理系を書く | vain0x’s blog</a></li></ul><h2 id="競プロ参戦記"><a href="#競プロ参戦記" class="headerlink" title="競プロ参戦記"></a>競プロ参戦記</h2><p>今月も週末に AtCoder に参加した。Qiita に移転した。</p><ul><li><a href="https://note.mu/vain0x/n/n07b1b0686624" target="_blank" rel="noopener">競プロ参戦記 #32 偶奇 | みんぷろ2019 [ABC]｜ベイン｜note</a></li><li><a href="https://qiita.com/vain0x/items/e72df0b0a2e1b653d5a5" target="_blank" rel="noopener">競プロ参戦記 #33 Match Matching | ABC 118 - Qiita</a></li><li><a href="https://qiita.com/vain0x/items/9a8a881f5170dc8eaa62" target="_blank" rel="noopener">競プロ参戦記 #34 Lazy Faith | ABC 119 - Qiita</a></li></ul><h2 id="ブックマークアプリ"><a href="#ブックマークアプリ" class="headerlink" title="ブックマークアプリ"></a>ブックマークアプリ</h2><p><a href="https://github.com/vain0x/tsunotoshi" target="_blank" rel="noopener">https://github.com/vain0x/tsunotoshi</a></p><ul><li>オンラインブックマークアプリ</li><li>何かしらのウェブアプリを書いて公開したかったので作っている</li><li>モチベーションは低め</li></ul><h2 id="ガルパ-リズムゲーム"><a href="#ガルパ-リズムゲーム" class="headerlink" title="ガルパ (リズムゲーム)"></a>ガルパ (リズムゲーム)</h2><ul><li>God knows… (難度28) をフルコンボできた</li><li>EXトライマスターの称号を獲得した</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今月の活動のまとめ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前月分: &lt;a href=&quot;https://vain0x.github.io/blog/2019-01-30/diary/&quot;&gt;https://vain0x.github.io/blog/2019-01-30/diary/&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="日記" scheme="http://vain0x.github.io/blog/tags/%E6%97%A5%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>HSP3 でスクリプト言語の処理系を書く</title>
    <link href="http://vain0x.github.io/blog/2019-02-26/interpreter-written-in-hsp3/"/>
    <id>http://vain0x.github.io/blog/2019-02-26/interpreter-written-in-hsp3/</id>
    <published>2019-02-26T13:25:00.000Z</published>
    <updated>2019-02-26T14:21:37.808Z</updated>
    
    <content type="html"><![CDATA[<p>HSP3 は BASIC 風の構文を持つスクリプト言語で、GUI プログラミングがやりやすいことに人気がある。私は10年ぐらい前に、どういうわけかその HSP3 でインタプリタを書いて失敗した。</p><p>10年ほど経って問題の解決策が分かってきた感じがしたので、改めて似たようなものを作ってみた。まだ10日ほどしか作業しておらずプロトタイプ段階といえるが、頭の中にあった解決策が実際に問題を解決できているという実感が得られた。</p><h2 id="klac-lang-の失敗"><a href="#klac-lang-の失敗" class="headerlink" title="klac-lang の失敗"></a>klac-lang の失敗</h2><p>klac-lang とは、私が2008年9月ごろに書き始めた JavaScript っぽい自作言語のインタプリタ。これについて詳しく書きたくないので簡単にまとめると、以下のような点で失敗した。</p><ul><li>バージョン管理していなかった<ul><li>バグを埋め込んでしまったら、それを直すまで作業が進まなかった</li><li>バックアップ (日付ファイル名の zip ファイル) もまばらすぎた</li></ul></li><li>テストコードを書いていなかった<ul><li>書き換えるたびに至るところからバグが噴出していた</li></ul></li><li>演算子優先度順位法っぽいが異なる、筋の悪い方法で構文解析をしていた<ul><li>ルールの整合性が取るために長時間の試行錯誤が必要だった</li></ul></li><li>データ構造としてモジュール変数やプラグインを多用していた<ul><li>それらを使っても、それほど表現力が上がるわけではない</li><li>コードは読みづらくなり、パフォーマンスや移植性にも悪影響があった</li></ul></li></ul><p>結果として、標準ライブラリの読み込みに数秒かかるほど遅く、動かすたびにバグが見つかるという、触っていてうんざりする代物になってしまった。</p><h2 id="学び"><a href="#学び" class="headerlink" title="学び"></a>学び</h2><ul><li>バージョン管理:<ul><li>Git が使えるようになった</li></ul></li><li>テストコード:<ul><li>テストコードを書いて挙動を安定させる作業にそこそこ慣れてきた</li></ul></li><li>構文解析:<ul><li>再帰下降パーサーを手書きできるようになった</li></ul></li></ul><h3 id="学び-データ構造"><a href="#学び-データ構造" class="headerlink" title="学び: データ構造"></a>学び: データ構造</h3><p>HSP3 で現実的に使えるデータ構造は基本的な型 (label/str/double/int) の配列ぐらいしかない。</p><p>COM オブジェクトやプラグインやモジュール変数を使うという手もあるが、HSP3Dish や Linux 版などでは実装されていない。移植性の問題だけでなく、上記4つの基本的な型以外は命令・関数の引数に指定したり関数の結果にできないなど、制限がある。</p><p>そのため、配列を工夫して使うほうがよさそうだ。</p><p>例えば、複数の配列を組み合わせて、オブジェクトの配列のようなものを作れる。つまり、複数の配列の i 番目の要素がオブジェクト i のフィールドであるということにすれば、これらの配列はオブジェクトの配列であるかのように扱える。また、要素番号 i をオブジェクトへの参照とみなせば、再帰的な構造も作れる。</p><p>これだけでインタプリタの実装に必要なデータ構造を十分に実現できる。</p><p>この方法では、オブジェクトの解放は自前で実装する必要がある。インタプリタなら GC は実装することになる (むしろ実装したい) のでその点は仕方ない。</p><p>そういうわけで上記の問題の解決策が分かった。</p><h2 id="negi-lang-の成功"><a href="#negi-lang-の成功" class="headerlink" title="negi-lang の成功(?)"></a>negi-lang の成功(?)</h2><p><a href="https://github.com/vain0x/negi-lang" target="_blank" rel="noopener">negi-lang</a> は、2019年2月になって再び書き始めた JavaScript っぽい自作言語のインタプリタ。</p><p>作業開始から9日目の時点で、整数の四則演算、ローカル変数、if文、while文、配列、クロージャ、外部関数、GC (配列のみ) あたりが実装できている。</p><p>外部関数というのは、呼び出したら HSP 側のスクリプトで何らかの処理が行われて、その結果が返ってくる、みたいな仕組みで動く関数。これがあれば HSP でできることがだいたいできるようになる。実際 mes や button などの命令を外部関数として登録してやることによって簡単な GUI アプリができることは確認した。</p><p>(オブジェクトがまだないので JavaScript っぽいというと語弊がある。構文は似ているが、アロー関数はない。)</p><p>negi-lang のコードはいまのところ十分に手を入れやすく、klac-lang のような泥沼ではない。他の機能を入れるのもおそらく困難ではない。</p><p>というわけで klac-lang の供養ができた。</p><h2 id="未解決問題"><a href="#未解決問題" class="headerlink" title="未解決問題"></a>未解決問題</h2><p>このインタプリタに使いみちがないという問題は解決できてない。</p><h2 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h2><ul><li><a href="https://github.com/honobonosun/linter-hsp3" target="_blank" rel="noopener">linter-hsp3</a> がとても便利だった<ul><li>特に HSP でもっともストレスフルな瞬間、「error 26 : パラメーター引数名は使用されています」を事前に教えてくれるので気分的に楽になる</li></ul></li><li>はじめ、Rust のように式の中に文を書けるような文法にしていたが、<code>break</code> などのジャンプ命令によってスタックの構造が壊れてしまうということを知った<ul><li>例えば <code>while (p()) { s += (if (q()) { break } else { 1 }) }</code> みたいな式だと、<code>+=</code> の左辺の <code>s</code> がスタックに乗った状態で <code>break</code> に到達してしまうので、ジャンプする前にそれをポップする必要がある。</li><li>レジスタマシンなら問題ない？</li></ul></li><li>enum で定義した定数をうっかり別の系統のと混ぜてしまうバグが、「定数値がいまは偶然同じだから動いてる」ような状態になってないかな？ と思って、定数値がすべて重複しないように変更してみたら、案の定そういうミスが見つかったということがあった <a href="https://github.com/vain0x/negi-lang/commit/8d668b95b8e5884bcac995f57e045d90fab14dee" target="_blank" rel="noopener">https://github.com/vain0x/negi-lang/commit/8d668b95b8e5884bcac995f57e045d90fab14dee</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HSP3 は BASIC 風の構文を持つスクリプト言語で、GUI プログラミングがやりやすいことに人気がある。私は10年ぐらい前に、どういうわけかその HSP3 でインタプリタを書いて失敗した。&lt;/p&gt;
&lt;p&gt;10年ほど経って問題の解決策が分かってきた感じがしたので、改めて
      
    
    </summary>
    
    
      <category term="言語処理系" scheme="http://vain0x.github.io/blog/tags/%E8%A8%80%E8%AA%9E%E5%87%A6%E7%90%86%E7%B3%BB/"/>
    
      <category term="HSP3" scheme="http://vain0x.github.io/blog/tags/HSP3/"/>
    
  </entry>
  
  <entry>
    <title>近況 2019-01-30</title>
    <link href="http://vain0x.github.io/blog/2019-01-30/diary/"/>
    <id>http://vain0x.github.io/blog/2019-01-30/diary/</id>
    <published>2019-01-30T11:07:49.000Z</published>
    <updated>2019-01-30T13:08:25.958Z</updated>
    
    <content type="html"><![CDATA[<p>今月の活動のまとめ</p><ul><li>前月分 <a href="https://vain0x.github.io/blog/2018-12-31/diary/">https://vain0x.github.io/blog/2018-12-31/diary/</a></li></ul><h2 id="LSP学習記の連載を書いた"><a href="#LSP学習記の連載を書いた" class="headerlink" title="LSP学習記の連載を書いた"></a>LSP学習記の連載を書いた</h2><ul><li>自作言語 <a href="https://github.com/vain0x/curage-lang" target="_blank" rel="noopener">curage-lang</a> の LSP サーバーを実装していくシリーズ</li><li>LSP (Language Server Protocol) は、いわゆるインテリセンス (ソースコードに警告を出したり入力補完をしたりするやつ) の実装をテキストエディターから分離するのに使える通信プロトコル</li><li>エディターの実装 (特に GUI) に全く触らなくてもインテリセンスが作れて最高<ul><li>JSON を送受信するだけだから、ユニットテストも書きやすい</li></ul></li><li>curage-lang はとてもミニで、let 文で変数を定義する、以外の機能はない</li><li>それでも LSP サーバーの実装の雰囲気は十分につかめた</li></ul><h4 id="LSP学習記-現時点での記事一覧"><a href="#LSP学習記-現時点での記事一覧" class="headerlink" title="LSP学習記: 現時点での記事一覧"></a>LSP学習記: 現時点での記事一覧</h4><ul><li><a href="https://qiita.com/vain0x/items/d050fe7c8b342ed2004e" target="_blank" rel="noopener">LSP学習記 #1</a><ul><li>LSP の基礎部分に触れ、極小の LSP サーバーを準備し、「エディター上にリアルタイムで警告を表示する」機能を作った</li></ul></li><li><a href="https://qiita.com/vain0x/items/490ae33ba3db3c829c13" target="_blank" rel="noopener">LSP学習記 #2 クラゲ言語の構文解析</a><ul><li>構文解析を行い、構文エラーがリアルタイムで出るようにした</li></ul></li><li><a href="https://qiita.com/vain0x/items/31252d77066505ce6117" target="_blank" rel="noopener">LSP学習記 #3 シンボルとハイライト</a><ul><li>ローカル変数定義の静的解析を行い、変数をハイライトする機能を実装した</li></ul></li><li><a href="https://qiita.com/vain0x/items/8414dca7425057f1bbd8" target="_blank" rel="noopener">LSP学習記 #4 シンボルのリネーム - Qiita</a><ul><li>名前の変更機能を実装した</li></ul></li></ul><h2 id="競技プログラミングの成績がよかった"><a href="#競技プログラミングの成績がよかった" class="headerlink" title="競技プログラミングの成績がよかった"></a>競技プログラミングの成績がよかった</h2><p>1年以上前から「そろそろ青」の水色だったが、ついに <strong>青</strong> になった。</p><ul><li>今月も週末は AtCoder に参加した</li><li><a href="https://note.mu/vain0x/n/n995face26f4c" target="_blank" rel="noopener">競プロ参戦記 #28 「白黒経路とカードゲーム」 | エイシング 2019 [ABCD]｜ベイン｜note</a><ul><li>D完</li></ul></li><li><a href="https://note.mu/vain0x/n/n3c2c2c425830" target="_blank" rel="noopener">競プロ参戦記 #29 「最小全域木」 | KEYENCE 2019 [ABCE]｜ベイン｜note</a><ul><li>ABC-E完</li></ul></li><li><a href="https://note.mu/vain0x/n/n78a0d99f0fb9" target="_blank" rel="noopener">競プロ参戦記 #30 「花壇とスシ」  | ABC 116｜ベイン｜note</a><ul><li>C完</li></ul></li><li><a href="https://note.mu/vain0x/n/nef874855fde5" target="_blank" rel="noopener">競プロ参戦記 #31 「料理 / 木の復元」 | 全国統一2019｜ベイン｜note</a><ul><li>D完</li></ul></li></ul><h2 id="競プロ用言語を作り始めた"><a href="#競プロ用言語を作り始めた" class="headerlink" title="競プロ用言語を作り始めた"></a>競プロ用言語を作り始めた</h2><p>picomet-lang <a href="https://github.com/vain0x/picomet-lang" target="_blank" rel="noopener">https://github.com/vain0x/picomet-lang</a></p><ul><li>精選10問こと <a href="https://atcoder.jp/contests/abs/tasks" target="_blank" rel="noopener">AtCoder Beginners Selection</a> を自作言語で解くプロジェクト</li><li>コンパイラにソースコードを埋め込んで提出、実行中にコンパイル→評価、という流れにする……つもりだった<ul><li>でもコンパイラをジャッジ側で実行する必要はない</li><li>手元で中間言語を生成してランタイムに埋め込めば十分</li></ul></li><li><a href="https://github.com/rui314/9cc" target="_blank" rel="noopener">9cc</a> や <a href="http://esumii.github.io/min-caml" target="_blank" rel="noopener">MinCaml</a> を参考にアセンブリ風の中間言語へのコンパイルを試みている<ul><li>C言語をターゲットにしている milone-lang ではやらなかった分野</li><li>関数の呼び出しがなかなか難しい</li></ul></li></ul><h2 id="ポートフォリオサイトを作った"><a href="#ポートフォリオサイトを作った" class="headerlink" title="ポートフォリオサイトを作った"></a>ポートフォリオサイトを作った</h2><p>vain0x’s Page <a href="https://vain0x.github.io">https://vain0x.github.io</a></p><ul><li>このドメインのルート、長いこと Hello! しか書かれてなかったページ</li><li>イチから作り直した</li><li>CSS は慣れてきたので手書きにした</li><li>背景に濃色のグラデーションと透過を使って手軽にそれっぽさを出した</li><li>HTML はテンプレートエンジンではなく、JSX 記法 + <a href="https://github.com/kriasoft/hyperapp-render" target="_blank" rel="noopener">hyperapp-render</a> で静的生成した</li><li>いまのところプロジェクト (knowbug や milone-lang) や連載記事の紹介を載せている</li></ul><h2 id="ブログにコメント欄を追加した"><a href="#ブログにコメント欄を追加した" class="headerlink" title="ブログにコメント欄を追加した"></a>ブログにコメント欄を追加した</h2><ul><li><a href="https://utteranc.es" target="_blank" rel="noopener">utterances</a></li><li>コメント欄を表示して、送信されたデータは GitHub issues に追加される、という仕組み</li><li>サーバーを用意しなくていいという利点</li><li>GitHub にサインインしないとコメントできないという欠点</li></ul><h2 id="ミローネ言語-詰まり中"><a href="#ミローネ言語-詰まり中" class="headerlink" title="ミローネ言語: 詰まり中"></a>ミローネ言語: 詰まり中</h2><p>milone-lang <a href="https://github.com/vain0x/milone-lang" target="_blank" rel="noopener">https://github.com/vain0x/milone-lang</a></p><ul><li>多相関数の実装が難しくて困ってる</li></ul><h2 id="ガルパ-リズムゲーム"><a href="#ガルパ-リズムゲーム" class="headerlink" title="ガルパ (リズムゲーム)"></a>ガルパ (リズムゲーム)</h2><ul><li>人差し指2本でプレイしていたが、右手の中指を含めて3本にした<ul><li>指の負担の分散、高難度の精度向上、という効果を期待</li><li>ノーツに叩く指をアサインする組み合わせが増加し、脳の処理負荷が重くなるので難しい</li><li>いまは慣れてきた</li></ul></li><li>左手の中指も使った4本打鍵も練習中</li><li>2nd Season 悪くない</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今月の活動のまとめ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前月分 &lt;a href=&quot;https://vain0x.github.io/blog/2018-12-31/diary/&quot;&gt;https://vain0x.github.io/blog/2018-12-31/diary/&lt;/a&gt;&lt;
      
    
    </summary>
    
    
      <category term="日記" scheme="http://vain0x.github.io/blog/tags/%E6%97%A5%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>LSP学習記 #4 シンボルのリネーム</title>
    <link href="http://vain0x.github.io/blog/2019-01-16/lsp-trial-04/"/>
    <id>http://vain0x.github.io/blog/2019-01-16/lsp-trial-04/</id>
    <published>2019-01-16T13:17:00.000Z</published>
    <updated>2019-02-26T13:35:05.934Z</updated>
    
    <content type="html"><![CDATA[<p>自作言語の LSP サーバーを作るプロジェクトの第4回です。今回はソースコードを変更する機能の例として、シンボルのリネームを実装してみました。</p><ul><li>初回: <a href="https://vain0x.github.io/blog/2019-01-05/lsp-trial-01/">LSP学習記 #1</a></li><li>前回: <a href="https://vain0x.github.io/blog/2019-01-10/lsp-trial-03/">LSP学習記 #3 シンボルとハイライト</a></li><li>今回のソースコード: <a href="https://github.com/vain0x/curage-lang/tree/v0.5.0" target="_blank" rel="noopener">curage-lang v0.5.0</a></li></ul><h2 id="名前の変更"><a href="#名前の変更" class="headerlink" title="名前の変更"></a>名前の変更</h2><p>変数などの名前を変更するとき、単純な文字列置換では「同名だが異なる変数」といったものまで巻き添えにしてしまいます。安全に変更するには、前回のようにシンボル情報を解析しておくほうがよいです。そういうわけで、LSP サーバーの機能に「名前の変更」があります。</p><p>具体的には、 LSP クライアントは <a href="https://microsoft.github.io/language-server-protocol/specification#textDocument_rename" target="_blank" rel="noopener">textDocument/rename リクエスト</a> で、どの位置にあるシンボルをどんな名前に変えるべきかという情報をサーバーに送信してくれます。</p><p>このとき、具体的なソースコードの変更点を生成してレスポンスすれば、名前の変更ができるようです。</p><ul><li>注: 前回と同様に、LSP クライアントからのリクエストをもらうには、サーバーの <code>capabilities</code> に <code>textDocument.renameProvider: true</code> の指定が必要です。</li></ul><h3 id="名前の変更-変更操作の表現"><a href="#名前の変更-変更操作の表現" class="headerlink" title="名前の変更: 変更操作の表現"></a>名前の変更: 変更操作の表現</h3><p>ソースコードに対する変更は <code>TextEdit</code> インターフェイスで定義されていて、「ある範囲の文字列を別の文字列で置換する」ような形式です。 <code>Array.splice</code> 方式。</p><p>例えば次の文字列の範囲 <code>[0, 4] .. [0, 5]</code> (<code>x</code> の部分) を文字列 “new_x” で置換する、みたいな感じです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let x be 1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let new_x be 1</span><br></pre></td></tr></table></figure><p>いまのクラゲ言語は1つのファイルにしかソースコードを書けませんが、一般には名前の変更は複数のファイルを変更することになります。<code>rename</code> レスポンスで返すべきオブジェクトは、 <code>WorkspaceEdit</code> というインターフェイスで定義されていて、ファイルの URI から変更操作へのマップのようなものです。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> WorkspaceEdit &#123;</span><br><span class="line">    <span class="comment">// URI から変更操作の配列へのマップ</span></span><br><span class="line">    changes?: &#123; [uri: <span class="built_in">string</span>]: TextEdit[]; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以下略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h2><p>実装は、前回作ったシンボルテーブルを利用すれば簡単です。</p><p>前回は「ドキュメントのハイライトする範囲」を計算しましたが、今回はそれを「名前の変更を適用する範囲」として使えばOK。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; definition, references &#125; = symbolDefinition <span class="comment">// ヒットテストで見つけたシンボル</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 変更操作の配列</span></span><br><span class="line"><span class="keyword">const</span> textEdits: TextEdit[] = []</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義の置換</span></span><br><span class="line">textEdits.push(&#123;</span><br><span class="line">  range: definition.range,</span><br><span class="line">  newText: newName,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> r of references) &#123;</span><br><span class="line">  <span class="comment">// 参照の置換</span></span><br><span class="line">  textEdits.push(&#123;</span><br><span class="line">    range: r.range,</span><br><span class="line">    newText: newName,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WorkspaceEdit インターフェイスに合うオブジェクトを作る</span></span><br><span class="line"><span class="keyword">const</span> changes = &#123; [uri]: textEdits &#125;</span><br><span class="line"><span class="keyword">return</span> &#123; changes &#125;</span><br></pre></td></tr></table></figure><ul><li>変更点: <a href="https://github.com/vain0x/curage-lang/commit/603b2c52fe19390a667c25710ad1bcf8af78aaba" target="_blank" rel="noopener">feat: Support symbol renaming</a></li></ul><h2 id="prepareRename"><a href="#prepareRename" class="headerlink" title="prepareRename"></a>prepareRename</h2><p><code>textDocument/prepareRename</code> リクエストという、 <code>rename</code> の前に送られてくるリクエストがあります。名前の変更ができない位置 (例えば let キーワードの上) では <code>prepareName</code> の結果として <code>null</code> を返すことで、名前の変更が不可能であることをクライアントに伝えられる……らしいんですが、実装してみても効果が見られなかったので詳細は略。</p><ul><li>変更点: <a href="https://github.com/vain0x/curage-lang/commit/e91697aed1edd1cd56be54a2c701112aed71e504" target="_blank" rel="noopener">feat: Support ‘prepareRename’</a></li></ul><h2 id="TextDocumentEdit"><a href="#TextDocumentEdit" class="headerlink" title="TextDocumentEdit"></a>TextDocumentEdit</h2><p>LSP の仕様をよく読むと <code>WorkspaceEdit.changes</code> ではなく <code>documentChanges</code> を使ったほうがよいみたいです。</p><p>LSP サーバーが処理をしている間にも、ドキュメントはユーザーによって絶え間なく変更されているので、同じドキュメントにも古いバージョンと新しいバージョンがあります。名前の変更がどのバージョンを処理したのかを指定すると、クライアント側が嬉しいらしいです。</p><p><code>WorkspaceEdit.documentChanges</code> には <code>TextDocumentEdit</code> (の配列) を指定しますが、これはドキュメントの URI だけでなくバージョンも指定した変更操作を表しています。</p><ul><li>変更点: <a href="https://github.com/vain0x/curage-lang/commit/a666135fe04e3345bcaef09bc80b8b269d24415f" target="_blank" rel="noopener">feat: Provide document version in response </a></li></ul><h2 id="注意-安全でない変更"><a href="#注意-安全でない変更" class="headerlink" title="注意: 安全でない変更"></a>注意: 安全でない変更</h2><p>今回の実装では、場合によってはコードの意味を変えてしまいます。例えば次のコードの <code>x</code> を <code>y</code> という名前に変えると、2つ目の <code>x</code> が途中に挟まってる <code>y</code> を指すものになってしまいます。これは本来ならユーザーに警告したほうがよいです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let x be 1</span><br><span class="line">let y be 2</span><br><span class="line">let _ be x</span><br></pre></td></tr></table></figure><h2 id="次回"><a href="#次回" class="headerlink" title="次回"></a>次回</h2><p>次回は未定です。そろそろ簡単な計算のできる言語にしつつ、入力補完やホバーあたりをやっていこうかと考えています。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自作言語の LSP サーバーを作るプロジェクトの第4回です。今回はソースコードを変更する機能の例として、シンボルのリネームを実装してみました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初回: &lt;a href=&quot;https://vain0x.github.io/blog/2019-01-0
      
    
    </summary>
    
    
      <category term="言語処理系" scheme="http://vain0x.github.io/blog/tags/%E8%A8%80%E8%AA%9E%E5%87%A6%E7%90%86%E7%B3%BB/"/>
    
      <category term="TypeScript" scheme="http://vain0x.github.io/blog/tags/TypeScript/"/>
    
      <category term="LanguageServerProtocol" scheme="http://vain0x.github.io/blog/tags/LanguageServerProtocol/"/>
    
      <category term="LSP学習記" scheme="http://vain0x.github.io/blog/tags/LSP%E5%AD%A6%E7%BF%92%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>LSP学習記 #3 シンボルとハイライト</title>
    <link href="http://vain0x.github.io/blog/2019-01-10/lsp-trial-03/"/>
    <id>http://vain0x.github.io/blog/2019-01-10/lsp-trial-03/</id>
    <published>2019-01-10T13:12:00.000Z</published>
    <updated>2019-02-26T13:37:35.337Z</updated>
    
    <content type="html"><![CDATA[<p>自作言語の LSP サーバーを作るプロジェクトの第3回です。今回はシンボルテーブルを作ってシンボルのハイライト機能を実装します。</p><ul><li>初回: <a href="https://vain0x.github.io/blog/2019-01-05/lsp-trial-01/">LSP学習記 #1</a></li><li>前回: <a href="https://vain0x.github.io/blog/2019-01-07/lsp-trial-02/">LSP学習記 #2 クラゲ言語の構文解析</a></li><li>今回のソースコード: <a href="https://github.com/vain0x/curage-lang/tree/v0.4.0" target="_blank" rel="noopener">curage-lang v0.4.0</a></li></ul><h2 id="let文とシャドーイング"><a href="#let文とシャドーイング" class="headerlink" title="let文とシャドーイング"></a>let文とシャドーイング</h2><p>前回構文を定義したように、 <strong>クラゲ言語</strong> (curage-lang) のプログラムは <code>let</code> 文の繰り返しです。</p><p>クラゲ言語の <code>let</code> はローカル変数を作るものですが、TypeScript の <code>let</code> とやや異なる性質を持つように定めます。その性質とは、「シャドーイング」です。例えば、次のコードを実行すると <code>y</code> の値は <code>2</code> になります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let x be 1</span><br><span class="line">let x be 2</span><br><span class="line">let y be x</span><br></pre></td></tr></table></figure><p>このコードは <code>x</code> という名前の変数を2つ定義します。2つ目の <code>x</code> が定義された時点で、1つ目の <code>x</code> を使える範囲が終了します。TypeScript でいうと次のような感じです。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">const</span> x = <span class="number">1</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">const</span> x = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">const</span> y = x;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>シャドーイングがあるといろいろ便利なんですが、今回はひとまず、連載の進行をスムーズにするために入れます。</p><h2 id="シンボルとハイライト"><a href="#シンボルとハイライト" class="headerlink" title="シンボルとハイライト"></a>シンボルとハイライト</h2><p>上記のクラゲ言語のコードで、<code>x</code> という名前は3回出現します。1回目と2回目が別の変数を指す一方で、2回目と3回目は同じ変数を指します。</p><p>「同じ変数を指しているかどうか」でグループ分けすると便利です。同じ変数を指す名前は、同じ <strong>シンボル</strong> であると呼ぶことにします。</p><p>どれとどれが同じシンボルなのか、分かりやすく表示されると嬉しいです。</p><p>おそらくこの用途を想定して、エディターにソースコードの一部をハイライトしてもらえる機能が LSP にあります。今回の主役、 <a href="https://microsoft.github.io/language-server-protocol/specification#textDocument_documentHighlight" target="_blank" rel="noopener"><code>textDocument/documentHighlight</code> リクエスト</a>  です。</p><p>LSP クライアントは、サーバーに <code>documentHighlight</code> リクエストを送ってハイライトすべき場所を尋ねます。LSP の上ではカーソルという概念は出現しませんが、少なくとも VSCode や Sublime Text はカーソルの位置を指定してこのリクエストを送ってくれるようです。</p><ul><li>注: <code>textDocument/documentHighlight</code> リクエストが来るのは LSP サーバーがこの機能に対応している場合のみです。<code>initialize</code> レスポンスに指定する <code>capabilities</code> に設定が必要です。(詳細は実際のコードを参照)</li></ul><p>言葉で説明してもアレなので、今回の動作例を先に貼ります:</p><p><img src="https://qiita-image-store.s3.amazonaws.com/0/74340/d9da9328-5a47-49b1-0a39-784fab38a091.png" alt=""></p><p>(カーソル上にある <code>x</code> と、同じ変数を指す <code>x</code> がすべてハイライトされているが、他の変数はハイライトされていない、という状況)</p><p>カーソル位置にある名前が指しているシンボルと同一のシンボルをハイライトさせる。これが今回の目標です。</p><h2 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h2><p>そういうわけで、ソースコード上の名前がどのシンボルに対応するのかを調べる処理を書きます。</p><p>クラゲ言語の構文をとてもシンプルにしているおかげで、実装もシンプルに済みます。</p><p>前回の構文解析で得られた <code>let</code> 文のリストを順にみていき、文中に出現している「名前」(トークン)の情報を記録していく、というのが大まかな流れです。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> statement of statements) &#123;</span><br><span class="line">  <span class="keyword">if</span> (statement.type === <span class="string">"let"</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; init, name &#125; = statement</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (init.type === <span class="string">"name"</span>) &#123;</span><br><span class="line">      referName(init)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (name.type === <span class="string">"name"</span>) &#123;</span><br><span class="line">      defineName(name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"NEVER"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ある名前が変数を参照している (= 式として出現している) のか、変数を定義している (= <code>be</code> の左辺に出現している) のか、というのを文脈から判別しています。</p><ul><li>余談: いまのクラゲ言語は非現実的なほど簡素ですが、仮にループ構文や足し算などがあったとしても、実装の基本的な考えは変わらないはずです。</li></ul><h3 id="実装-シンボルテーブルと環境"><a href="#実装-シンボルテーブルと環境" class="headerlink" title="実装: シンボルテーブルと環境"></a>実装: シンボルテーブルと環境</h3><p>シンボルが持つべき情報は何でしょうか。それがどこで定義されたのかと、どこで使われたのか、です。これをほぼそのまま型定義にしたのが、次の <code>SymbolDefinition</code> です:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SymbolDefinition &#123;</span><br><span class="line">  <span class="comment">/** このシンボルを定義したトークン */</span></span><br><span class="line">  definition: Token,</span><br><span class="line">  <span class="comment">/** シンボルを参照するトークンの集まり */</span></span><br><span class="line">  references: Token[],</span><br><span class="line">  <span class="comment">/** このシンボルの種類。いまは変数だけ */</span></span><br><span class="line">  <span class="keyword">type</span>: <span class="string">"var"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>もう1つ必要なものがあって、名前からシンボル定義へのマップ <code>environment</code> です。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> environment = <span class="keyword">new</span> Map&lt;<span class="built_in">string</span>, SymbolDefinition&gt;()</span><br></pre></td></tr></table></figure><p>何らかの変数を参照している名前をみつけたときに、それが実際に指しているシンボルを特定するのに使います。例えば次の処理、「式」として名前が出現したときの処理です:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> referName = <span class="function">(<span class="params">nameToken: Token</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> symbolDefinition = environment.get(nameToken.value)</span><br><span class="line">  <span class="keyword">if</span> (!symbolDefinition) <span class="keyword">return</span> <span class="comment">// ここで未定義変数の警告を出してもいい</span></span><br><span class="line"></span><br><span class="line">  symbolDefinition.references.push(nameToken)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一方で、変数として定義される名前をみつけたときは、環境に名前を追加します。ここで、同名の変数がすでに環境にあるときは「上書き」されますが、それがまさに冒頭に書いた「シャドーイング」の挙動なのでOKです。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> defineName = <span class="function">(<span class="params">nameToken: Token</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> definition: SymbolDefinition = &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"var"</span>,</span><br><span class="line">    definition: nameToken, <span class="comment">// 定義位置を記録</span></span><br><span class="line">    references: [],</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  symbolDefinitions.push(definition) <span class="comment">// 新しいシンボル</span></span><br><span class="line">  environment.set(nameToken.value, definition) <span class="comment">// 同名の変数は上書き</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>そして解析が完了したあと、最終的に環境は捨てて、シンボル定義のリスト (シンボルテーブル) を解析結果とします。解析結果は繰り返し使うので、 <code>SemanticModel</code> という名前のインターフェイスを定義しました。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123; statements, symbolDefinitions, diagnostics &#125; <span class="keyword">as</span> SemanticModel</span><br></pre></td></tr></table></figure><ul><li><p><a href="https://github.com/vain0x/curage-lang/commit/8dda6a9798fefd6cb4507615ae6f5fe05ff76068" target="_blank" rel="noopener">変更点まとめ</a></p></li><li><p>余談: 環境をマップとして定義するのではなく、単に新しいシンボルから順番に名前を調べて探す実装にしたほうが話が早かった気もします。</p></li></ul><h3 id="実装-位置とヒットテスト"><a href="#実装-位置とヒットテスト" class="headerlink" title="実装: 位置とヒットテスト"></a>実装: 位置とヒットテスト</h3><p><code>textDocument/documentHighlight</code> リクエストは、カーソルがある位置の変数の名前ではなく、カーソルの位置 (ソースコード上の位置) しか教えてくれません。その位置に何があるかはサーバー側で調べる必要があります。</p><p>カーソル上の位置にあるシンボルを調べる処理を、シンボルのヒットテストと呼ぶことにします。これはトークンの位置情報を使うと可能です。シンボル定義の <code>definition</code> や <code>references</code> のトークンのどれかがカーソルにかすっていたら、カーソル上にそのシンボルがあるということです。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hitTestSymbol = <span class="function">(<span class="params">semanticModel: SemanticModel, position: Position</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 範囲が指定位置にかすってるかどうか</span></span><br><span class="line">  <span class="keyword">const</span> touch = <span class="function">(<span class="params">range: Range</span>) =&gt;</span></span><br><span class="line">    comparePositions(range.start, position) &lt;= <span class="number">0</span></span><br><span class="line">    &amp;&amp; comparePositions(position, range.end) &lt;= <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> symbolDefinition of semanticModel.symbolDefinitions) &#123;</span><br><span class="line">    <span class="keyword">if</span> (touch(symbolDefinition.definition.range)) &#123;</span><br><span class="line">      <span class="keyword">return</span> symbolDefinition</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> r of symbolDefinition.references) &#123;</span><br><span class="line">      <span class="keyword">if</span> (touch(r.range)) &#123;</span><br><span class="line">        <span class="keyword">return</span> symbolDefinition</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>touch</code> 関数で使っている、位置の大小関係 (前後関係) の比較関数は次のとおりです。もし2つの位置の行番号が違えば、行番号の大小関係がそのまま前後関係です。逆に行番号が同じなら、列の大小関係が前後関係になります。要するに辞書式順序。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> comparePositions = <span class="function">(<span class="params">l: Position, r: Position</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (l.line !== r.line) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.sign(l.line - r.line)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.sign(l.character - r.character)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/vain0x/curage-lang/commit/1e7cc2d5e9e0431525fa50d60def089424a7e882" target="_blank" rel="noopener">変更点まとめ</a></li></ul><h3 id="実装-解析結果の保存"><a href="#実装-解析結果の保存" class="headerlink" title="実装: 解析結果の保存"></a>実装: 解析結果の保存</h3><p><code>textDocument/documentHighlight</code> リクエストは、解析対象のドキュメントを URI で指定します。ソースコード本体は、 <code>textDocument/didOpen</code> や <code>didChange</code> で通知されたときのものを記録して、参照することになります。</p><p>それらのタイミングで構文解析や上述の解析を行い、その結果をマップか何かに保存しましょう。</p><ul><li><a href="https://github.com/vain0x/curage-lang/commit/2c72aa786af0f0e649319a111ac1d17c927d6a33" target="_blank" rel="noopener">変更点まとめ</a></li><li>注: ファイルが閉じられたときの <code>didClose</code> イベントをフックして、マップからエントリーを削除することで、メモリーリークを防ぎます。</li></ul><h3 id="実装-ハイライトの生成"><a href="#実装-ハイライトの生成" class="headerlink" title="実装: ハイライトの生成"></a>実装: ハイライトの生成</h3><p>最後に <code>textDocument/documentHighlight</code> へのレスポンスを生成します。ドキュメントをハイライトすべき範囲と、そのハイライトの種類 (定義部分なのか参照部分なのか) というのを指定した <code>DocumentHighlight</code> のリストを作ればOK。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> DocumentHighlight &#123;</span><br><span class="line">    <span class="comment">/** ハイライトする範囲 */</span></span><br><span class="line">    range: Range;</span><br><span class="line">    <span class="comment">/** ハイライトの種類 (DocumentHighlightKind) */</span></span><br><span class="line">    kind?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これはヒットテストで得られたシンボル定義の <code>definition</code> と <code>references</code> を適当に変形すればOK。すでに手札は揃っているという感じですね。</p><p>要点だけ抜粋するとこんな感じ:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> highlights: DocumentHighlight[] = []</span><br><span class="line"><span class="keyword">const</span> &#123; definition, references &#125; = symbolDefinition <span class="comment">// ヒットしたシンボル定義</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義位置をハイライト</span></span><br><span class="line">highlights.push(&#123;</span><br><span class="line">  kind: DocumentHighlightKind.Write,</span><br><span class="line">  range: definition.range,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> r of references) &#123;</span><br><span class="line">  <span class="comment">// 参照位置をハイライト</span></span><br><span class="line">  highlights.push(&#123;</span><br><span class="line">    kind: DocumentHighlightKind.Read,</span><br><span class="line">    range: r.range,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> highlights</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/vain0x/curage-lang/commit/ac63c6b0e0f00c55096a48920e9957821b5a1549" target="_blank" rel="noopener">変更点まとめ</a></li></ul><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>冒頭に貼ったスクリーンショットが動作例になります。</p><h2 id="まとめと次回"><a href="#まとめと次回" class="headerlink" title="まとめと次回"></a>まとめと次回</h2><p>今回のポイントは以下の3点でした。</p><ul><li>シンボルを静的解析した</li><li>ヒットテストを実装した</li><li>格好よくハイライトできて嬉しい</li></ul><p>次は、用意したシンボルテーブルをさらに活用して、「名前の変更」を実装します。</p><ul><li>次回: <a href="https://vain0x.github.io/blog/2019-01-16/lsp-trial-04/">LSP学習記 #4 シンボルのリネーム</a></li></ul><h2 id="余談-シンボル参照の検索について"><a href="#余談-シンボル参照の検索について" class="headerlink" title="余談: シンボル参照の検索について"></a>余談: シンボル参照の検索について</h2><p>今回のシンボルテーブルを使うことで、 <code>textDocument/definition</code> (定義へのジャンプ) と <code>textDocument/references</code> (シンボルの検索) は簡単に実装できると思います。やってみましょう！</p><h2 id="余談-用語について"><a href="#余談-用語について" class="headerlink" title="余談: 用語について"></a>余談: 用語について</h2><ul><li>シンボル (symbol) やセマンティックモデル (semantic model) などの用語は Roslyn API (C#コンパイラ) を参考にしています。</li><li>ヒットテストは「マウスカーソルでクリックしたとき、それがボタンに当たったかどうかを判定する」といった状況で使う動詞なので、今回の用途は微妙かもしれません。</li><li>「環境」や「シンボルテーブル」といった概念は言語処理系の入門書によく出てきます。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自作言語の LSP サーバーを作るプロジェクトの第3回です。今回はシンボルテーブルを作ってシンボルのハイライト機能を実装します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初回: &lt;a href=&quot;https://vain0x.github.io/blog/2019-01-05/lsp-t
      
    
    </summary>
    
    
      <category term="言語処理系" scheme="http://vain0x.github.io/blog/tags/%E8%A8%80%E8%AA%9E%E5%87%A6%E7%90%86%E7%B3%BB/"/>
    
      <category term="TypeScript" scheme="http://vain0x.github.io/blog/tags/TypeScript/"/>
    
      <category term="LanguageServerProtocol" scheme="http://vain0x.github.io/blog/tags/LanguageServerProtocol/"/>
    
      <category term="LSP学習記" scheme="http://vain0x.github.io/blog/tags/LSP%E5%AD%A6%E7%BF%92%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>LSP学習記 #2 クラゲ言語の構文解析</title>
    <link href="http://vain0x.github.io/blog/2019-01-07/lsp-trial-02/"/>
    <id>http://vain0x.github.io/blog/2019-01-07/lsp-trial-02/</id>
    <published>2019-01-07T13:13:00.000Z</published>
    <updated>2019-02-26T13:35:05.934Z</updated>
    
    <content type="html"><![CDATA[<p>LSP サーバーを作っていくプロジェクトの第2回です。</p><ul><li>前回: <a href="https://vain0x.github.io/blog/2019-01-05/lsp-trial-01/">LSP学習記 #1</a></li></ul><p>前回は警告の表示までできるようになりました。しかしこの調子で自明な機能を足し続けても楽しくないので、新しいプログラミング言語を作ります。自作言語処理系とともに LSP サーバーを育てていく予定です。</p><ul><li>今回のソースコード: <a href="https://github.com/vain0x/curage-lang/tree/v0.3.0" target="_blank" rel="noopener">curage-lang v0.3.0</a></li></ul><h2 id="構文"><a href="#構文" class="headerlink" title="構文"></a>構文</h2><p><strong>クラゲ言語</strong> (curage-lang) の構文は、なるべく解析が楽になるように決めました。そのため、記号ではなくキーワードを多用したり、改行が文の区切りだったりします。</p><p>以下のとおりです:</p><ul><li>プログラムは文の並び</li><li>文は改行区切り</li><li>文は <code>let</code> 文のみ<ul><li>分岐などは後で追加 (予定)</li></ul></li><li>式は整数または名前<ul><li>足し算などは後で追加 (予定)</li></ul></li></ul><p>let文の凡例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let 名前 be 式</span><br></pre></td></tr></table></figure><p>プログラムの例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let x be 1</span><br><span class="line">let y be x</span><br></pre></td></tr></table></figure><h2 id="字句解析"><a href="#字句解析" class="headerlink" title="字句解析"></a>字句解析</h2><p>ソースコードが文字列のままでは扱いにくいです。そこで、ソースコードを「トークン」のリストに分解します。トークンというのは、単語や数値、記号などのことです。</p><ul><li><code>let x be 1</code> → <code>&quot;let&quot;, &quot;x&quot;, &quot;be&quot;, &quot;1&quot;</code></li></ul><p>クラゲ言語では、スペースは重要じゃないのでトークンではないことにします。</p><p>一方、改行はトークンにします。「文の終わり」として構文上、重要だからです。実際には、ファイル末尾に改行がないケースに備えて <strong>文の終わり</strong> に特殊なトークンを自動挿入するようにします。</p><h3 id="字句解析-実装"><a href="#字句解析-実装" class="headerlink" title="字句解析: 実装"></a>字句解析: 実装</h3><p>ソースコードを行ごとに分解した後、その行を正規表現で分解する、という方針にしました。これは正規表現の <code>exec</code> メソッドを使うと簡単です。 JavaScript の新機能である配列の分割代入と一緒に使うと簡潔に書けます。</p><ul><li><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec" target="_blank" rel="noopener">RegExp.prototype.exec() | MDN</a></li><li><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noopener">分割代入 | MDN</a></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> source = <span class="string">"let x be 1\nlet y be x\n"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// スペース、整数、名前、あるいは「解釈できない任意の文字」のどれかにマッチ</span></span><br><span class="line">    <span class="keyword">const</span> tokenRegexp = <span class="regexp">/( +)|([+-]?[0-9]+\b)|([a-zA-Z0-9_]+\b)|(.)/g</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 行ごとに分解</span></span><br><span class="line">    <span class="keyword">const</span> lines = source.split(<span class="regexp">/\r\n|\n/</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> line = <span class="number">0</span>; line &lt; lines.length; line++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (lines[line].trim() === <span class="string">""</span>) <span class="keyword">continue</span> <span class="comment">// 空行は無視</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 次のマッチを探す</span></span><br><span class="line">            <span class="keyword">const</span> match = tokenRegexp.exec(lines[line])</span><br><span class="line"></span><br><span class="line">            <span class="comment">// マッチしなければ (= 行末に達したら) 終わり</span></span><br><span class="line">            <span class="keyword">if</span> (!match) <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 各変数には各グループにマッチした文字列が入る</span></span><br><span class="line">            <span class="comment">// どれか1つ以外は undefined</span></span><br><span class="line">            <span class="keyword">const</span> [__, space, int, name, invalid] = match</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (space) <span class="keyword">continue</span> <span class="comment">// スペースは無視</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (invalid) <span class="built_in">console</span>.warn(<span class="string">"invalid: "</span> + invalid)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (int) <span class="built_in">console</span>.log(<span class="string">"int: "</span> + int)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (name) &#123;</span><br><span class="line">                <span class="keyword">if</span> (name === <span class="string">"let"</span> || name === <span class="string">"be"</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(name)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"name: "</span> + name)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"eol"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出力:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let</span><br><span class="line">name: x</span><br><span class="line">be</span><br><span class="line">int: 1</span><br><span class="line">eol</span><br><span class="line">let</span><br><span class="line">name: y</span><br><span class="line">be</span><br><span class="line">name: x</span><br><span class="line">eol</span><br></pre></td></tr></table></figure><ul><li>メモ: 解釈できない文字がソースコード上にあった場合に備えて <code>.</code> にマッチするようにしました。解釈できない文字は次の工程でエラーになります。このパターンがないと、解釈できない文字を見落としてしまいます。</li></ul><h3 id="字句解析-位置情報"><a href="#字句解析-位置情報" class="headerlink" title="字句解析: 位置情報"></a>字句解析: 位置情報</h3><p>前回見たとおり、ソースコードに警告を出すには警告範囲の指定が必要でした。そのため、字句解析する際に、「そのトークンがどの位置にあるか」を記録しておくことにします。</p><p>トークンには文字列の他に、種類 (int/name/etc.) と範囲を持たせます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> TokenType =</span><br><span class="line">  | <span class="string">"int"</span> | <span class="string">"name"</span> | <span class="string">"let"</span> | <span class="string">"be"</span> | <span class="string">"eol"</span> | <span class="string">"invalid"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Token &#123;</span><br><span class="line">  <span class="keyword">type</span>: TokenType,</span><br><span class="line">  value: <span class="built_in">string</span>,</span><br><span class="line">  range: Range,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Range</code> は LSP で定義されているインターフェイスです。「何行目何列目」から「何行目何列目」まで、というかたちでテキストの範囲を表します。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// テキスト上の範囲</span></span><br><span class="line"><span class="keyword">interface</span> Range &#123;</span><br><span class="line">    start: Position,</span><br><span class="line">    end: Position,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// テキスト上の位置</span></span><br><span class="line"><span class="keyword">interface</span> Position &#123;</span><br><span class="line">    line: <span class="built_in">number</span>,</span><br><span class="line">    character: <span class="built_in">number</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記の解析処理を変更して、トークンを <code>console.log</code> するのではなくリスト <code>Token[]</code> にまとめて返すようにしたのが以下です:</p><p><a href="https://github.com/vain0x/curage-lang/blob/v0.3.0/lsp/src/curage-server.ts#L121-L189" target="_blank" rel="noopener">tokenize 関数の実装</a></p><h2 id="構文解析"><a href="#構文解析" class="headerlink" title="構文解析"></a>構文解析</h2><p>次に構文解析です。この工程では、トークンのリストを解析して、ソースコードが構文的に正しいかを検査します。構文的に誤りがあったら警告を出します。</p><p>クラゲ言語の文法なら、トークンのリストが let 文の繰り返し、つまり「let, 名前, be, 式, 改行」の繰り返しになっていればOK。</p><p>逆に <code>let a</code> で文が途切れてたり、 <code>let 3 be 5</code> のようにトークンの種類がおかしかったらダメ。</p><p>重要なのは、 <strong>誤っている部分があってもパースを止めない</strong> ことです。</p><ul><li>未完成のミニ言語処理系は構文エラーを検出すると異常終了しがちですが、LSP サーバーには構文エラーをクライアントに報告してほしいので、終了させてはダメです。</li><li>実用上、ドキュメント内のなるべく多くの構文エラーを一斉に指摘してくれたほうが便利です。</li></ul><p>今回は「エラーを見つけたら次の改行までスキップする」ことにします。これで複数の行のエラーを同時に検出できます。</p><h3 id="構文解析-実装"><a href="#構文解析-実装" class="headerlink" title="構文解析: 実装"></a>構文解析: 実装</h3><p>構文解析の実装を考えます。トークンを前から見ていくのでトークンの位置 <code>i</code> を変数として持ちます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// トークンの位置</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 検出した diagnostic のリスト</span></span><br><span class="line"><span class="keyword">const</span> diagnostics: Diagnostic[] = []</span><br></pre></td></tr></table></figure><p>トップダウンに見ていくと、構文解析の全体としてはトークンリスト上のループです。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (i &lt; tokens.length) &#123;</span><br><span class="line">  parseLetStatement()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>let</code> 文をパースする方法は、トークンが文法で指定された順序で現れるかどうか、地道に調べます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parseLetStatement = (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (tokens[i].type !== <span class="string">"let"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> warn(<span class="string">"Expected 'let'."</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  i++</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (tokens[i].type !== <span class="string">"name"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> warn(<span class="string">"Expected a name."</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  i++</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (tokens[i].type !== <span class="string">"be"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> warn(<span class="string">"Expected 'be'."</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  i++</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!tryParseExpression()) &#123;</span><br><span class="line">    <span class="keyword">return</span> warn(<span class="string">"Expected an expression."</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (tokens[i].type !== <span class="string">"eol"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> warn(<span class="string">"Expected an end of line."</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  i++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>式の解析は、いまは簡単です。トークンが整数か名前ならOK。</p><ul><li>足し算や掛け算を式として認めると複雑になります。</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isAtomicExpression = <span class="function">(<span class="params">token: Token</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> token.type === <span class="string">"int"</span> || token.type === <span class="string">"name"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tryParseExpression = (): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!isAtomicExpression(tokens[i])) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  i++</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>誤りを見つけたときは、前述の通り行を読み飛ばします。行を読み飛ばして警告を出す関数 <code>warn</code> を使っています。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> warn = <span class="function">(<span class="params">message: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; range &#125; = skipLine()</span><br><span class="line">  diagnostics.push(&#123;</span><br><span class="line">    severity: DiagnosticSeverity.Warning,</span><br><span class="line">    message,</span><br><span class="line">    range,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行の読み飛ばしの処理がややこしいですが、トークンのリストの区間を考えます。区間の末尾が改行になるかトークンのリストの末尾に達するまで、区間を広げていくイメージです。最後に区間の末尾 (改行の次) にジャンプします。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> skipLine = (): &#123; range: Range &#125; =&gt; &#123;</span><br><span class="line">  <span class="comment">// 区間の開始点</span></span><br><span class="line">  <span class="keyword">const</span> l = i</span><br><span class="line">  <span class="keyword">if</span> (l &gt;= tokens.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; range: tokens[tokens.length - <span class="number">1</span>].range &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 区間の終わり (r 番目は含まないので r-1 番目が最後のトークン)</span></span><br><span class="line">  <span class="keyword">let</span> r = l + <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> (r &lt; tokens.length &amp;&amp; tokens[r - <span class="number">1</span>].type !== <span class="string">"eol"</span>) &#123;</span><br><span class="line">    r++</span><br><span class="line">  &#125;</span><br><span class="line">  assert.ok(l &lt; r &amp;&amp; (r &gt;= tokens.length || tokens[r - <span class="number">1</span>].type === <span class="string">"eol"</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> range = &#123;</span><br><span class="line">    start: tokens[l].range.start,</span><br><span class="line">    end: tokens[r - <span class="number">1</span>].range.end,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  i = r</span><br><span class="line">  <span class="keyword">return</span> &#123; range &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>区間のイメージはこんな感じ (カッコが区間を表す):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let a [ 2 eol ]</span><br><span class="line">      ^ Expected &apos;be&apos;</span><br><span class="line">let ..</span><br></pre></td></tr></table></figure><p>これで構文解析ができました。</p><p>前回作った検証処理をこの構文解析で差し替えれば、クラゲ言語の LSP サーバーができます。</p><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>Sublime Text 3 での動作例です:</p><p><img src="https://qiita-image-store.s3.amazonaws.com/0/74340/9b92693c-b6e2-7d04-d097-7e2f1d84a2bf.png" alt=""></p><h2 id="まとめと次回"><a href="#まとめと次回" class="headerlink" title="まとめと次回"></a>まとめと次回</h2><p>今回のポイントは以下の3点でした。</p><ul><li><code>exec</code> と分割代入は便利</li><li>位置情報は必須</li><li>エラーからの復帰は重要</li></ul><p>次はソースコードの振る舞いに踏み込んだ静的解析を行い、シンボル参照のハイライトができるようにします。</p><ul><li>次回: <a href="https://vain0x.github.io/blog/2019-01-10/lsp-trial-03/">LSP学習記 #3 シンボルとハイライト</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;LSP サーバーを作っていくプロジェクトの第2回です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前回: &lt;a href=&quot;https://vain0x.github.io/blog/2019-01-05/lsp-trial-01/&quot;&gt;LSP学習記 #1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="言語処理系" scheme="http://vain0x.github.io/blog/tags/%E8%A8%80%E8%AA%9E%E5%87%A6%E7%90%86%E7%B3%BB/"/>
    
      <category term="TypeScript" scheme="http://vain0x.github.io/blog/tags/TypeScript/"/>
    
      <category term="LanguageServerProtocol" scheme="http://vain0x.github.io/blog/tags/LanguageServerProtocol/"/>
    
      <category term="LSP学習記" scheme="http://vain0x.github.io/blog/tags/LSP%E5%AD%A6%E7%BF%92%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>LSP学習記 #1</title>
    <link href="http://vain0x.github.io/blog/2019-01-05/lsp-trial-01/"/>
    <id>http://vain0x.github.io/blog/2019-01-05/lsp-trial-01/</id>
    <published>2019-01-05T14:52:00.000Z</published>
    <updated>2019-02-26T13:35:05.934Z</updated>
    
    <content type="html"><![CDATA[<p>LSP サーバーの実装の練習をしています。この記事は勉強ノートとして、調査事項をまとめつつ、成果物を作成した手順を解説します。</p><p>第1回では LSP の基礎部分に触れ、極小の LSP サーバーを準備し、「エディター上にリアルタイムで警告を表示する」機能を作ります。</p><h2 id="おことわり"><a href="#おことわり" class="headerlink" title="おことわり"></a>おことわり</h2><p>読者には Node.js と TypeScript の基本的な知識を前提とします。</p><p>若干解説調の文章になってしまっていますが、筆者は詳しいわけではないのでご了承ください。</p><h2 id="LSP-とは"><a href="#LSP-とは" class="headerlink" title="LSP とは"></a>LSP とは</h2><p>LSP = Language Server Protocol</p><p>すごく雑に利点をいうと、いわゆるインテリセンス (ソースコードに警告を出したり入力補完をしたりするやつ) の実装をテキストエディターから分離するのに使えます。</p><p>もう少し詳しくは、以下の記事を参考:</p><ul><li><a href="https://microsoft.github.io/language-server-protocol/overview" target="_blank" rel="noopener">Overview</a><ul><li>公式の概要 (英語)</li></ul></li><li><a href="https://qiita.com/atsushieno/items/ce31df9bd88e98eec5c4" target="_blank" rel="noopener">language server protocolについて (前編) - Qiita</a><ul><li>執筆時点で後編はないみたいです</li></ul></li><li><a href="https://qiita.com/himanoa/items/04a105cc9615e85ad420" target="_blank" rel="noopener">LanguageServerProtocol(LSP)のススメ - Qiita</a><ul><li>動作例の GIF があって分かりやすいです</li></ul></li></ul><p>VSCode などのエディターが「LSP クライアント」です。一方で言語固有の機能を提供するほうが「LSP サーバー」になります。</p><h2 id="公式のサンプル"><a href="#公式のサンプル" class="headerlink" title="公式のサンプル"></a>公式のサンプル</h2><p>Microsoft のリポジトリに VSCode の拡張機能のサンプル集があります。そのなかに LSP がらみのものが3つあります。次の lsp-sample がもっとも単純です。</p><p><a href="https://github.com/Microsoft/vscode-extension-samples/tree/515a928615aaab84ae7f66a38e4346db84464fcb/lsp-sample" target="_blank" rel="noopener">Microsoft/vscode-extension-samples/lsp-sample</a></p><p>このリポジトリに関するチュートリアル (英語) があります:</p><ul><li><a href="https://code.visualstudio.com/api/language-extensions/language-server-extension-guide" target="_blank" rel="noopener">Language Server Extension Guide | Visual Studio Code Extension API</a></li></ul><p>次の3つのファイルに注目して中身をみていきます。</p><ul><li><code>package.json</code><ul><li>パッケージの依存関係やビルドスクリプトだけでなく、VSCode の拡張機能に対するさまざまな設定を含んでいる</li></ul></li><li><code>client/src/extension.ts</code><ul><li>VSCode の拡張機能のエントリーポイント</li></ul></li><li><code>server/src/server.ts</code><ul><li>LSP サーバーの実装</li></ul></li></ul><h3 id="サンプル-サンプル言語サーバーの機能"><a href="#サンプル-サンプル言語サーバーの機能" class="headerlink" title="サンプル: サンプル言語サーバーの機能"></a>サンプル: サンプル言語サーバーの機能</h3><p>lsp-sample の LSP サーバーは、テキストファイルの編集時に2つの機能を提供するものです。</p><ul><li>ドキュメントの検証<ul><li>大文字で書かれた単語を警告として報告する</li></ul></li><li>入力補完<ul><li>“JavaScript” “TypeScript” を入力補完候補に出す</li></ul></li></ul><p>これらの機能の実装は <code>server.ts</code> にあって、VSCode (LSP クライアント) から送られてきたメッセージに応答するという流れになっています。</p><h3 id="サンプル-サンプル言語サーバーの起動"><a href="#サンプル-サンプル言語サーバーの起動" class="headerlink" title="サンプル: サンプル言語サーバーの起動"></a>サンプル: サンプル言語サーバーの起動</h3><p>VSCode にこの拡張機能をインストールした状態でプレインテキスト (txt など) を開くと、拡張機能が読み込まれます。</p><p>ここでプレインテキストに反応しているのは <code>package.json</code> の <code>activationEvents</code> (拡張機能を開始する基準のイベント) に <code>onLanguage:plaintext</code> と書かれているからのようです。</p><ul><li><a href="https://code.visualstudio.com/api/get-started/extension-anatomy" target="_blank" rel="noopener">Extension Anatomy | Visual Studio Code Extension API</a></li></ul><p>拡張機能が読み込まれると <code>extension.ts</code> の <code>activate</code> 関数が呼ばれます。これは <code>vscode-languageclient</code> パッケージの機能を使って、LSP クライアントを実行しています。ここで LSP サーバー (<code>server.ts</code>) が新しいプロセスとして起動されているようです。</p><p>これで無事に通信が確立します。ユーザーの操作に応じて、クライアントがサーバーに必要な処理の要求を発行して、サーバーが応答する、というのが繰り返される。めでたし。</p><h2 id="LSP-サーバーをイチから書く"><a href="#LSP-サーバーをイチから書く" class="headerlink" title="LSP サーバーをイチから書く"></a>LSP サーバーをイチから書く</h2><p>さて、いま作っている最小限の LSP サーバー (もどき) がこちらです:</p><p><strong><a href="https://github.com/vain0x/curage-lang/tree/v0.1.0" target="_blank" rel="noopener">curage-lang v0.1.0</a></strong></p><p>lsp-sample との違いは主に3点です。</p><p>1つ目は、 LSP サーバーの実装に <code>vscode-languageserver</code> パッケージを使っていないこと。</p><p>このパッケージを使うと手軽に LSP サーバーが作れて便利そうですが、今回は使いません。後々 Node.js を使わずに言語サーバーを実装したいので、その練習のためです。</p><p>2つ目は、 LSP クライアントとサーバーの接続に標準入出力を使っていること。</p><p><code>lsp/src/extension.ts</code> の一部が異なります。 lsp-sample では、 LSP サーバーが Node.js で動いてることを前提とする設定で、LSP クライアントを起動しているようです。curage-lang lsp は、標準入出力を使ってサーバーと接続する設定に変えています。これにより、サーバーが Node.js 上で動いてなくてもよくなります。</p><p>3つ目は、サーバーとクライアントのパッケージを分けていないこと。分かれているとビルドスクリプト等が複雑化するため。</p><ul><li><code>package.json</code> の中身を調査するためにリポジトリ自体もイチから始めてます。いま思うと回り道だった。lsp-sample から始めたほうがいいです。</li></ul><h2 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h2><p>lsp-sample はここまでにして、自作 LSP サーバーに実装する処理をみていきます。参考:</p><ul><li>Language Server Protocol の公式の仕様: <a href="https://microsoft.github.io/language-server-protocol/specification" target="_blank" rel="noopener">Specification</a></li><li>JSON RPC 2.0 の公式の仕様: <a href="https://www.jsonrpc.org/specification" target="_blank" rel="noopener">JSON-RPC 2.0 Specification</a></li></ul><h3 id="実装-メッセージの受け取り"><a href="#実装-メッセージの受け取り" class="headerlink" title="実装: メッセージの受け取り"></a>実装: メッセージの受け取り</h3><p>LSP クライアントからサーバーへのメッセージとして、以下のような文字列が送られます。(改行は <code>\r\n</code>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Content-Length: 88</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;jsonrpc&quot;: &quot;2.0&quot;,</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;method&quot;: &quot;shutdown&quot;,</span><br><span class="line">    &quot;params&quot;: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>フォーマットは HTTP と似ています。空行までがヘッダーです。 <code>Content-Length</code> ヘッダーは必須で、ボディーの長さ (バイト単位) が指定されます。この例では、後半の JSON がボディーです。</p><p>この文字列は、今回はサーバーのプロセスの標準入力に送られてきます。標準入力を受け取るには <code>process.stdin</code> の <code>data</code> イベントを監視して、送られてくるデータをバッファーにためていけばいいです。</p><ul><li>公式のサンプルを見ると <code>readable</code> イベントと <code>read</code> メソッドを使ってました: <a href="https://nodejs.org/api/process.html#process_process_stdin" target="_blank" rel="noopener">Process | Node.js v11.6.0 Documentation</a></li></ul><p>バッファーがたまったらメッセージ単位で切り分けます。これは単純な文字列処理なので詳細は略。</p><ul><li>なお LSP のヘッダーは <code>Content-Length</code> 以外にもありますが、ここでは未実装にします。また、エラーが起こったときは JSON RPC の仕様にのっとってエラー情報を返送する必要がありますが、これも後回しにします。<ul><li>このあたり curage-lang lsp は未熟なので、まだ LSP サーバー “もどき” を名乗ったほうがいいかも。</li></ul></li></ul><p>サーバーからクライアントに送信するメッセージも同様の形式です。</p><h3 id="実装-通信の開始時"><a href="#実装-通信の開始時" class="headerlink" title="実装: 通信の開始時"></a>実装: 通信の開始時</h3><p>通常、クライアントから最初に送られるメッセージは <a href="https://microsoft.github.io/language-server-protocol/specification#initialize" target="_blank" rel="noopener">initialize リクエスト</a> です。</p><p>リクエストのパラメーター (params) として、さまざまな情報が渡されます。いまは必要なさそうなので略。</p><p>JSON RPC ではリクエストに対してレスポンスを返す必要があります。</p><p>initialize へのレスポンスに載せるデータ (result) は <code>InitializeResult</code> インターフェイスで定義されています。ここには LSP サーバーがどの機能を実装しているか (capabilities) を指定します。いまは何も実装できてないので <code>{}</code> 。</p><p>例えば initialize リクエストがこれなら (実際はかなり長い)、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Content-Length: 92</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;jsonrpc&quot;: &quot;2.0&quot;,</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;method&quot;: &quot;initialize&quot;,</span><br><span class="line">    &quot;params&quot;: &#123; /* 略 */ &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>initialize レスポンスはこう:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Content-Length: 75</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;jsonrpc&quot;: &quot;2.0&quot;,</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;result&quot;: &#123; &quot;capabilities&quot;: &#123;&#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注: レスポンスに method を書かなくていいのは id の値から分かるからだと思います。</li></ul><p>この次にクライアントから <code>initialized</code> 通知が来ます。いまは無視してOK。</p><p>通知 (notification) はリクエストとは違って、レスポンスを返さなくていいメッセージです。</p><h3 id="実装-通信の終了時"><a href="#実装-通信の終了時" class="headerlink" title="実装: 通信の終了時"></a>実装: 通信の終了時</h3><p>通信を終了するには、クライアントがサーバーに <code>shutdown</code> リクエストを送ります。この時点ではまだサーバーは終了しません。クライアントが <code>exit</code> 通知をサーバーに送ったら正常終了です。</p><h3 id="実装-ソースコードの検証"><a href="#実装-ソースコードの検証" class="headerlink" title="実装: ソースコードの検証"></a>実装: ソースコードの検証</h3><p>開始して終了するだけのサーバーができました。そろそろ機能を載せます。</p><p>ソースコードが次の文字列と一致しなければ、一致しない部分に警告を出す、という検証機能です。ハローワールドしか書けないプログラミング言語！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print &quot;hello, world!&quot;</span><br></pre></td></tr></table></figure><ul><li>変更点: <a href="https://github.com/vain0x/curage-lang/commit/2c463d3bc83a8bcff14782d9ae49cf8db4f9acd5" target="_blank" rel="noopener">feat: Trivial source code validation</a></li><li><a href="https://github.com/vain0x/curage-lang/tree/v0.2.0" target="_blank" rel="noopener">変更後のリポジトリ</a></li></ul><p>クライアントで編集されているファイルの情報を得るために、 <a href="https://microsoft.github.io/language-server-protocol/specification#initialize" target="_blank" rel="noopener">initialize レスポンス</a> の <code>capabilities</code> に <code>textDocumentSync</code> オプションを追加しました。これがあると、LSP の仕様として、クライアントから以下の通知を送ってもらえることになってます。(ここでめっちゃ詰まりました。)</p><ul><li><a href="https://microsoft.github.io/language-server-protocol/specification#textDocument_didOpen" target="_blank" rel="noopener"><code>textDocument/didOpen</code> 通知</a>: ファイルが開かれた</li><li><code>textDocument/didClose</code> 通知: ファイルが閉じた</li><li><p><code>textDocument/didChange</code> 通知: ファイルが変更された</p></li><li><p>注: これはすべてのクライアントが実装する機能とされているので、 initialize リクエストの capabilities (クライアントがどの機能に対応しているか) を読まずに使っていいです。</p></li><li>注: ファイルの URI が送られてきますが、これを使ってファイルにアクセスするというものではなく、ファイルを区別するための識別子です。</li></ul><p>こうしてファイルが開かれたり変更されるたびにファイルの中身が送られてくるようになったので、検証ができます。</p><p>LSP では警告やエラーをまとめて diagnostic と呼び、その種類を severity と呼んでます。diagnostic の範囲は、行番号と列番号を使って指定します。例えば 0 行目 i 列目の文字に問題があるときの警告はこんな感じです:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(&#123;</span><br><span class="line">    message: <span class="string">`Expected '<span class="subst">$&#123;expected[i]&#125;</span>'.`</span>,</span><br><span class="line">    severity: DiagnosticSeverity.Warning,</span><br><span class="line">    range: &#123;</span><br><span class="line">        start: &#123; line: <span class="number">0</span>, character: i &#125;,</span><br><span class="line">        end: &#123; line: <span class="number">0</span>, character: i + <span class="number">1</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>diagnostics の配列を作って、 <a href="https://microsoft.github.io/language-server-protocol/specification#textDocument_publishDiagnostics" target="_blank" rel="noopener">textDocumet/publishDiagnostics 通知</a> を送ります。</p><ul><li>注: この通知はドキュメント内の diagnostic をすべて置き換えます。</li></ul><p>検証処理の実装は、1文字ずつ比較するだけなので略。</p><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><h3 id="動作確認-VSCode"><a href="#動作確認-VSCode" class="headerlink" title="動作確認: VSCode"></a>動作確認: VSCode</h3><p>VSCode は開発中の拡張機能をデバッグできます。</p><ul><li>注: <code>.vscode/launch.json</code> に設定があります。詳細は分かりません。</li></ul><p>なんにせよ F5 を押すと VSCode が起動して、ちゃんと LSP サーバーが動きます。めでたし。</p><p><img src="https://qiita-image-store.s3.amazonaws.com/0/74340/38f57697-5ace-02c9-a8b4-e7831b7a0c54.png" alt=""></p><p>(VSCode で curage-lang lsp v0.2.0 が動いている様子)</p><h3 id="動作確認-Sublime-Text-3"><a href="#動作確認-Sublime-Text-3" class="headerlink" title="動作確認: Sublime Text 3"></a>動作確認: Sublime Text 3</h3><p>せっかくなので別の LSP クライアントでも試してみましょう。Sublime Text 3 でやってみます。</p><p>駆け足で手順だけ書くと:</p><ul><li><a href="https://www.sublimetext.com/" target="_blank" rel="noopener">Sublime Text 3 をインストールする</a> (無期限に無償で使えます)</li><li><a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">Package Control をインストールする</a></li><li>Package Control で “LSP” をインストールする</li><li>LSP Settings で <a href="https://github.com/tomv564/LSP#configuration" target="_blank" rel="noopener">LSP クライアントの設定を書く</a><ul><li><code>out/server.js</code> が起動されるようにコマンドを指定しておく。</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"clients"</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"curage"</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"command"</span>:</span><br><span class="line">            [</span><br><span class="line">                <span class="string">"node"</span>,</span><br><span class="line">                <span class="string">"&lt;略&gt;/curage-lang/lsp/out/server.js"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"scopes"</span>: [<span class="string">"text.plain"</span>],</span><br><span class="line">            <span class="attr">"syntaxes"</span>: [],</span><br><span class="line">            <span class="attr">"languageId"</span>: <span class="string">"plaintext"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注: この設定だとあらゆるテキストファイルに関して警告を出してしまうので、何か間違っていそう。</li></ul><p>動いている様子はだいたい同じです。</p><h2 id="まとめと次回"><a href="#まとめと次回" class="headerlink" title="まとめと次回"></a>まとめと次回</h2><p>今回のポイントは以下の3点でした。</p><ul><li>LSP ではクライアントとサーバーがリクエストとレスポンスを投げ合う (ときどき通知)</li><li>クライアントの通知を受け取れた / クライアントに通知を送れた</li><li>自作 LSP サーバーが任意のエディタで動いてて楽しい</li></ul><p>次はもっとプログラミング言語らしいものを検証して、構文エラーの警告を出せるようにします。そのあと、変数のリネームやシンボル参照の検索などをやっていきたいです。</p><ul><li>次回: <a href="https://vain0x.github.io/blog/2019-01-07/lsp-trial-02/">LSP学習記 #2 クラゲ言語の構文解析</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;LSP サーバーの実装の練習をしています。この記事は勉強ノートとして、調査事項をまとめつつ、成果物を作成した手順を解説します。&lt;/p&gt;
&lt;p&gt;第1回では LSP の基礎部分に触れ、極小の LSP サーバーを準備し、「エディター上にリアルタイムで警告を表示する」機能を作ります
      
    
    </summary>
    
    
      <category term="言語処理系" scheme="http://vain0x.github.io/blog/tags/%E8%A8%80%E8%AA%9E%E5%87%A6%E7%90%86%E7%B3%BB/"/>
    
      <category term="TypeScript" scheme="http://vain0x.github.io/blog/tags/TypeScript/"/>
    
      <category term="LanguageServerProtocol" scheme="http://vain0x.github.io/blog/tags/LanguageServerProtocol/"/>
    
      <category term="LSP学習記" scheme="http://vain0x.github.io/blog/tags/LSP%E5%AD%A6%E7%BF%92%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>近況 2018-12-31</title>
    <link href="http://vain0x.github.io/blog/2018-12-31/diary/"/>
    <id>http://vain0x.github.io/blog/2018-12-31/diary/</id>
    <published>2018-12-31T14:59:59.000Z</published>
    <updated>2019-01-12T03:09:34.120Z</updated>
    
    <content type="html"><![CDATA[<p>今月の進捗など</p><ul><li>前月分: <a href="https://vain0x.github.io/blog/2018-11-30/diary/">https://vain0x.github.io/blog/2018-11-30/diary/</a></li></ul><h2 id="hsp3-debug-ginger"><a href="#hsp3-debug-ginger" class="headerlink" title="hsp3-debug-ginger"></a>hsp3-debug-ginger</h2><p><a href="https://github.com/vain0x/hsp3-debug-ginger" target="_blank" rel="noopener">https://github.com/vain0x/hsp3-debug-ginger</a></p><ul><li>前月からやっている、VSCode 対応の HSP デバッガーを作るプロジェクト</li><li>前回の近況では進捗を書き忘れていた</li><li>最小限の機能が揃った<ul><li>グローバル変数を基本型の1次元配列まで表示できる</li><li>assert とかで止まったときに実行中の行がエディター上で強調表示される</li><li>VSCode の一時停止ボタンやステップインボタンで実行の制御ができる</li></ul></li><li>アルファ版のプレリリースを出した</li><li>課題はたくさんある<ul><li>インストール手順が煩雑すぎる</li><li>挙動がおかしい<ul><li>実行中の行にスクロールしてくれない</li></ul></li><li>基本的な機能の不足<ul><li>logmes</li><li>2次元以上の配列の表示</li></ul></li></ul></li></ul><h2 id="milone-lang"><a href="#milone-lang" class="headerlink" title="milone-lang"></a>milone-lang</h2><p><a href="https://github.com/vain0x/milone-lang" target="_blank" rel="noopener">https://github.com/vain0x/milone-lang</a></p><ul><li>セルフホストを目指している F# サブセットのコンパイラ</li><li>リファクタリング、エラーハンドリングの強化、パーサーの微修正などの細かい作業をした</li><li>README にプロジェクトの進捗状況やコンパイル手順などを書いた</li><li>パターンマッチを強化した</li><li>when パターンは、パターンに合致した後に追加の <code>if</code> 文を足せばいい</li><li>as パターンは、パターンに合致するかの判定の前に変数への代入を行えばいい</li><li>or パターンの一部<ul><li>パターンを選言標準形的なものにするとやりやすい</li><li>例えばパターン <code>Foo (A | B) :: _</code> を <code>Foo A :: _ | Foo B :: _</code> にする</li><li>つまり <code>|</code> が一番外側に来るようにする</li><li><code>|</code> の左右のパターンについてそれぞれ合致するか試して、どっちかに合致したら <code>-&gt;</code> の内側に <code>goto</code> する</li><li>いまのところ or を含むパターンでは変数を束縛できない</li></ul></li></ul><h2 id="curage-lang"><a href="#curage-lang" class="headerlink" title="curage-lang"></a>curage-lang</h2><p><a href="https://github.com/vain0x/curage-lang" target="_blank" rel="noopener">https://github.com/vain0x/curage-lang</a></p><ul><li>Language Server Protocol (LSP) の練習用のプロジェクトを始めた</li><li>LSP は Debugger Adapter Protocol と似てるけど、より複雑で難しい</li><li>既存のパーサーを使うのはめんどくさいので処理系を一から書いていて、いちおう自作言語という扱い</li><li>クラゲ言語</li><li>Rust 風の構文 (予定)</li><li>単純な型システム (予定)</li><li>インタプリタ上での実行 (予定)</li><li>いまのところ構文エラーを VSCode 上に警告として表示するやつ (textDocument/publishDiagnostics) だけできている</li><li>Node (TypeScript) 用に LSP の実装の基盤となるフレームワーク的なものがある<ul><li>vscode-languageserver</li><li>何をやっているのかよく分からないので使っていない</li></ul></li></ul><h2 id="競技プログラミング"><a href="#競技プログラミング" class="headerlink" title="競技プログラミング"></a>競技プログラミング</h2><ul><li>AtCoder に毎週参加している</li><li>レートは青に漸近中 (1557 → 1580 → 1582)</li><li><a href="https://note.mu/vain0x/n/ne88e557f5859" target="_blank" rel="noopener">競プロ参戦記 #24 「約数75」 ABC 114｜ベイン｜note</a></li><li><a href="https://note.mu/vain0x/n/n539b9a9ac173" target="_blank" rel="noopener">競プロ参戦記 #25 「クリスマス多次元バーガー」 ABC 115｜ベイン｜note</a></li><li><a href="https://note.mu/vain0x/n/n6aa8c41c4b77" target="_blank" rel="noopener">競プロ参戦記 #26 「和が2冪」  AGC 29 [AB]｜ベイン｜note</a></li><li><a href="https://note.mu/vain0x/n/nb6b19dd4245a" target="_blank" rel="noopener">競プロ参戦記 #27 「ゲーム」 CADDi 2018 [CD]｜ベイン｜note</a></li></ul><h2 id="ウェブアプリ開発"><a href="#ウェブアプリ開発" class="headerlink" title="ウェブアプリ開発"></a>ウェブアプリ開発</h2><ul><li>UI を作り込んだ</li><li>on-the-fly で描画するには複雑なグラフを SVG 画像として生成するスクリプトを書いた<ul><li>Fabric.js でラップされた Canvas API を使って図形を描画して、SVG にエクスポートして、ローカルサーバーに送信して、ファイルに保存する、という遠回り。1回動いたら十分なのでよし</li></ul></li></ul><h2 id="Qiita"><a href="#Qiita" class="headerlink" title="Qiita"></a>Qiita</h2><ul><li><a href="https://qiita.com/vain0x/items/8f8b6effb32cd68c22f3" target="_blank" rel="noopener">シクシク素数列を F# でやってみた - Qiita</a> を投稿した<ul><li>F# で素数判定をやるサンプルコード的なもの</li></ul></li><li><a href="https://qiita.com/yasuabe2613/items/5ab33e103e4105630e4c" target="_blank" rel="noopener">Domain Modeling Made Functional まとめ - Qiita</a> を読んだ<ul><li>元になった F# で DDD をやる本も読んでいる</li></ul></li></ul><h2 id="Trickle"><a href="#Trickle" class="headerlink" title="Trickle"></a>Trickle</h2><ul><li>Trickle を始めた</li><li>トピックごとに活動記録を書いていけるスマートフォンアプリ</li><li>参考 <a href="http://blog.h13i32maru.jp/entry/2018/11/12/092904" target="_blank" rel="noopener">http://blog.h13i32maru.jp/entry/2018/11/12/092904</a></li><li>ガルパメモの垂れ流しになってる</li></ul><h2 id="ガルパ-リズムゲーム"><a href="#ガルパ-リズムゲーム" class="headerlink" title="ガルパ (リズムゲーム)"></a>ガルパ (リズムゲーム)</h2><ul><li>難度26の精度は確実に上がってきている</li><li>難度27以上については、マジックアワーをフルコンボした以外に進歩がない</li><li>アニメの 1st season 良かった</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今月の進捗など&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前月分: &lt;a href=&quot;https://vain0x.github.io/blog/2018-11-30/diary/&quot;&gt;https://vain0x.github.io/blog/2018-11-30/diary/&lt;/a&gt;&lt;/
      
    
    </summary>
    
    
      <category term="日記" scheme="http://vain0x.github.io/blog/tags/%E6%97%A5%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>シクシク素数列を F# でやってみた</title>
    <link href="http://vain0x.github.io/blog/2018-12-16/siku-siku-primes/"/>
    <id>http://vain0x.github.io/blog/2018-12-16/siku-siku-primes/</id>
    <published>2018-12-16T01:34:43.000Z</published>
    <updated>2019-01-12T03:09:34.120Z</updated>
    
    <content type="html"><![CDATA[<p>シクシク素数列アドベントカレンダーという、単一の問題を毎日異なる言語で解く催しがあるみたいです。F# での参加者はいないみたいなので、カレンダー不参加ですがやってみます。</p><p><a href="https://qiita.com/advent-calendar/2018/4949prime-series" target="_blank" rel="noopener">シクシク素数列 Advent Calendar 2018 - Qiita</a></p><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><blockquote><ul><li>数値に4か9を含む素数をシクシク素数と呼ぶことにします<ul><li>19とか41とか149とか。</li></ul></li><li>標準入力として正の整数 N を与えたら N 番目までのシクシク素数を半角カンマ区切りで標準出力してください<ul><li>例 N = 9 の場合、 19,29,41,43,47,59,79,89,97</li></ul></li><li>N は最大で 100 とします</li></ul></blockquote><h2 id="考察"><a href="#考察" class="headerlink" title="考察"></a>考察</h2><p>10進数展開に4か9を含む整数を <strong>シクシク数</strong> と呼ぶことにします。こうするとシクシク素数の条件は</p><ul><li>シクシク数であること</li><li>素数であること</li></ul><p>の2つに分割できて、シンプルに実装できそうです。</p><h2 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h2><p>なるべく読みやすい実装を心がけて書いていきましょう！</p><p>実装方法はたくさんありますが、今回はやんごとなき理由から seq を中心に使っています。</p><h3 id="実装-素数判定"><a href="#実装-素数判定" class="headerlink" title="実装: 素数判定"></a>実装: 素数判定</h3><p>はじめに素数判定の関数を作ります。よくあるやりかたですが、 2 以上 √n 以下の数で割ってみて、いずれも割り切れなければ素数、と判定します。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isPrime n =</span><br><span class="line">  <span class="comment">// n が2未満のケースは除外</span></span><br><span class="line">  <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">then</span> <span class="keyword">false</span> <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// √n の整数部分</span></span><br><span class="line">  <span class="keyword">let</span> r = n |&gt; float |&gt; sqrt |&gt; int</span><br><span class="line"></span><br><span class="line">  seq &#123; <span class="number">2.</span>.r &#125; |&gt; Seq.forall (<span class="keyword">fun</span> m -&gt; n % m &lt;&gt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><code>seq { 2..r }</code> は 2 から r 以下の数からなる数列を表しています。この中の値をそれぞれ m として、 <code>n % m &lt;&gt; 0</code> がすべてについて成り立てばOK。</p><p><code>seq</code> と <code>Seq.</code> ですでにシクシク感が出ていますが、シクシク数の判定は次です。</p><h3 id="実装-シクシク数の判定"><a href="#実装-シクシク数の判定" class="headerlink" title="実装: シクシク数の判定"></a>実装: シクシク数の判定</h3><p>シクシク数かどうかの判定では、 n の10進展開を計算します。割り算を使うことで n を1桁目とそれ以外の部分に分解できるというのがポイント。</p><ul><li><code>n / 10</code> は、n から1桁目を取り除いたもの</li><li><code>n % 10</code> は n の1桁目</li></ul><p>そのため <code>n / 10</code> を10進展開したものに <code>n % 10</code> を付け足せば、n の各桁の数からなる列を構成できます。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">rec</span> digits n =</span><br><span class="line">  seq &#123;</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">yield!</span> digits (n / <span class="number">10</span>)</span><br><span class="line">      <span class="keyword">yield</span> n % <span class="number">10</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>ここでの <code>seq { .. }</code> はブロック内で <code>yield</code> された値からなる列を表します。他の言語にあるリストの内包表記みたいなもの。<code>yield!</code> は複数の値を一挙に <code>yield</code> することを表しています。</p><p>シクシク数の判定は、これで得られた各桁の数のどれかが 4, 9 に等しいかどうかを判定すればOK。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isSikuSiku n =</span><br><span class="line">  digits n |&gt; Seq.exists (<span class="keyword">fun</span> d -&gt; d = <span class="number">4</span> || d = <span class="number">9</span>)</span><br></pre></td></tr></table></figure><h3 id="実装-シクシク素数列挙"><a href="#実装-シクシク素数列挙" class="headerlink" title="実装: シクシク素数列挙"></a>実装: シクシク素数列挙</h3><p>これでシクシク素数判定関数のできあがり！</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isSikuSikuPrime n =</span><br><span class="line">  isSikuSiku n &amp;&amp; isPrime n</span><br></pre></td></tr></table></figure><p>非負整数を列挙して、シクシク素数であるものに絞り込むことで、シクシク素数を昇順に列挙します。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sikuSikuPrimes =</span><br><span class="line">  seq &#123;</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="number">0.</span>.Int32.MaxValue <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">if</span> isSikuSikuPrime n <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>seq { .. }</code> の中身は必要に応じて計算されるので、実際には全整数についてのループが回るわけではないので安心してください。</p><p><code>Seq.take N</code> を使うと、列の前から N 個の要素が列挙された時点で計算を打ち切るようにできます。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sikuSikuPrimes |&gt; Seq.take N</span><br></pre></td></tr></table></figure><h3 id="実装-main"><a href="#実装-main" class="headerlink" title="実装: main"></a>実装: main</h3><p>最後に標準入出力を書きます。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> N = Console.ReadLine() |&gt; int</span><br><span class="line"></span><br><span class="line">sikuSikuPrimes</span><br><span class="line">|&gt; Seq.take N</span><br><span class="line">|&gt; Seq.map string</span><br><span class="line">|&gt; String.concat <span class="string">","</span></span><br><span class="line">|&gt; printfn <span class="string">"%s"</span></span><br></pre></td></tr></table></figure><p><a href="https://dotnetfiddle.net/mIJ1qY" target="_blank" rel="noopener">.NET Fiddle で試す</a></p><h2 id="おまけ"><a href="#おまけ" class="headerlink" title="おまけ"></a>おまけ</h2><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isPrime n =</span><br><span class="line">  <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">then</span> <span class="keyword">false</span> <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> r = n |&gt; float |&gt; sqrt |&gt; int</span><br><span class="line">  seq &#123; <span class="number">2.</span>.r &#125; |&gt; Seq.forall (<span class="keyword">fun</span> m -&gt; n % m &lt;&gt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> testPrime () =</span><br><span class="line">  <span class="keyword">assert</span> (isPrime <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">assert</span> (isPrime <span class="number">19</span>)</span><br><span class="line">  <span class="keyword">assert</span> (isPrime <span class="number">4</span> |&gt; not)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">rec</span> digits n =</span><br><span class="line">  seq &#123;</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">yield!</span> digits (n / <span class="number">10</span>)</span><br><span class="line">      <span class="keyword">yield</span> n % <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> testDigits () =</span><br><span class="line">  <span class="keyword">assert</span> (digits <span class="number">0</span> |&gt; Seq.isEmpty)</span><br><span class="line">  <span class="keyword">assert</span> (digits <span class="number">2019</span> |&gt; Seq.toList = [<span class="number">2</span>; <span class="number">0</span>; <span class="number">1</span>; <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line">testDigits ()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isSikuSiku n =</span><br><span class="line">  digits n |&gt; Seq.exists (<span class="keyword">fun</span> d -&gt; d = <span class="number">4</span> || d = <span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> testIsSikuSiku () =</span><br><span class="line">  <span class="keyword">assert</span> (isSikuSiku <span class="number">42</span>)</span><br><span class="line">  <span class="keyword">assert</span> (isSikuSiku <span class="number">2019</span>)</span><br><span class="line">  <span class="keyword">assert</span> (isSikuSiku <span class="number">12356780</span> |&gt; not)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isSikuSikuPrime n =</span><br><span class="line">  isSikuSiku n &amp;&amp; isPrime n</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sikuSikuPrimes =</span><br><span class="line">  seq &#123;</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="number">0.</span>.Int32.MaxValue <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">if</span> isSikuSikuPrime n <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> N = Console.ReadLine() |&gt; int</span><br><span class="line">sikuSikuPrimes</span><br><span class="line">|&gt; Seq.take N</span><br><span class="line">|&gt; Seq.map string</span><br><span class="line">|&gt; String.concat <span class="string">","</span></span><br><span class="line">|&gt; printfn <span class="string">"%s"</span></span><br></pre></td></tr></table></figure><p>出力例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ fsharpi ./Program.fsx</span><br><span class="line">100</span><br><span class="line">19,29,41,43,47,59,79,89,97,109,139,149,179,191,193,197,199,229,239,241,269,293,347,349,359,379,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,509,541,547,569,593,599,619,641,643,647,659,691,709,719,739,743,769,797,809,829,839,859,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1019,1039,1049,1069,1091,1093,1097,1109,1129,1193,1229,1249,1259,1279,1289,1291,1297,1319</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;シクシク素数列アドベントカレンダーという、単一の問題を毎日異なる言語で解く催しがあるみたいです。F# での参加者はいないみたいなので、カレンダー不参加ですがやってみます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://qiita.com/advent-calendar/2
      
    
    </summary>
    
    
      <category term="F#" scheme="http://vain0x.github.io/blog/tags/F/"/>
    
  </entry>
  
  <entry>
    <title>近況 2018-11-30</title>
    <link href="http://vain0x.github.io/blog/2018-11-30/diary/"/>
    <id>http://vain0x.github.io/blog/2018-11-30/diary/</id>
    <published>2018-11-30T14:59:59.000Z</published>
    <updated>2018-12-01T12:04:26.874Z</updated>
    
    <content type="html"><![CDATA[<p>1ヶ月分のコミットメッセージとツイートを眺めていろいろ書くやつ、3回目</p><ul><li>前回: <a href="https://vain0x.github.io/blog/2018-10-31/diary/">https://vain0x.github.io/blog/2018-10-31/diary/</a></li></ul><h2 id="hsp3-debug-ginger"><a href="#hsp3-debug-ginger" class="headerlink" title="hsp3-debug-ginger"></a>hsp3-debug-ginger</h2><p><a href="https://github.com/vain0x/hsp3-debug-ginger" target="_blank" rel="noopener">https://github.com/vain0x/hsp3-debug-ginger</a></p><h3 id="HDG-knowbug-について"><a href="#HDG-knowbug-について" class="headerlink" title="HDG: knowbug について"></a>HDG: knowbug について</h3><p>以前に HSP3 用のデバッガー knowbug を作った</p><ul><li><a href="https://github.com/vain0x/knowbug" target="_blank" rel="noopener">knowbug</a></li><li>ほとんど完成しているので、更新していない</li><li>いくつか心残りがある:<ul><li>配列とかを1本の文字列 (YAMLっぽい形式) で表していて不便だった</li><li>配列の要素やメンバ変数をツリービューのノードにしようとしてたけど、デバッグの途中で放棄してた</li><li>HSP3 の utf-8 版に対応したい</li><li>未対応の改善要望が来ている</li></ul></li><li>生の Win32 API で GUI やってるところがきつくて knowbug はあんまりいじりたくない</li></ul><p>VSCode 用のデバッガーとして新たに作っているのが  <strong>hsp3-debug-ginger</strong></p><h3 id="HDG-Debug-Adapter-Protocol-DAP"><a href="#HDG-Debug-Adapter-Protocol-DAP" class="headerlink" title="HDG: Debug Adapter Protocol (DAP)"></a>HDG: Debug Adapter Protocol (DAP)</h3><p>hsp3-debug-ginger は <strong>Debug Adapter Protocol</strong> という、開発ツール (IDE) とデバッガーと接続するプロトコルを使っている</p><ul><li>例えばエディターのデバッグ UI で停止ボタンを押したら、プロトコルに則った形式でデバッガーに停止イベントが通知されて、プログラムが停止する、みたいな感じ</li><li>開発ツールからすると、何をデバッグしているか知らなくていい</li><li>デバッガーからすると、ユーザーがどの IDE を使っているか知らなくていい</li><li>VSCode はデバッガーと標準入出力で接続するけど、 HSP のデバッガーは DLL なので標準入出力を使えない</li></ul><h3 id="HDG-hsp3-debug-ginger-の構成"><a href="#HDG-hsp3-debug-ginger-の構成" class="headerlink" title="HDG: hsp3-debug-ginger の構成"></a>HDG: hsp3-debug-ginger の構成</h3><ul><li>VSCode と標準入出力でつながる exe と、HSP からロードされる DLL を別個に作って、 WebSocket で繋げる、という構成にした</li><li>WebSocket をわざわざ使う意味がないので TCP に置き換えた</li><li>Windows のプロセス間通信はどうやるのか知らない</li><li>両方 Rust で書いてる</li><li>C++ だと WebSocket とか TCP とかマルチスレッドとか大変そう</li><li>マルチスレッドの扱いはアクターモデルみたいな感じになってきた</li><li>mpsc チャネルという、複数のスレッドから単一のスレッドにメッセージを送信する仕組みを使っている</li><li>Rx.NET でいうと複数のスレッドに渡した Subject を Observable.Merge して単一スレッドで Subscribe する感じ</li><li>これでメッセージを単一のスレッドにディスパッチしてすべての処理をそこでやれば安全</li><li>と思ったけど HSP のメインスレッド上で行うべき処理が一部あって、どうするか困ってる</li></ul><h3 id="HDG-課題"><a href="#HDG-課題" class="headerlink" title="HDG: 課題"></a>HDG: 課題</h3><p>はやくテストを書きたい</p><ul><li>どこを分離したらテストできるのか分からない</li></ul><h2 id="milone-lang"><a href="#milone-lang" class="headerlink" title="milone-lang"></a>milone-lang</h2><p><a href="https://github.com/vain0x/milone-lang" target="_blank" rel="noopener">https://github.com/vain0x/milone-lang</a></p><h3 id="ML-クロージャ変換"><a href="#ML-クロージャ変換" class="headerlink" title="ML: クロージャ変換"></a>ML: クロージャ変換</h3><p>クロージャ変換が入った</p><ul><li>クロージャ変換について <a href="http://esumii.github.io/min-caml/tutorial-mincaml-16.htm" target="_blank" rel="noopener">http://esumii.github.io/min-caml/tutorial-mincaml-16.htm</a></li><li>簡単にいうと、関数を定義しているところと使用しているところをうまいこと変換しないといけない</li></ul><p>これはいくつかのユースケースに分かれる</p><ul><li>1つ目は、 <strong>関数の定義の中で外側のローカル変数を使ってる</strong> ケース <a href="https://github.com/vain0x/milone-lang/commit/250de343ec44b8f5e7aac540520e9c679c4e194e" target="_blank" rel="noopener">https://github.com/vain0x/milone-lang/commit/250de343ec44b8f5e7aac540520e9c679c4e194e</a></li><li>そのままC言語に変換したらコンパイルできない</li><li>ローカル変数を関数の引数経由で渡すように引数を増やす</li></ul><figure class="highlight fs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// before</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 から u まで fizz buzz を表示する</span></span><br><span class="line"><span class="keyword">let</span> fizzBuzz u =</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">rec</span> go i =</span><br><span class="line">        <span class="keyword">if</span> i &lt;= u <span class="keyword">then</span> <span class="comment">// この u は関数 go のローカル変数じゃない</span></span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">3</span> = <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">                <span class="comment">// 略</span></span><br><span class="line">            go (i + <span class="number">1</span>)</span><br><span class="line">    go <span class="number">0</span></span><br><span class="line"></span><br><span class="line">fizzBuzz <span class="number">15</span></span><br></pre></td></tr></table></figure><figure class="highlight fs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// after</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fizzBuzz u =</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">rec</span> go <span class="comment">(*追加*)</span>u i =</span><br><span class="line">        <span class="keyword">if</span> i &lt;= u <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">3</span> = <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">                <span class="comment">// 略</span></span><br><span class="line">            go <span class="comment">(*追加*)</span>u (i + <span class="number">1</span>)</span><br><span class="line">    go <span class="comment">(*追加*)</span>u <span class="number">0</span></span><br><span class="line"></span><br><span class="line">fizzBuzz <span class="number">15</span></span><br></pre></td></tr></table></figure><ul><li>2つ目は、 <strong>関数呼び出しの引数が足りないケース</strong> <a href="https://github.com/vain0x/milone-lang/commit/e16e9418b09d66399c8e19e33a3b758f0328e43c" target="_blank" rel="noopener">https://github.com/vain0x/milone-lang/commit/e16e9418b09d66399c8e19e33a3b758f0328e43c</a></li><li>引数束縛して関数オブジェクトを作る必要がある</li><li>関数オブジェクトはC言語の上では「関数」ではなくただの値なので <code>f(..)</code> という構文では呼べない<ul><li>だから milone-lang の構文的には同一の式でも、関数オブジェクトを呼んでるのか関数を呼んでるのか区別する必要がある</li></ul></li><li>関数オブジェクトは内部に持っている状態を隠蔽する必要がある<ul><li>C言語の上で型に現れると互換性がなくなるから</li><li><code>void*</code> を使うしかない</li><li>最適化の効きが悪くなるので、すべてこれにするというわけにはいかない</li></ul></li></ul><figure class="highlight fs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add x y = x + y</span><br><span class="line"></span><br><span class="line"><span class="comment">// add は2引数なのに引数が1個</span></span><br><span class="line"><span class="keyword">let</span> inc = add <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 関数ではなく関数オブジェクトの呼び出しとしてC言語にする必要がある</span></span><br><span class="line">inc <span class="number">9</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// コンパイル後のイメージ</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add を関数オブジェクト int -&gt; int から呼べるシグネチャにしたもの</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add1</span><span class="params">(<span class="keyword">void</span>* t, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> add(*(<span class="keyword">int</span>*)t, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 関数 int -&gt; int をコンパイルした結果</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IntIntFun</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span>(*fun)(<span class="keyword">void</span>*, <span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">void</span>* env; <span class="comment">// 関数オブジェクトが持っている状態</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 関数オブジェクトを作る</span></span><br><span class="line"><span class="comment">// 状態と関数のペア</span></span><br><span class="line"><span class="keyword">int</span>* x = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> <span class="keyword">int</span>);</span><br><span class="line">*x = <span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IntIntFun</span> <span class="title">inc</span> = &#123;</span></span><br><span class="line">    .fun = add1,</span><br><span class="line">    .env = (<span class="keyword">void</span>*)x,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 関数オブジェクトを呼び出す</span></span><br><span class="line"><span class="comment">// inc は関数ではないので inc() とはできない</span></span><br><span class="line">inc.fun(inc.env, <span class="number">9</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>関数の引数がないケース</strong> (<code>let f = add</code> みたいなやつ) もこれと同様に処理できる<ul><li>関数参照は引数ゼロの引数束縛</li></ul></li><li>あと <strong>関数の引数が多いケース</strong> (複数の呼び出しに分解する必要がある) とかある</li></ul><h3 id="ML-ユニオン型"><a href="#ML-ユニオン型" class="headerlink" title="ML: ユニオン型"></a>ML: ユニオン型</h3><p>ユニオン型 (判別共用体型) が入った <a href="https://github.com/vain0x/milone-lang/commit/2a994c3aa8bae0b4be38c2e5bbfee0a913e0e6d4" target="_blank" rel="noopener">https://github.com/vain0x/milone-lang/commit/2a994c3aa8bae0b4be38c2e5bbfee0a913e0e6d4</a></p><p>ただし再帰的定義はできない</p><h3 id="ML-ステージ順序"><a href="#ML-ステージ順序" class="headerlink" title="ML: ステージ順序"></a>ML: ステージ順序</h3><p>いままでのソースコードの変換過程は、 パース → 型つけ → MIR化 → クロージャ変換 → C言語化、だった</p><ul><li>MIR化: パターンマッチを条件分岐に変換しつつ、入れ子になった式を平坦にする (K正規化する) という手順</li></ul><p>クロージャ変換は静的コード生成に近いものがある。これを MIR に対して行っていたせいで、入れ子になった式やパターンマッチを生成できなくて、生成処理が分かりにくかった。だから順番を入れ替えてる (作業中)</p><p>パース → 型つけ → クロージャ変換 → MIR化 → C言語化</p><h3 id="ML-その他"><a href="#ML-その他" class="headerlink" title="ML: その他"></a>ML: その他</h3><ul><li><code>y |&gt; f x</code> は構文的には <code>f x</code> という関数オブジェクトに <code>x</code> を適用してるけど、実際には <code>f x y</code> が呼ばれるのでゼロコスト、というのが分かった</li></ul><h2 id="競プロ参戦記"><a href="#競プロ参戦記" class="headerlink" title="競プロ参戦記"></a>競プロ参戦記</h2><p>AtCoder でのコンテスト開催が少なかったため3回だけ</p><ul><li><a href="https://note.mu/vain0x/n/ned281cf01192?magazine_key=m9aa8513f4e97" target="_blank" rel="noopener">競プロ参戦記 第21回 「気温とあみだくじ」 ABC 113｜ベイン｜note</a></li><li><a href="https://note.mu/vain0x/n/n22b97a3e44f8?magazine_key=m9aa8513f4e97" target="_blank" rel="noopener">競プロ参戦記 第22回 「最大の論理積」 / ドワンゴコン5 [ABC]｜ベイン｜note</a></li><li><a href="https://note.mu/vain0x/n/n85e1dd5a0b3d?magazine_key=m9aa8513f4e97" target="_blank" rel="noopener">競プロ参戦記 #23 「チップストーリー」 / DDCC 2019 予選｜ベイン｜note</a></li></ul><p>転倒数の記事の閲覧数がなぜか増え続けていることに気づいた。わりと尻切れトンボな記事だったので、 BIT について加筆した</p><ul><li><a href="https://note.mu/vain0x/n/n0037d6468812" target="_blank" rel="noopener">競プロ参戦記 第10回「転倒数」  Chokudai Speed Run 001 [J]｜ベイン｜note</a></li></ul><h2 id="円周率チャレンジ"><a href="#円周率チャレンジ" class="headerlink" title="円周率チャレンジ"></a>円周率チャレンジ</h2><p>2 を足す操作と平方根をとる操作を繰り返して、数値を円周率に近づけるゲーム。半分全列挙を使って手順を探索した</p><ul><li><a href="https://vain0x.github.io/blog/2018-11-07/pi-challenge/">円周率チャレンジにアルゴリズムでチャレンジ</a></li></ul><h2 id="ブログ"><a href="#ブログ" class="headerlink" title="ブログ"></a>ブログ</h2><ul><li>ヘッダーに競プロ参戦記等へのリンクを貼った</li><li>ローカライズのあやしい部分を修正した</li></ul><h2 id="Web-アプリ開発"><a href="#Web-アプリ開発" class="headerlink" title="Web アプリ開発"></a>Web アプリ開発</h2><ul><li>前月同様、昨日は増えてるが品質は下がってる</li><li>リファクタリングがいるのは分かるけど、どういう方向に持っていけばいいのか……</li></ul><h2 id="ガルパ"><a href="#ガルパ" class="headerlink" title="ガルパ"></a>ガルパ</h2><ul><li>難度 26 楽曲でもフルコンボがたびたび出るようになってきた</li><li>難度 27 楽曲を回復なしでクリアできるように練習してる</li><li>左手プレイは練習してもうまくならないという限界を感じる<ul><li>片方をホールドして動かしながら他方でタップ、みたいなのができない</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1ヶ月分のコミットメッセージとツイートを眺めていろいろ書くやつ、3回目&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前回: &lt;a href=&quot;https://vain0x.github.io/blog/2018-10-31/diary/&quot;&gt;https://vain0x.github.io/b
      
    
    </summary>
    
    
      <category term="日記" scheme="http://vain0x.github.io/blog/tags/%E6%97%A5%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>円周率チャレンジにアルゴリズムでチャレンジ</title>
    <link href="http://vain0x.github.io/blog/2018-11-07/pi-challenge/"/>
    <id>http://vain0x.github.io/blog/2018-11-07/pi-challenge/</id>
    <published>2018-11-07T08:01:00.000Z</published>
    <updated>2018-12-01T12:04:26.874Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://rirosi.net/plus2/" target="_blank" rel="noopener">円周率チャレンジ</a> というゲームが流行中です！</p><p>プログラムを使って良い解法を探索してみたので、考えたことを書いていきます。</p><h2 id="円周率チャレンジとは"><a href="#円周率チャレンジとは" class="headerlink" title="円周率チャレンジとは"></a>円周率チャレンジとは</h2><blockquote><h2 id="円周率チャレンジ"><a href="#円周率チャレンジ" class="headerlink" title="円周率チャレンジ"></a>円周率チャレンジ</h2><p>「円周率チャレンジ」は，「ルートをとる(sqrt)」「2を足す(+2)」の２種類のボタンを使って，<br>数字を円周率に近づけていくゲームです。できるだけ少ない回数でハイスコアを狙いましょう！</p></blockquote><p>例えば +2, √, +2 という手順で操作を行うと、数値は:</p><p>0 → 2 → 1.41421.. → 3.41421..</p><p>と変化して、円周率 π = 3.141592.. に近い数値になります。</p><p>もっと手数を増やせば、 <strong>さらに円周率に近づけられるはず</strong> 。その最良手順を探すゲームです。</p><h2 id="解法1-ビット全探索"><a href="#解法1-ビット全探索" class="headerlink" title="解法1: ビット全探索"></a>解法1: ビット全探索</h2><p>やはり最初に試すのは全探索でしょう！</p><p>手数 N の最良手順を探すことを考えます。ここで手順とは「ルートをとる」と「+2 を足す」の2種類の要素からなる長さ N の列です。手順をすべて列挙して、計算結果と円周率を実際に比べてみれば、何が最良か分かるはずです。</p><p>2種類の要素を 0, 1 で表せば、手順はビット列として扱えて、配列を使うより経済的に全探索できます。参考: <a href="https://qiita.com/drken/items/7c6ff2aa4d8fce1c9361#bit-%E5%85%A8%E6%8E%A2%E7%B4%A2" target="_blank" rel="noopener">ビット演算 (bit 演算) の使い方を総特集！ 〜 マスクビットから bit DP まで 〜 - Qiita</a></p><p>操作列の「実行」は次のようなコードです。下位ビットから順番にみていき、 0 なら +2 の操作を、1 ならルートをとる操作を実行して、最終結果を得ます。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">eval</span></span>(ops: <span class="built_in">i64</span>, n: <span class="built_in">usize</span>) -&gt; <span class="built_in">f64</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> value = <span class="number">0.0_f64</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">        <span class="keyword">if</span> (ops &amp; (<span class="number">1</span> &lt;&lt; i)) == <span class="number">0</span> &#123;</span><br><span class="line">            value += <span class="number">2.0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            value = value.sqrt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これをすべての操作列に適用して、円周率の差が最小のものを探します。抜粋:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//..</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> best_diff = <span class="number">1e9</span>; <span class="comment">// 最小の差</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> best_ops = <span class="number">0</span>; <span class="comment">// 最小の差を達成した操作列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ops <span class="keyword">in</span> <span class="number">0</span>..<span class="number">1</span> &lt;&lt; n &#123; <span class="comment">// 操作列の全列挙</span></span><br><span class="line">    <span class="keyword">let</span> value = eval(ops, n); <span class="comment">// 操作の実行</span></span><br><span class="line">    <span class="keyword">let</span> diff = (value - PI).abs(); <span class="comment">// 円周率との差</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> best_diff &gt; diff &#123; <span class="comment">// 最小値の更新</span></span><br><span class="line">        best_diff = diff;</span><br><span class="line">        best_ops = ops;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//..</span></span><br></pre></td></tr></table></figure><p><a href="https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2015&amp;gist=61011280947f9a6641333f63bc0b90cb" target="_blank" rel="noopener">コード全体はこちら</a></p><p>時間がかかるのでリリースモードを使って (<code>cargo run --release</code>) 実行すると、こんな感じで手数ごとの良い操作列を出します:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">手数 数値                差                 操作</span><br><span class="line">#00 0.0000000000000000 3.1415926535897931</span><br><span class="line">#01 2.0000000000000000 1.1415926535897931 +</span><br><span class="line">..</span><br><span class="line">#27 3.1415927103795092 0.0000000567897160 +/++ +/// //// //// ++// +/++ ++/</span><br><span class="line">#28 3.1415926624518788 0.0000000088620857 +//+ ++// //// //// /++/ /+/+ +++/</span><br></pre></td></tr></table></figure><p>これで手数 N=28 ぐらいまでの最良(?)手順が求まりました。それ以上は時間がかかりすぎるので、別の方法で探索したほうがよさそうです。</p><h2 id="解法2-半分全列挙"><a href="#解法2-半分全列挙" class="headerlink" title="解法2: 半分全列挙"></a>解法2: 半分全列挙</h2><p>全探索では 0 から π に近づけましたが、逆に π から 0 に近づける操作列も考えられます。つまり、</p><blockquote><p>π から始めて、「2を引く」と「2乗する」を組み合わせて 0 に近づけるゲーム</p></blockquote><p>をやってもいいです。このことから、0 と π の <strong>両端から良い手順を探して繋ぐ</strong> という解法が出てきます。いわゆる半分全列挙です。</p><p>具体的には:</p><ul><li>手数 N/2 の操作 F をすべて列挙して、その結果の数値を A とするとき、(A, F) というペアをすべて記録しておく。</li><li>次に、手数 N/2 の操作 G をすべて列挙して、それを π から逆算したときの数値を B とする。</li><li>メモから (B, F) に最も近いものを探して操作 F+G を作れば、これは π に近い数になる。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    F            G</span><br><span class="line">0   →   A ≒ B   →   π</span><br></pre></td></tr></table></figure><p>計算量はどうでしょう。</p><ul><li>メモ ((A, F) の配列) を A についてソートしておけば、メモから探すのは二分探索ができます。</li><li>ソートを工夫しなければ、全体として O(2^(N/2) log N) です。<ul><li>これなら <strong>N = 50 ぐらいまでいけそう</strong> 。</li></ul></li></ul><p><a href="https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2015&amp;gist=17cf3535110ee76685581525e57cad15" target="_blank" rel="noopener">コード全体はこちら</a></p><p>しばらく待つと、53手のかなり強い手順が得られます。小数点以下15桁まで一致。</p><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>執筆時点で1位の (手数 53, スコア Infinity) には及びませんでした。おそらく二分探索の段階で近似的になりすぎてしまうからかなと思います。ヒューリスティックなアルゴリズムや数学的なアプローチの余地がまだまだありそうです。</p><p>なにはともあれ、半分全列挙のよい練習になりました。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://tatsu-zine.com/books/procon-challenge" target="_blank" rel="noopener">プログラミングコンテストチャレンジブック [第2版]【委託】 - 達人出版会</a><ul><li>通称蟻本。半分全列挙が載っていました</li></ul></li></ul><h2 id="Appendix-ソースコード"><a href="#Appendix-ソースコード" class="headerlink" title="Appendix. ソースコード"></a>Appendix. ソースコード</h2><details><br>    <summary>ビット全探索</summary><br><br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::<span class="built_in">f64</span>::consts::PI;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 操作列 ops の下位ビットから r 桁を実行して、結果の数値を得る。</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">eval</span></span>(ops: <span class="built_in">i64</span>, n: <span class="built_in">usize</span>) -&gt; <span class="built_in">f64</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> value = <span class="number">0.0_f64</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">        <span class="keyword">if</span> (ops &amp; (<span class="number">1</span> &lt;&lt; i)) == <span class="number">0</span> &#123;</span><br><span class="line">            value += <span class="number">2.0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            value = value.sqrt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 操作列を読みやすい文字列にする。</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">how</span></span>(ops: <span class="built_in">i64</span>, n: <span class="built_in">usize</span>) -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> acc = <span class="built_in">String</span>::new();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">0</span> &amp;&amp; i % <span class="number">4</span> == <span class="number">0</span> &#123;</span><br><span class="line">            acc.push(<span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ops &amp; (<span class="number">1</span> &lt;&lt; i)) == <span class="number">0</span> &#123;</span><br><span class="line">            acc.push(<span class="string">'+'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            acc.push(<span class="string">'/'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    acc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// n: 手数</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="number">0</span>..<span class="number">29</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> best_diff = <span class="number">1e9</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> best_ops = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ops <span class="keyword">in</span> <span class="number">0</span>..<span class="number">1</span> &lt;&lt; n &#123;</span><br><span class="line">            <span class="keyword">let</span> value = eval(ops, n);</span><br><span class="line">            <span class="keyword">let</span> diff = (value - PI).abs();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> best_diff &gt; diff &#123;</span><br><span class="line">                best_diff = diff;</span><br><span class="line">                best_ops = ops;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> value = eval(best_ops, n);</span><br><span class="line">        <span class="keyword">let</span> diff = (value - PI).abs();</span><br><span class="line">        <span class="keyword">let</span> how = how(best_ops, n);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"#&#123;:&gt;02&#125; &#123;:&gt;.16&#125; &#123;:&gt;0.16&#125; &#123;&#125;"</span>, n, value, diff, how);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></details><details><br>    <summary>半分全列挙</summary><br><br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::<span class="built_in">f64</span>::consts::PI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">lower_bound</span></span>&lt;T: <span class="built_in">PartialOrd</span>&gt;(xs: &amp;[T], y: &amp;T) -&gt; <span class="built_in">usize</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> r = xs.len() + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> r - l &gt; <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> m = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> &amp;xs[m - <span class="number">1</span>] &lt; y &#123;</span><br><span class="line">            l = m;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r = m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    l</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 操作列 ops の下位ビットから n 桁を実行して、結果の数値を得る。</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">eval</span></span>(ops: <span class="built_in">i64</span>, n: <span class="built_in">usize</span>) -&gt; <span class="built_in">f64</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> value = <span class="number">0.0_f64</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">        <span class="keyword">if</span> (ops &amp; (<span class="number">1</span> &lt;&lt; i)) == <span class="number">0</span> &#123;</span><br><span class="line">            value += <span class="number">2.0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            value = value.sqrt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 操作列 ops の上位ビットから n 桁の逆操作を実行して、結果の数値を得る。</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">eval_inv</span></span>(ops: <span class="built_in">i64</span>, n: <span class="built_in">usize</span>) -&gt; <span class="built_in">f64</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> value = PI;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>..n).rev() &#123;</span><br><span class="line">        <span class="keyword">if</span> (ops &amp; (<span class="number">1</span> &lt;&lt; i)) == <span class="number">0</span> &#123;</span><br><span class="line">            value -= <span class="number">2.0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            value *= value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 操作列を読みやすい文字列にする。</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">how</span></span>(ops: <span class="built_in">i64</span>, n: <span class="built_in">usize</span>) -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> acc = <span class="built_in">String</span>::new();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">0</span> &amp;&amp; i % <span class="number">4</span> == <span class="number">0</span> &#123;</span><br><span class="line">            acc.push(<span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ops &amp; (<span class="number">1</span> &lt;&lt; i)) == <span class="number">0</span> &#123;</span><br><span class="line">            acc.push(<span class="string">'+'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            acc.push(<span class="string">'/'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    acc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 手数 n の操作の結果をすべて計算する。</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">enumerate</span></span>(n: <span class="built_in">usize</span>) -&gt; <span class="built_in">Vec</span>&lt;(<span class="built_in">f64</span>, <span class="built_in">i64</span>)&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> memo = <span class="built_in">vec!</span>[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ops <span class="keyword">in</span> <span class="number">0</span>..<span class="number">1</span> &lt;&lt; n &#123;</span><br><span class="line">        <span class="keyword">let</span> value = eval(ops, n);</span><br><span class="line">        memo.push((value, ops));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    memo.sort_by(|(lx, _), (rx, _)| lx.partial_cmp(rx).unwrap());</span><br><span class="line">    memo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// n: 手数</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="number">0</span>..<span class="number">54</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> ln = n / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">let</span> rn = n - ln;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> memo = enumerate(ln);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> best_diff = <span class="number">1e9</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> best_ops = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> r_ops <span class="keyword">in</span> <span class="number">0</span>..<span class="number">1</span> &lt;&lt; rn &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = eval_inv(r_ops, rn);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> i = lower_bound(&amp;memo, &amp;(mid, r_ops));</span><br><span class="line">            <span class="keyword">if</span> !(i &lt; memo.len()) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> (_, l_ops) = memo[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> ops = (r_ops &lt;&lt; ln) | l_ops;</span><br><span class="line">            <span class="keyword">let</span> value = eval(ops, n);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> diff = (value - PI).abs();</span><br><span class="line">            <span class="keyword">if</span> best_diff &gt; diff &#123;</span><br><span class="line">                best_diff = diff;</span><br><span class="line">                best_ops = ops;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> value = eval(best_ops, n);</span><br><span class="line">        <span class="keyword">let</span> diff = (value - PI).abs();</span><br><span class="line">        <span class="keyword">let</span> how = how(best_ops, n);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"#&#123;:&gt;02&#125; &#123;:&gt;.16&#125; &#123;:&gt;.16&#125; &#123;&#125;"</span>, n, value, diff, how);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></details>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://rirosi.net/plus2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;円周率チャレンジ&lt;/a&gt; というゲームが流行中です！&lt;/p&gt;
&lt;p&gt;プログラムを使って良い解法を探索してみたので、考えたことを書いていきます
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://vain0x.github.io/blog/tags/Rust/"/>
    
      <category term="アルゴリズム" scheme="http://vain0x.github.io/blog/tags/%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0/"/>
    
  </entry>
  
  <entry>
    <title>近況 2018-10-31</title>
    <link href="http://vain0x.github.io/blog/2018-10-31/diary/"/>
    <id>http://vain0x.github.io/blog/2018-10-31/diary/</id>
    <published>2018-10-31T14:59:59.000Z</published>
    <updated>2018-12-01T12:04:26.874Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://vain0x.github.io/blog/2018-09-30/diary/">前月</a></li></ul><h3 id="milone-lang"><a href="#milone-lang" class="headerlink" title="milone-lang"></a>milone-lang</h3><ul><li><a href="https://github.com/vain0x/milone-lang" target="_blank" rel="noopener">https://github.com/vain0x/milone-lang</a></li><li>F# のサブセットのコンパイラ milone-lang を作ってる</li><li>前月苦しんでいた字下げ依存構文の構文解析問題はほぼ解決した<ul><li>次のトークンの位置が低すぎたらパースを中止する、みたいな動き</li><li>結果的に再帰下降パーサーとしては自然な実装になった</li></ul></li><li>インタプリタを捨てて、C言語のコードを生成するようにした<ul><li>インタプリタの実装は klac-lang でやったから退屈に感じる</li><li>最終的にはアセンブリや Web Assembly や LLVM をターゲットにしたいが、モチベを維持するために機能追加を優先していく</li></ul></li><li>演算や条件分岐や関数などの基本機能が入った</li><li>シンプルな型推論が入った<ul><li>単一化ベースだが、まだ多相関数は禁止しているのでHMじゃない</li></ul></li><li>ジェネリクスを入れようとして、オートボクシングと型推論の兼ね合いで悩んだ<ul><li>ジェネリクスはやめて、単相化することにした</li><li>例えばタプルは、生成後のCのコードでは型引数ごとに別々の構造体になる</li></ul></li><li>近い目標として、字句解析器をコンパイルしたい<ul><li>リストを入れないと何もできない</li><li>クロージャもほしいけど難しいかも</li></ul></li><li>参考<ul><li>TaPL</li><li><a href="http://esumii.github.io/min-caml/" target="_blank" rel="noopener">速攻MinCamlコンパイラ概説</a></li></ul></li></ul><h3 id="環境再構築"><a href="#環境再構築" class="headerlink" title="環境再構築"></a>環境再構築</h3><ul><li>今年頭 (2018年1月) にパソコンを買い替えた<ul><li><a href="https://vain0x.github.io/blog/2018-01-28/new-to-ubuntu/">Ubuntuデスクトップを使い始めた | vain0x’s blog</a></li></ul></li><li>Ubuntu デスクトップという試みはうまくいっている</li><li>パフォーマンス問題があった<ul><li>Chrome のタブを大量に開いたり VSCode を複数起動すると重たくなる</li></ul></li><li>メモリを 16GB に、ハードディスクを SSD にした</li><li>SSD 換装は初めてだったけど簡単にできた<ul><li>SATAケーブルとSATA電源ケーブルを買ったけど、HDDと繋ぎかえるだけだからいらなかった</li><li>SSD はメンディングテープで固定した</li></ul></li><li>ついでにクリーンインストールした</li></ul><h3 id="競プロ参戦記"><a href="#競プロ参戦記" class="headerlink" title="競プロ参戦記"></a>競プロ参戦記</h3><ul><li>8月中旬から note.mu で <a href="https://note.mu/vain0x/m/m9aa8513f4e97" target="_blank" rel="noopener">競プロ参戦記</a> を始めた</li><li>AGC で惨敗して、2週間ぐらい競プロから離れていた</li><li>先週の天下一は参加して、そこそこの成績だった</li><li>まったりやっていく</li></ul><h3 id="toml-hummer"><a href="#toml-hummer" class="headerlink" title="toml-hummer"></a>toml-hummer</h3><ul><li><a href="https://github.com/vain0x/toml-hummer" target="_blank" rel="noopener">https://github.com/vain0x/toml-hummer</a></li><li>F# 用の TOML パーサー</li><li>あまり進んでない</li><li>日時リテラルを扱えるようになりつつある</li></ul><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><ul><li>機能追加はうまくいっている</li><li>データベース処理ごとテストしてる<ul><li>依存関係を切るの難しい</li></ul></li><li>履歴移動でコンポーネントの状態が初期化される問題はまだ放置してる</li><li>サーバーとクライアントで行ったり来たりする処理の見通しが悪い<ul><li>ステートマシンみたいになってしまう</li><li>再帰下降パーサーみたいに書きたい</li></ul></li></ul><h3 id="ガルパ"><a href="#ガルパ" class="headerlink" title="ガルパ"></a>ガルパ</h3><ul><li>ファントムシーフ (Expert 27) はクリアできた</li><li>今後は 26 帯の精度を上げていきたい</li><li>某の影響をで左手プレイを練習している</li></ul><h3 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h3><ul><li>AtCoder の提出を Git リポジトリにまとめるツールを書いた<ul><li><a href="https://github.com/vain0x/submissions-sync" target="_blank" rel="noopener">https://github.com/vain0x/submissions-sync</a></li><li>GitHub に自動でコミットしたいという野望がある</li></ul></li><li>投稿専用の Twitter クライアント Solotter を地味に改修した<ul><li><a href="https://github.com/vain0x/solotter-web" target="_blank" rel="noopener">https://github.com/vain0x/solotter-web</a></li><li>Express.js で書いていたのが React になった</li><li>いろいろ足したい機能があるけど、いまは milone-lang が優先</li></ul></li><li>記事を投稿した<ul><li><a href="https://qiita.com/vain0x/items/512784ff60ce599dccae" target="_blank" rel="noopener">Rustで競プロするときのプラクティス [2018秋] - Qiita</a></li></ul></li><li>このブログをなんとかしたい<ul><li>更新作業を楽にしたい</li><li>画像を載せやすくしたい</li><li>記事一覧をつけたい</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://vain0x.github.io/blog/2018-09-30/diary/&quot;&gt;前月&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;milone-lang&quot;&gt;&lt;a href=&quot;#milone-lang&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="日記" scheme="http://vain0x.github.io/blog/tags/%E6%97%A5%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>Rustで競プロするときのプラクティス [2018秋]</title>
    <link href="http://vain0x.github.io/blog/2018-10-07/rust-procon/"/>
    <id>http://vain0x.github.io/blog/2018-10-07/rust-procon/</id>
    <published>2018-10-07T11:00:00.000Z</published>
    <updated>2018-12-01T12:04:26.874Z</updated>
    
    <content type="html"><![CDATA[<p>競プロで Rust を使い始めて半年が過ぎました。いまの私のプラクティスを羅列的に書いていきます。</p><h2 id="筆者"><a href="#筆者" class="headerlink" title="筆者"></a>筆者</h2><ul><li>AtCoder 水色</li><li><a href="https://note.mu/vain0x/n/ndcec1623a167" target="_blank" rel="noopener">競プロ参戦記</a> やってます</li></ul><h2 id="フレームワーク"><a href="#フレームワーク" class="headerlink" title="フレームワーク"></a>フレームワーク</h2><p><a href="https://github.com/vain0x/procon/blob/f016133b83c42196837e1b2490ecb5e57ce1ff40/rust/src/main.rs" target="_blank" rel="noopener">自作フレームワークはこちら</a> 。いつもこれの main 関数の中に解答を書いて提出しています。</p><h2 id="入力のパース"><a href="#入力のパース" class="headerlink" title="入力のパース"></a>入力のパース</h2><p>標準機能だけで入力をパースしようとするとだるいです。Qiita にも、すでにこの問題を解決しようという記事がいくつか上がっています。</p><p>私は上述のフレームワークに含まれている <a href="https://github.com/vain0x/procon/blob/f016133b83c42196837e1b2490ecb5e57ce1ff40/rust/src/main.rs#L25-L47" target="_blank" rel="noopener"><code>read!</code> マクロ</a> を使っています。実装が短い (23行) のと、見た目が関数っぽくて好み。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//! グラフのパースの例</span></span><br><span class="line"><span class="keyword">let</span> (N, M) = read!(<span class="built_in">usize</span>, <span class="built_in">usize</span>);</span><br><span class="line"><span class="keyword">let</span> weightd_edges = read![[<span class="built_in">usize</span>, <span class="built_in">usize</span>, <span class="built_in">i64</span>]; M];</span><br></pre></td></tr></table></figure><p>パフォーマンスは若干悪くて、C++ で std::cin を使うより2倍ぐらい遅いです。それでも 10^6 個の整数を読むのに 100 ms 未満なので問題はないはず。ベンチマーク: <a href="https://github.com/vain0x/scan-bench" target="_blank" rel="noopener">scan-bench</a></p><h2 id="デバッグ用のマクロ"><a href="#デバッグ用のマクロ" class="headerlink" title="デバッグ用のマクロ"></a>デバッグ用のマクロ</h2><p><a href="https://qiita.com/yamoridon/items/3be3f0515a79567a0588" target="_blank" rel="noopener">LLDB を使うとデバッグ実行できるらしい</a> です。私はやってなくて、いつも print デバッグしています。</p><h3 id="debug-条件コンパイル"><a href="#debug-条件コンパイル" class="headerlink" title="debug!: 条件コンパイル"></a>debug!: 条件コンパイル</h3><p>デバッグ出力の消し忘れで WA とかは避けたいです。 <a href="https://doc.rust-jp.rs/the-rust-programming-language-ja/1.9/book/conditional-compilation.html" target="_blank" rel="noopener">条件コンパイル</a> を使って、ローカルではデバッグ出力が出る、ジャッジ時は出ない、というふうにしています。</p><p>Debug/Release での分岐は <a href="https://users.rust-lang.org/t/conditional-compilation-for-debug-release/1098/3" target="_blank" rel="noopener">debug_assertions を使えばできる</a> そうです。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// デバッグビルドではこっちの定義が使われる。</span></span><br><span class="line"><span class="meta">#[cfg(debug_assertions)]</span></span><br><span class="line"><span class="built_in">macro_rules!</span> debug &#123;</span><br><span class="line">    <span class="comment">// 略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// リリースビルドではこっちの定義が使われて、 debug!(..) が無になる。</span></span><br><span class="line"><span class="meta">#[cfg(not(debug_assertions))]</span></span><br><span class="line"><span class="built_in">macro_rules!</span> debug &#123;</span><br><span class="line">    ($($arg:expr),*) =&gt; &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="debug-定義の省略"><a href="#debug-定義の省略" class="headerlink" title="debug!: 定義の省略"></a>debug!: 定義の省略</h3><p>ジャッジに不要なコードを提出に含めるのは <em>なんとなく</em> 抵抗があります。そこで、定義はローカルのファイルに書いておき、手元でのデバッグ実行時だけ <code>include!</code> で定義を取り込むという方法があります。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// デバッグ時はローカルのファイルから定義を読み込む</span></span><br><span class="line"><span class="meta">#[cfg(debug_assertions)]</span></span><br><span class="line">include!&#123;<span class="string">"./procon/debug.rs"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// リリース時に debug!(..) を消す</span></span><br><span class="line"><span class="meta">#[cfg(not(debug_assertions))]</span></span><br><span class="line"><span class="built_in">macro_rules!</span> debug &#123;</span><br><span class="line">    ($($arg:expr),*) =&gt; &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで debug! マクロを高機能化しても提出コードが膨れ上がることはなくなります。</p><h3 id="余談-dbg"><a href="#余談-dbg" class="headerlink" title="余談: dbg!"></a>余談: dbg!</h3><p>ちなみに、将来のバージョンでは公式に <code>dbg!</code> という print デバッグ用途のマクロが入るそうです。参考：<a href="https://github.com/rust-lang/rfcs/blob/master/text/2361-dbg-macro.md" target="_blank" rel="noopener">rfcs/2361-dbg-macro.md at master · rust-lang/rfcs</a></p><h2 id="数値型"><a href="#数値型" class="headerlink" title="数値型"></a>数値型</h2><p>数値型は <a href="https://doc.rust-jp.rs/the-rust-programming-language-ja/1.9/book/primitive-types.html" target="_blank" rel="noopener">プリミティブ型</a> に載っているとおりたくさんありますが、よく使うのは4つ:</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">i64</td><td style="text-align:left">10^18 ぐらいまで扱える</td></tr><tr><td style="text-align:left">usize</td><td style="text-align:left">スライスや Vec の添字に使う</td></tr><tr><td style="text-align:left">f64</td><td style="text-align:left">浮動小数点数</td></tr><tr><td style="text-align:left">char</td><td style="text-align:left">文字 (厳密には Unicode scalar value)</td></tr></tbody></table><h3 id="数値型-usize"><a href="#数値型-usize" class="headerlink" title="数値型: usize"></a>数値型: usize</h3><p>usize を int の感覚で書いてると微妙にハマります。マイナスにオーバーフローしたとき、Debug モードでは実行時エラーになります。Release モードではエラーになりませんが、符号なし型なのでマイナスにはならないことに注意です。</p><p>例えば次のコード (x, y: usize) はおかしくて、<code>x &lt; y</code> のとき Debug モードではエラーになり、Release モードでも <code>max</code> は機能してません。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max(<span class="number">0</span>, x - y) <span class="comment">// ✘ ダメ</span></span><br></pre></td></tr></table></figure><p>オーバーフローしないようにするか、i64 を経由すれば動きます:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// monus</span></span><br><span class="line">x - min(x, y)</span><br><span class="line"></span><br><span class="line"><span class="comment">// または、i64 を経由する</span></span><br><span class="line">max(<span class="number">0</span>, x <span class="keyword">as</span> <span class="built_in">i64</span> - y <span class="keyword">as</span> <span class="built_in">i64</span>) <span class="keyword">as</span> <span class="built_in">usize</span></span><br></pre></td></tr></table></figure><h2 id="文字列"><a href="#文字列" class="headerlink" title="文字列"></a>文字列</h2><p>Rust の標準的な文字列型である String (と str) は utf-8 なので、ランダムアクセスできません。そういうときは文字の列 <code>Vec&lt;char&gt;</code> で持つようにします。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s: <span class="built_in">String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文字の列に変換</span></span><br><span class="line"><span class="keyword">let</span> s = s.chars().collect::&lt;<span class="built_in">Vec</span>&lt;_&gt;&gt;();</span><br></pre></td></tr></table></figure><p>これは若干パフォーマンスが悪いです。一時期は <code>Vec&lt;u8&gt;</code> を使っていたんですが、デバッグ出力時に u8 が数字で出るのが不便だったのでやめました……</p><h2 id="Vec"><a href="#Vec" class="headerlink" title="Vec"></a>Vec</h2><p>イテレータを Vec に変換する <code>.collect::&lt;Vec&lt;_&gt;&gt;</code> は頻出ですが、タイプがつらいので略記を用意してます。</p><p>自作トレイトをすべてのイテレータに実装させることで、 C# の拡張メソッドのようなことができます。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">IteratorExt</span></span>: <span class="built_in">Iterator</span> + <span class="built_in">Sized</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">vec</span></span>(<span class="keyword">self</span>) -&gt; <span class="built_in">Vec</span>&lt;Self::Item&gt; &#123;</span><br><span class="line">        <span class="keyword">self</span>.collect()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T: <span class="built_in">Iterator</span>&gt; IteratorExt <span class="keyword">for</span> T &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// e.g.</span></span><br><span class="line"><span class="keyword">let</span> xs = (<span class="number">0</span>..N).map(|i| i + <span class="number">1</span>).vec();</span><br></pre></td></tr></table></figure><h2 id="再帰"><a href="#再帰" class="headerlink" title="再帰"></a>再帰</h2><p>ローカル変数を利用する再帰関数について、7月に「 <a href="https://qiita.com/vain0x/items/90c9580aa34926160ac1" target="_blank" rel="noopener">Rustのクロージャで再帰してみた</a> 」という記事を書きました。クロージャは、mut な変数を書き換えないなら簡単に再帰にできるという結論です。</p><p>mut な変数を書き換えたいなら RefCell とかを使う、と記事では書きました。struct を定義したほうがいいこともあります。いずれにせよ手間なので、マクロで簡略化を図りたいと思っています。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://doc.rust-jp.rs/the-rust-programming-language-ja/1.9/book/" target="_blank" rel="noopener">公式のドキュメントの和訳</a><ul><li>必読</li></ul></li><li><a href="https://qiita.com/hatoo@github/items/fa14ad36a1b568d14f3e" target="_blank" rel="noopener">Rustで競技プログラミング スターターキット - Qiita</a><ul><li>コンパイラバージョンの固定 (rustup override set)</li><li>BinaryHeap を昇順で使う方法 (Reverse)</li><li>浮動小数点で sort などを使う方法 (impl Ord)</li><li>深い再帰でスタックオーバーフローしないようにする方法 (std::thread)</li><li>などについてはこの記事を読んでください</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;競プロで Rust を使い始めて半年が過ぎました。いまの私のプラクティスを羅列的に書いていきます。&lt;/p&gt;
&lt;h2 id=&quot;筆者&quot;&gt;&lt;a href=&quot;#筆者&quot; class=&quot;headerlink&quot; title=&quot;筆者&quot;&gt;&lt;/a&gt;筆者&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;AtCoder
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://vain0x.github.io/blog/tags/Rust/"/>
    
      <category term="競技プログラミング" scheme="http://vain0x.github.io/blog/tags/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
  </entry>
  
  <entry>
    <title>近況 2018-09-30</title>
    <link href="http://vain0x.github.io/blog/2018-09-30/diary/"/>
    <id>http://vain0x.github.io/blog/2018-09-30/diary/</id>
    <published>2018-09-30T14:59:59.000Z</published>
    <updated>2018-12-01T12:04:26.874Z</updated>
    
    <content type="html"><![CDATA[<ul><li>校正の手間を省くため、なるべく箇条書きでやっていく<ul><li>通常の文章を書く頭は README と競プロ参戦記に使う</li></ul></li><li>Twitter ではなく、まとまったものを書いていきたい</li></ul><h3 id="競プロ参戦記"><a href="#競プロ参戦記" class="headerlink" title="競プロ参戦記"></a>競プロ参戦記</h3><ul><li>8月中旬から note.mu で <a href="https://note.mu/vain0x/m/m9aa8513f4e97" target="_blank" rel="noopener">競プロ参戦記</a> を始めた</li><li>3日で終わるかと思ったけど1ヶ月は続いた</li><li>成長やモチベに貢献しているかは微妙<ul><li>以前に参戦記で書いたことと同様の手順で解ける問題をとき損ねるという事件があった</li><li><a href="https://note.mu/vain0x/n/n556db26bb3a8" target="_blank" rel="noopener">競プロ参戦記 第16回「偶奇と多節腕」 ARC103 [CD]｜ベイン｜note</a></li></ul></li><li>note.mu を選んだ理由<ul><li>日本語で書ける、技術よりな日記を書ける、デザインが良い、という条件を満たしてる</li><li>Qiita には日記を書きづらい</li><li>Codeforces blog は日本語では書きづらい</li><li>自前のブログは更新がめんどい</li></ul></li><li>note.mu の問題<ul><li>エディターが微妙に使いづらい</li></ul></li></ul><h3 id="Milone-言語を作り始めた"><a href="#Milone-言語を作り始めた" class="headerlink" title="Milone 言語を作り始めた"></a>Milone 言語を作り始めた</h3><ul><li>リポジトリ: <a href="https://github.com/vain0x/milone-lang" target="_blank" rel="noopener">milone-lang</a></li><li>セキュリティキャンプや Turing Complete FM の影響でC言語のセルフホスティングコンパイラを作るのが大流行</li><li>私もやりたいけどCコンパイラは乗り遅れ感</li><li>自作言語なら楽？</li><li>Rust っぽい構文をさっと考えて実装開始<ul><li>道のりが長すぎて既に飽き気味</li></ul></li><li>F# のサブセットにしようとしてる<ul><li>字下げ依存構文の解析がつらすぎて飽き気味</li></ul></li></ul><h3 id="F-用のTOMLパーサを書き始めた"><a href="#F-用のTOMLパーサを書き始めた" class="headerlink" title="F# 用のTOMLパーサを書き始めた"></a>F# 用のTOMLパーサを書き始めた</h3><ul><li>リポジトリ: <a href="https://github.com/vain0x/toml-hummer" target="_blank" rel="noopener">toml-hummer</a></li><li>習作。既存の TOML パーサ実装はある</li><li>字句解析 → 字句リストを再帰下降パース、という手順でやる<ul><li>パーサコンビネータ (FParsec) もパーサジェネレータ (FsYacc) もいらない、言語機能だけでパースできる、っていうのをやりたい</li><li>パースはわりとすんなりいけてる</li><li>字句解析が正規表現でかなりがちゃがちゃしてる、ここをもっと簡単にしたい</li></ul></li><li>エラー報告の精度を上げるのは大変そう<ul><li>何を使っても大変</li><li>Rust コンパイラのエラー報告はとても偉い</li></ul></li><li>TOML のデータ構造の持ちかたで迷ってる</li></ul><h3 id="React-を始めた"><a href="#React-を始めた" class="headerlink" title="React を始めた"></a>React を始めた</h3><ul><li>Vue.js をちょっとだけやったことはあった<ul><li>極めて便利だけど型や環境構築が煩雑という印象だった</li></ul></li><li>Node.js + SPA の環境構築になれてきた</li><li>とはいえいろいろ諦めた<ul><li>Live Reload</li><li>Hot Module Replacement</li><li>ブラウザ上でのテスト (karma)</li><li>レンダリングのテスト (enzyme)</li></ul></li><li>コードに静的な型がついて、ドメイン層のユニットテストが高速に実行できたらそれでいいと思う</li><li>TypeScript を書く場合、 Vue.js と違って React はシンプルな型がつくのが嬉しい<ul><li>Vue のコンポーネントの型はやばい</li></ul></li><li>ブラウザ履歴の管理や、URL と state の同期がよく分からない</li></ul><h3 id="fsharp-error-builders"><a href="#fsharp-error-builders" class="headerlink" title="fsharp-error-builders"></a>fsharp-error-builders</h3><ul><li>リポジトリ: <a href="https://github.com/vain0x/fsharp-error-builders" target="_blank" rel="noopener">fsharp-error-builders</a><ul><li>F# 用の Option/Result のコンピュテーションビルダーを提供するライブラリ</li></ul></li><li>プロジェクトの名前を変えた<ul><li>リポジトリはハイフン区切りがいい</li></ul></li><li>パフォーマンスの改善を試みた<ul><li>inline をつけてメソッド呼び出しを減らした</li><li><code>Some ()</code> をキャッシュした</li></ul></li><li>それでも for 式はコンピュテーション式の外側で書くより2倍ぐらい遅い<ul><li>F# でパフォーマンスといえば、F# では型引数をどれだけ導入しても煩雑にならないので、構造体をガンガン使うようなコードでは C# に有利がつく可能性がないこともない</li></ul></li></ul><h3 id="Rust-で競プロの入力をパースするマクロ"><a href="#Rust-で競プロの入力をパースするマクロ" class="headerlink" title="Rust で競プロの入力をパースするマクロ"></a>Rust で競プロの入力をパースするマクロ</h3><ul><li>リポジトリ: <a href="https://github.com/vain0x/scan-bench" target="_blank" rel="noopener">scan-bench</a></li><li>Rust で競プロの入力をパースするコードを書くのはとてもめんどい</li><li>いま使ってる read! マクロは悪くないが、性能が低い</li><li>変数を大量に定義するのはマクロでやるのがよい</li><li>scan! マクロを作ってみた<ul><li>シンプルとはいえわりとひどい記述になってるので作り直すかも</li></ul></li><li>std::cin と比較してベンチマークをとった<ul><li>2倍ぐらいは速かった</li></ul></li><li>Travis の設定をやった<ul><li>こういう chore に時間をかけすぎている</li></ul></li></ul><h3 id="ガルパ-リズムゲーム-を始めた"><a href="#ガルパ-リズムゲーム-を始めた" class="headerlink" title="ガルパ (リズムゲーム) を始めた"></a>ガルパ (リズムゲーム) を始めた</h3><ul><li>初音ミクコラボにつられてほいほいインストールした</li><li>リズムゲームはひさしぶり</li><li>最初は Normal や Hard でも四苦八苦していた</li><li>毎日練習してたら Expert ができたりできなかったりするようになった</li><li>ファントムシーフ (Expert 27) は何度も練習してるけどクリアできない</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;校正の手間を省くため、なるべく箇条書きでやっていく&lt;ul&gt;
&lt;li&gt;通常の文章を書く頭は README と競プロ参戦記に使う&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Twitter ではなく、まとまったものを書いていきたい&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=
      
    
    </summary>
    
    
      <category term="日記" scheme="http://vain0x.github.io/blog/tags/%E6%97%A5%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>F#でベンチマークをとる</title>
    <link href="http://vain0x.github.io/blog/2018-09-03/bench-fsharp-by-benchmark-dot-net/"/>
    <id>http://vain0x.github.io/blog/2018-09-03/bench-fsharp-by-benchmark-dot-net/</id>
    <published>2018-09-03T14:59:34.000Z</published>
    <updated>2018-12-01T12:04:26.874Z</updated>
    
    <content type="html"><![CDATA[<p>ベンチマークをとるのは難しい作業です。それらの作業を担う便利なライブラリーとして <a href="https://github.com/dotnet/BenchmarkDotNet" target="_blank" rel="noopener">BenchmarkDotNet</a> があります。本稿では、これを使ってベンチマークをとる例をやっていき、 minimum viable introduction (実用最低限の導入) となることを目指します。</p><h2 id="1-要約"><a href="#1-要約" class="headerlink" title="1. 要約"></a>1. 要約</h2><ul><li>書き出し<ul><li>ベンチマークは意外と大変という話について軽く触れる</li></ul></li><li>導入<ul><li>本稿の構成</li><li>開発環境の明記</li><li>BenchmarkDotNet のサンプル</li></ul></li><li>例<ul><li>一例として「素数判定」を実装する</li><li>素数判定の簡単なベンチマークを書く</li><li>ベンチマークを実行する</li></ul></li><li>おまけ<ul><li>軽くて速いベンチマークに設定する</li><li>ベンチマークを watch する</li></ul></li></ul><h2 id="2-開発環境"><a href="#2-開発環境" class="headerlink" title="2. 開発環境"></a>2. 開発環境</h2><p>F# の開発環境は Getting Started を参照: <a href="http://ionide.io/#getting-started" target="_blank" rel="noopener">Ionide - Crossplatform F# Editor Tools</a></p><p>今回は次を使ってやっていきます。 (執筆日: 2018年8月9日)</p><ul><li>Windows 10</li><li>.NET Core Cli Tools 2.1</li><li>F# 4.1</li><li>Visual Studio Code<ul><li>ionide-fsharp</li></ul></li></ul><h2 id="3-BenchmarkDotNet-にあるサンプルコード"><a href="#3-BenchmarkDotNet-にあるサンプルコード" class="headerlink" title="3. BenchmarkDotNet にあるサンプルコード"></a>3. BenchmarkDotNet にあるサンプルコード</h2><p>F# 用のサンプルをみるとだいたいのイメージはつかめます。</p><p><a href="https://github.com/dotnet/BenchmarkDotNet/tree/v0.11.0/samples/BenchmarkDotNet.Samples.FSharp" target="_blank" rel="noopener">BenchmarkDotNet/samples/BenchmarkDotNet.Samples.FSharp at v0.11.0 · dotnet/BenchmarkDotNet</a></p><h2 id="4-サンプルプロジェクトでやってみる"><a href="#4-サンプルプロジェクトでやってみる" class="headerlink" title="4. サンプルプロジェクトでやってみる"></a>4. サンプルプロジェクトでやってみる</h2><p>例として「素数判定」のベンチマークをやってみましょう。</p><p>まずサンプルプロジェクトを普通のクラスライブラリーとして作ります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new classlib -lang F<span class="comment"># --name PrimeNum</span></span><br></pre></td></tr></table></figure><p>そしてがんばって実装を書く:</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PrieNum/Library.fs</span></span><br><span class="line"><span class="keyword">module</span> PrimeNum</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 以上 p 未満の整数で割り切れなければ素数、と判定する。</span></span><br><span class="line"><span class="comment">// 最大 p - 2 回のループ</span></span><br><span class="line"><span class="keyword">let</span> isPrimeBruteForce (p: int): bool =</span><br><span class="line">    <span class="keyword">if</span> p &lt; <span class="number">2</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">false</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// go m ⇔ p が m 以上 p 未満の整数で割り切れない</span></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">rec</span> go m = m &gt;= p || p % m &lt;&gt; <span class="number">0</span> &amp;&amp; go (m + <span class="number">1</span>)</span><br><span class="line">        go <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 以上 √p 以下の整数で割り切れなければ素数、と判定する。(証明略)</span></span><br><span class="line"><span class="comment">// 最大 √p - 1 回のループなので速いはず</span></span><br><span class="line"><span class="keyword">let</span> isPrime (p: int): bool =</span><br><span class="line">    <span class="keyword">if</span> p &lt; <span class="number">2</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">false</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// √p</span></span><br><span class="line">        <span class="keyword">let</span> r = p |&gt; float |&gt; sqrt |&gt; int</span><br><span class="line">        <span class="comment">// go m ⇔ p が m 以上 r 以下の整数で割り切れない</span></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">rec</span> go m = m &gt; r || p % m &lt;&gt; <span class="number">0</span> &amp;&amp; go (m + <span class="number">1</span>)</span><br><span class="line">        go <span class="number">2</span></span><br></pre></td></tr></table></figure><p>で、ベンチマークです。「実行するとベンチマーク処理を行うようなコンソールアプリ」を F# で作るという形になります。(ユニットテストでいうと expecto 方式)</p><p>コンソールアプリのプロジェクトを作って、そこに BenchmarkDotNet をインストールします。(最新バージョンは <a href="https://www.nuget.org/packages/BenchmarkDotNet/" target="_blank" rel="noopener">NuGet</a> で確認しよう。)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ベンチマークするためのプロジェクトはコンソールアプリとして作る。</span></span><br><span class="line">dotnet new console -lang F<span class="comment"># --name PrimeNumBench</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PrimeNumBench が PrimeNum を参照するようにする。</span></span><br><span class="line">dotnet add PrimeNumBench reference PrimeNum</span><br><span class="line"></span><br><span class="line"><span class="comment"># BenchmarkDotNet をインストールする。 (※やや時間がかかる)</span></span><br><span class="line">dotnet add PrimeNumBench package BenchmarkDotNet --version 0.11.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># インテリセンスが効くように、ここで一度ビルドしておく (※やや時間がかかる)</span></span><br><span class="line">dotnet build PrimeNumBench</span><br></pre></td></tr></table></figure><p>試しに大きめの素数 10000019 (≒100万) が素数かどうかの判定にかかる時間を測定してみましょう。</p><ul><li>測定したい計算をクラスのメソッドとして定義する。<ul><li>モジュールではなく。このあたりは C#-er の気持ちになる。</li></ul></li><li>メソッドがベンチマーク対象であると分かるように <code>BenchmarkAttribute</code> をつける。</li><li><code>main</code> でベンチマークを実行する関数を呼ぶ。</li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PrimeNumBench/Program.fs</span></span><br><span class="line"><span class="keyword">module</span> Program</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> BenchmarkDotNet</span><br><span class="line"><span class="keyword">open</span> BenchmarkDotNet.Attributes</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Benchmarks</span></span>() =</span><br><span class="line">    <span class="meta">[&lt;Benchmark&gt;]</span></span><br><span class="line">    <span class="keyword">member</span> this.IsPrimeBruteForceBench() =</span><br><span class="line">        PrimeNum.isPrimeBruteForce <span class="number">10</span>_000_019</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Benchmark&gt;]</span></span><br><span class="line">    <span class="keyword">member</span> this.IsPrimeBench() =</span><br><span class="line">        PrimeNum.isPrime <span class="number">10</span>_000_019</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main _ =</span><br><span class="line">    <span class="keyword">let</span> _summary = Running.BenchmarkRunner.Run&lt;Benchmarks&gt;()</span><br><span class="line">    <span class="number">0</span></span><br></pre></td></tr></table></figure><p>ベンチマークアプリを <strong>Release モードでビルドして</strong> 実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet run -p PrimeNumBench -c Release</span><br></pre></td></tr></table></figure><p>1分ぐらいかかるので待つと、結果が <em>(ログの海に溺れて)</em> 出てきます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">                 Method |         Mean |         Error |        StdDev |</span><br><span class="line">----------------------- |-------------:|--------------:|--------------:|</span><br><span class="line"> IsPrimeBruteForceBench | 69,125.13 us | 1,118.0498 us | 1,045.8244 us |</span><br><span class="line">           IsPrimeBench |     21.40 us |     0.1367 us |     0.1279 us |</span><br></pre></td></tr></table></figure><p>平方根を取るだけでかなり良い最適化になってるっぽい。なお 1秒 = 1000 ms (ミリ秒) = 10万 us (マイクロ秒) です。</p><h2 id="5-ベンチマークを軽量にする"><a href="#5-ベンチマークを軽量にする" class="headerlink" title="5. ベンチマークを軽量にする"></a>5. ベンチマークを軽量にする</h2><p>試行錯誤している段階ではもうちょっと早く結果がほしいので、ベンチマークの設定を変えて計測精度を下げる代わりに、ベンチマークにかかる時間を短くしてみます。</p><p>ベンチマークをどのように実行するかの設定は Jobs にあるようです。参照: <a href="https://benchmarkdotnet.org/articles/configs/jobs.html" target="_blank" rel="noopener">Jobs | BenchmarkDotNet</a></p><p>ウォームアップや反復の回数を固定するより、パラメーターをいじってアルゴリズムに任せたほうがいいらしいです。具体的にどうするか分からないので、デフォルトの設定でそういうのないかなと思ったんですが、よさげなプルリクが出ているので参考にします:</p><p><a href="https://github.com/dotnet/BenchmarkDotNet/pull/825/files" target="_blank" rel="noopener">Accuracy based job attributes by Zhentar · Pull Request #825 · dotnet/BenchmarkDotNet</a></p><p>相対誤差の上限を増やせばよさそう。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PrimeNumBench/Program.fs</span></span><br><span class="line"><span class="keyword">module</span> Program</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> BenchmarkDotNet</span><br><span class="line"><span class="keyword">open</span> BenchmarkDotNet.Attributes</span><br><span class="line"><span class="keyword">open</span> BenchmarkDotNet.Configs</span><br><span class="line"><span class="keyword">open</span> BenchmarkDotNet.Jobs</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Benchmarks</span></span>() =</span><br><span class="line">    <span class="meta">[&lt;Benchmark&gt;]</span></span><br><span class="line">    <span class="keyword">member</span> this.IsPrimeBruteForceBench() =</span><br><span class="line">        PrimeNum.isPrimeBruteForce <span class="number">10</span>_000_019</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Benchmark&gt;]</span></span><br><span class="line">    <span class="keyword">member</span> this.IsPrimeBench() =</span><br><span class="line">        PrimeNum.isPrime <span class="number">10</span>_000_019</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main _ =</span><br><span class="line">    <span class="keyword">let</span> config =</span><br><span class="line">        <span class="keyword">let</span> rough = AccuracyMode(MaxRelativeError = <span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">let</span> quickRoughJob = Job(<span class="string">"QuickRough"</span>, rough, RunMode.Short)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> c = ManualConfig()</span><br><span class="line">        c.Add(quickRoughJob)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// その他の設定をデフォルトから継承する。</span></span><br><span class="line">        ManualConfig.Union(DefaultConfig.Instance, c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> _summary = Running.BenchmarkRunner.Run&lt;Benchmarks&gt;(config)</span><br><span class="line">    <span class="number">0</span></span><br></pre></td></tr></table></figure><p>ビルドしてからベンチマークの完了まで20秒ぐらいになりました。</p><h2 id="6-ベンチマークを自動実行する"><a href="#6-ベンチマークを自動実行する" class="headerlink" title="6. ベンチマークを自動実行する"></a>6. ベンチマークを自動実行する</h2><p>.NET Core 2.1 から標準入りした <code>dotnet-watch</code> ツールを使うと、ソースコードを更新するたびにベンチマークを自動実行できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet watch -p ./PrimeNumBench -- run -c Release</span><br></pre></td></tr></table></figure><h2 id="7-レポートを公開する"><a href="#7-レポートを公開する" class="headerlink" title="7. レポートを公開する"></a>7. レポートを公開する</h2><p>結果を公開するには、 <code>BenchmarkDotNetArtifacts/results/*.md</code> にマークダウン(GFM)形式で出力されているのを貼っつける。環境の情報が自動で載るので楽です。(Qiita だと微妙に手直しが必要)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BenchmarkDotNet=v0.11.0, OS=Windows 10.0.16299.371 (1709/FallCreatorsUpdate/Redstone3)</span><br><span class="line">Intel Core i3-2310M CPU 2.10GHz (Sandy Bridge), 1 CPU, 4 logical and 2 physical cores</span><br><span class="line">Frequency=2046136 Hz, Resolution=488.7261 ns, Timer=TSC</span><br><span class="line">.NET Core SDK=2.1.302</span><br><span class="line">  [Host]     : .NET Core 2.1.2 (CoreCLR 4.6.26628.05, CoreFX 4.6.26629.01), 64bit RyuJIT DEBUG</span><br><span class="line">  DefaultJob : .NET Core 2.1.2 (CoreCLR 4.6.26628.05, CoreFX 4.6.26629.01), 64bit RyuJIT</span><br></pre></td></tr></table></figure><table><thead><tr><th>Method</th><th style="text-align:right">Mean</th><th style="text-align:right">Error</th><th style="text-align:right">StdDev</th></tr></thead><tbody><tr><td>IsPrimeBruteForceBench</td><td style="text-align:right">69,125.13 us</td><td style="text-align:right">1,118.0498 us</td><td style="text-align:right">1,045.8244 us</td></tr><tr><td>IsPrimeBench</td><td style="text-align:right">21.40 us</td><td style="text-align:right">0.1367 us</td><td style="text-align:right">0.1279 us</td></tr></tbody></table><h2 id="8-おわりに"><a href="#8-おわりに" class="headerlink" title="8. おわりに"></a>8. おわりに</h2><p>よい計測ライフを！</p><h2 id="A-その他"><a href="#A-その他" class="headerlink" title="A. その他"></a>A. その他</h2><ul><li><p>Params 属性に言及したほうがよかったかも</p><p>  <a href="https://benchmarkdotnet.org/articles/features/parameterization.html" target="_blank" rel="noopener">Parameterization | BenchmarkDotNet</a></p></li><li><p>Baesline 属性に言及したほうがよかったかも</p><p>  <a href="https://benchmarkdotnet.org/articles/features/baselines.html" target="_blank" rel="noopener">Benchmark and Job Baselines | BenchmarkDotNet</a></p></li><li><p>サンプルは速さが非自明なもののほうがよかったかも</p><p>  option vs voption とか</p></li></ul><h2 id="B-関連リンク"><a href="#B-関連リンク" class="headerlink" title="B. 関連リンク"></a>B. 関連リンク</h2><ul><li><p><a href="https://benchmarkdotnet.org/" target="_blank" rel="noopener">Showtime | BenchmarkDotNet</a></p><p>  公式サイト</p></li><li><p><a href="https://qiita.com/NetSeed/items/30d8a76163622a4b5be1" target="_blank" rel="noopener">BenchmarkDotNetを使ってみる｡ - Qiita</a></p><p>  紹介記事 (C#)</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ベンチマークをとるのは難しい作業です。それらの作業を担う便利なライブラリーとして &lt;a href=&quot;https://github.com/dotnet/BenchmarkDotNet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BenchmarkDotN
      
    
    </summary>
    
    
      <category term="F#" scheme="http://vain0x.github.io/blog/tags/F/"/>
    
      <category term="チュートリアル" scheme="http://vain0x.github.io/blog/tags/%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB/"/>
    
  </entry>
  
  <entry>
    <title>Rustのクロージャで再帰してみた</title>
    <link href="http://vain0x.github.io/blog/2018-06-28/recurse-rust-closure/"/>
    <id>http://vain0x.github.io/blog/2018-06-28/recurse-rust-closure/</id>
    <published>2018-06-28T14:17:41.000Z</published>
    <updated>2018-12-01T12:04:26.874Z</updated>
    
    <content type="html"><![CDATA[<p>クロージャを再帰呼び出しする方法を考えました。</p><p>競技プログラミングではローカル変数を書き換えながら再帰する処理がよく出てきます。しかし Rust でそれを書こうとするとやや冗長になりがちです。</p><p>本稿では小さなヘルパーを用意して記述を簡略化することを試みました。</p><ul><li>環境: Rust 1.15.1 (AtCoder での現在のバージョン)</li><li>筆者: AtCoder もうすぐ青といい続けて1年</li></ul><h2 id="要約"><a href="#要約" class="headerlink" title="要約"></a>要約</h2><ul><li>競プロではよく再帰する。</li><li>小さなアダプタを書くと再帰呼び出しできる。</li><li>イミュータブルなクロージャはローカル変数を書き換えられない。<ul><li><code>RefCell</code> で対処する。</li></ul></li><li>成果:<ul><li><a href="https://play.rust-lang.org/?gist=97ad8427affee25a31656d750d2a01d6&amp;version=stable&amp;mode=debug" target="_blank" rel="noopener">Fn で再帰するやつ</a></li></ul></li></ul><h2 id="用例1-階乗"><a href="#用例1-階乗" class="headerlink" title="用例1: 階乗"></a>用例1: 階乗</h2><p>単純な例として、階乗の計算を再帰で書けるようにしましょう。内部で自身を参照するために、クロージャは引数に <code>fact</code> (階乗関数) を受け取るようにする方針でいきます。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fact_5 = recurse(<span class="number">5</span>, &amp;|n, fact| &#123;</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span> &#123;</span><br><span class="line">        <span class="number">1_i64</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        n * fact(n - <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="number">1</span> * <span class="number">2</span> * <span class="number">3</span> * <span class="number">4</span> * <span class="number">5</span>, fact_5);</span><br></pre></td></tr></table></figure><p>ここで <code>recurse(x, f)</code> が <code>f(x, f)</code> の意味になるように後で定義するヘルパーです。</p><p>「なぜ作った関数を即座に起動するのか」という疑問があると思いますが、それは実際にそういう用途が多いからです。再帰関数がほしいときは <code>|x| recurse(x, &amp;|x, f| ..)</code> のようにクロージャ化する運用でも大丈夫でしょう。</p><h2 id="実装1-イミュータブル版"><a href="#実装1-イミュータブル版" class="headerlink" title="実装1: イミュータブル版"></a>実装1: イミュータブル版</h2><p><code>recurse</code> の実装は簡単で、<code>fn</code> で定義した関数が再帰可能であることを利用します。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">recurse</span></span>&lt;X, Y&gt;(x: X, f: &amp;<span class="built_in">Fn</span>(X, &amp;<span class="built_in">Fn</span>(X) -&gt; Y) -&gt; Y) -&gt; Y &#123;</span><br><span class="line">    f(x, &amp;|x: X| recurse(x, &amp;f))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点は、クロージャの引数の型がまたそのクロージャの型で……という無限の循環を避けるため、関数を <a href="https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/trait-objects.html" target="_blank" rel="noopener">トレイトオブジェクト</a> への参照という形で扱っていることです。</p><p><code>Fn(X) -&gt; Y</code> というのは「型 <code>X</code> の値を受け取って型 <code>Y</code> の値を返す関数」の型を表すトレイトで、ある種のクロージャは自動的に <code>Fn</code> を実装した型になります。参照: <a href="https://doc.rust-lang.org/std/ops/trait.Fn.html" target="_blank" rel="noopener">std::ops::Fn - Rust</a></p><pre><code>&amp;Fn(X, &amp;Fn(X) -&gt; Y) -&gt; Y        ^^^^^^^^^^           再帰関数の型 (クロージャの引数) ^^^^^^^^^^^^^^^^^^^^^^^     定義したクロージャのトレイトオブジェクトの型</code></pre><h2 id="用例2-DFSで連結成分分解"><a href="#用例2-DFSで連結成分分解" class="headerlink" title="用例2: DFSで連結成分分解"></a>用例2: DFSで連結成分分解</h2><p>次に現実的な例として、グラフの連結成分分解を深さ優先探索で書いてみます。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   0 -- 1</span></span><br><span class="line"><span class="comment">//   | \</span></span><br><span class="line"><span class="comment">//   |  \</span></span><br><span class="line"><span class="comment">//   2 -- 3    4--5</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">let</span> graph =</span><br><span class="line">    <span class="built_in">vec!</span>[</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="number">0</span>],</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="number">0</span>, <span class="number">3</span>],</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="number">5</span>],</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="number">4</span>],</span><br><span class="line">    ];</span><br><span class="line"><span class="keyword">let</span> n = graph.len();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> roots = RefCell::new(<span class="built_in">vec!</span>[n; n]);</span><br><span class="line"><span class="keyword">for</span> u <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">    recurse(u, &amp;|v, go| &#123;</span><br><span class="line">        <span class="keyword">if</span> roots.borrow()[v] &lt; n &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        roots.borrow_mut()[v] = u;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> &amp;w <span class="keyword">in</span> graph[v].iter() &#123;</span><br><span class="line">            go(w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(&amp;*roots.borrow(), &amp;[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br></pre></td></tr></table></figure><p>頂点 <code>v</code> が属す連結成分の代表を <code>roots[v]</code> に入れていきます。</p><p>このとき、再帰の途中で配列を更新する必要があります。しかし <code>roots</code> を let <strong>mut</strong> でミュータブル配列として宣言すると、先ほどの <code>recurse</code> は使えません。というもの、外部のミュータブルな変数を借用するクロージャは <code>Fn</code> トレイトを実装しないからです。</p><p>ここでは <code>RefCell</code> を使ってこの問題を回避しています。クロージャに渡すのが <code>RefCell</code> へのイミュータブルな参照でも、内部の値をミュータブルとして扱えます。参照: <a href="https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/choosing-your-guarantees.html#refcellt" target="_blank" rel="noopener">保証を選ぶ</a></p><p>なんにせよ、それなりに簡潔に再帰処理ができました！</p><ul><li><a href="https://play.rust-lang.org/?gist=97ad8427affee25a31656d750d2a01d6&amp;version=stable&amp;mode=debug" target="_blank" rel="noopener">Rust Playground で試す</a></li></ul><h2 id="実装2-ミュータブル版"><a href="#実装2-ミュータブル版" class="headerlink" title="実装2. ミュータブル版"></a>実装2. ミュータブル版</h2><p><strong>追記</strong>: ミュータブルなローカル変数を書き換えながらクロージャを再帰呼び出しする方法について記述していましたが、 <a href="https://qiita.com/vain0x/items/90c9580aa34926160ac1#comment-1988da50c4701cc0add8" target="_blank" rel="noopener">安全でないコードが書けてしまう</a> ので取り下げました。</p><details><br><summary>変更前の内容はたたんであります。</summary><br><div><br>記述量を減らすのが目的なので、 <code>RefCell</code> をなくす方法も考えてみます。<br><br>クロージャの型が自動で実装するトレイトは <code>Fn</code> のほかに <code>FnMut</code> もあります。<code>FnMut</code> は、簡単にいうと「ミュータブルな状態を持つ関数」の型が実装すべきトレイトです。参照: <a href="https://doc.rust-lang.org/std/ops/trait.FnMut.html" target="_blank" rel="noopener">std::ops::FnMut - Rust</a><br><br>外部のミュータブルな状態 (例えば <code>let mut roots = ...</code>) を触りながら再帰できるように、クロージャが <code>FnMut</code> でもいいようにしてみます。すると、借用検査が <strong>通りません</strong> 。<br><br>通せるようにしたのが以下です:<br><br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">recurse</span></span>&lt;X, Y&gt;(x: X, f: &amp;<span class="keyword">mut</span> <span class="built_in">FnMut</span>(X, &amp;<span class="keyword">mut</span> <span class="built_in">FnMut</span>(X) -&gt; Y) -&gt; Y) -&gt; Y &#123;</span><br><span class="line">    <span class="keyword">let</span> fp = f <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="built_in">FnMut</span>(X, &amp;<span class="keyword">mut</span> <span class="built_in">FnMut</span>(X) -&gt; Y) -&gt; Y;</span><br><span class="line">    <span class="keyword">let</span> f1 = <span class="keyword">unsafe</span> &#123; &amp;<span class="keyword">mut</span> *fp &#125;;</span><br><span class="line">    <span class="keyword">let</span> f2 = <span class="keyword">unsafe</span> &#123; &amp;<span class="keyword">mut</span> *fp &#125;;</span><br><span class="line">    f1(x, &amp;<span class="keyword">mut</span> |x: X| recurse(x, f2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>これをみると分かるように、 <code>recurse</code> は受け取ったクロージャへの参照を2つに複製します: 即座に呼び出すための参照と、再帰用に呼び出すための参照です。ミュータブルな参照は複製できないので、<code>unsafe</code> を使って強制的に複製しています。<br><br>「unsafe だから危険じゃないのか」という疑問がありますが、実行中のクロージャが自分への参照を self, f で2重に受け取っているだけなので、たぶん大丈夫です。<br><br>これで深さ優先探索の例を書き直すと、<code>RefCell</code> が消失してすっきり。<br><br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> roots = <span class="built_in">vec!</span>[n; n];</span><br><span class="line"><span class="keyword">for</span> u <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">    recurse(u, &amp;<span class="keyword">mut</span> |v, go| &#123;</span><br><span class="line">        <span class="keyword">if</span> roots[v] &lt; n &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        roots[v] = u;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> &amp;w <span class="keyword">in</span> graph[v].iter() &#123;</span><br><span class="line">            go(w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><a href="https://play.rust-lang.org/?gist=bceca5a2af42a5436996b99712cb28ed&amp;version=stable&amp;mode=debug" target="_blank" rel="noopener">Rust Playground で試す</a><br></div><br></details><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://github.com/Hoverbear/rust-rosetta/issues/450#issuecomment-175848086" target="_blank" rel="noopener">Stebalien commented on 28 Jan 2016</a></p><p>  Zコンビネータを使ってクロージャを再帰可能にするコードの例。引数として受け取る再帰関数の型は推論されないっぽい。</p></li><li><p><a href="https://www.google.co.jp/search?q=無名再帰&amp;oq=無名再帰" target="_blank" rel="noopener">無名再帰 - Google 検索</a></p><p>  クロージャのような匿名の関数を再帰呼び出しすることを無名再帰というらしい。</p></li></ul><details><br><summary>Source code</summary><br><br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![allow(dead_code)]</span></span><br><span class="line"><span class="meta">#![allow(unused_macros)]</span></span><br><span class="line"><span class="meta">#![allow(unused_imports)]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">recurse</span></span>&lt;X, Y&gt;(x: X, f: &amp;<span class="built_in">Fn</span>(X, &amp;<span class="built_in">Fn</span>(X) -&gt; Y) -&gt; Y) -&gt; Y &#123;</span><br><span class="line">    f(x, &amp;|x: X| recurse(x, &amp;f))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">macro_rules!</span> memo &#123;</span><br><span class="line">    (| $f:ident, $($p:ident $(: $t:ty)*),* | $body:expr) =&gt; &#123;&#123;</span><br><span class="line">        <span class="keyword">use</span> std;</span><br><span class="line">        <span class="keyword">let</span> memo = std::cell::RefCell::new(std::collections::HashMap::new());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">move</span> |$($p $(: $t)*),*| &#123;</span><br><span class="line">            recurse(</span><br><span class="line">                <span class="meta">#[allow(unused_parens)]</span></span><br><span class="line">                &#123; ($($p),*) &#125;,</span><br><span class="line">                &amp;|$($p $(: $t)*),*, $f| &#123;</span><br><span class="line">                    <span class="keyword">let</span> args = ($($p),*).clone();</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Some</span>(&amp;y) = memo.borrow().get(&amp;args) &#123;</span><br><span class="line">                        <span class="keyword">return</span> y;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">let</span> y = $body;</span><br><span class="line">                    memo.borrow_mut().insert(args, y.clone());</span><br><span class="line">                    y</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line">    <span class="keyword">use</span> super::*;</span><br><span class="line">    <span class="keyword">use</span> std::cell::RefCell;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">graph</span></span>() -&gt; <span class="built_in">Vec</span>&lt;<span class="built_in">Vec</span>&lt;<span class="built_in">usize</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//   0 -- 1</span></span><br><span class="line">        <span class="comment">//   | \</span></span><br><span class="line">        <span class="comment">//   |  \</span></span><br><span class="line">        <span class="comment">//   2 -- 3    4--5</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="built_in">vec!</span>[</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="number">0</span>],</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="number">0</span>, <span class="number">3</span>],</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="number">5</span>],</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="number">4</span>],</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">test_fact</span></span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> fact = |n| recurse(n, &amp;|n, fact| <span class="keyword">if</span> n &lt;= <span class="number">1</span> &#123; <span class="number">1_i64</span> &#125; <span class="keyword">else</span> &#123; n * fact(n - <span class="number">1</span>) &#125;);</span><br><span class="line">        <span class="built_in">assert_eq!</span>(fact(<span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">assert_eq!</span>(fact(<span class="number">5</span>), <span class="number">120</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">test_dfs</span></span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> graph = graph();</span><br><span class="line">        <span class="keyword">let</span> n = graph.len();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> roots = RefCell::new(<span class="built_in">vec!</span>[n; n]);</span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">            recurse(u, &amp;|v, go| &#123;</span><br><span class="line">                <span class="keyword">if</span> roots.borrow()[v] &lt; n &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                roots.borrow_mut()[v] = u;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> &amp;w <span class="keyword">in</span> graph[v].iter() &#123;</span><br><span class="line">                    go(w);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">assert_eq!</span>(&amp;*roots.borrow(), &amp;[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">test_memoized_fib</span></span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> fib = memo!(|fib, n: <span class="built_in">i32</span>| <span class="keyword">if</span> n &lt;= <span class="number">1</span> &#123;</span><br><span class="line">            <span class="number">1_i64</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">assert_eq!</span>(fib(<span class="number">5</span>), <span class="number">8</span>);</span><br><span class="line">        <span class="built_in">assert_eq!</span>(fib(<span class="number">20</span>), <span class="number">10946</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![allow(dead_code)]</span></span><br><span class="line"><span class="meta">#![allow(unused_imports)]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">recurse</span></span>&lt;X, Y&gt;(x: X, f: &amp;<span class="keyword">mut</span> <span class="built_in">FnMut</span>(X, &amp;<span class="keyword">mut</span> <span class="built_in">FnMut</span>(X) -&gt; Y) -&gt; Y) -&gt; Y &#123;</span><br><span class="line">    <span class="keyword">let</span> fp = f <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="built_in">FnMut</span>(X, &amp;<span class="keyword">mut</span> <span class="built_in">FnMut</span>(X) -&gt; Y) -&gt; Y;</span><br><span class="line">    <span class="keyword">let</span> f1 = <span class="keyword">unsafe</span> &#123; &amp;<span class="keyword">mut</span> *fp &#125;;</span><br><span class="line">    <span class="keyword">let</span> f2 = <span class="keyword">unsafe</span> &#123; &amp;<span class="keyword">mut</span> *fp &#125;;</span><br><span class="line">    f1(x, &amp;<span class="keyword">mut</span> |x: X| recurse(x, f2))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line">    <span class="keyword">use</span> super::*;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">graph</span></span>() -&gt; <span class="built_in">Vec</span>&lt;<span class="built_in">Vec</span>&lt;<span class="built_in">usize</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//   0 -- 1</span></span><br><span class="line">        <span class="comment">//   | \</span></span><br><span class="line">        <span class="comment">//   |  \</span></span><br><span class="line">        <span class="comment">//   2 -- 3    4--5</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="built_in">vec!</span>[</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="number">0</span>],</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="number">0</span>, <span class="number">3</span>],</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="number">5</span>],</span><br><span class="line">            <span class="built_in">vec!</span>[<span class="number">4</span>],</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">test_fact</span></span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> fact = |n| recurse(n, &amp;<span class="keyword">mut</span> |n, fact| <span class="keyword">if</span> n &lt;= <span class="number">1</span> &#123; <span class="number">1</span> &#125; <span class="keyword">else</span> &#123; n * fact(n - <span class="number">1</span>) &#125;);</span><br><span class="line">        <span class="built_in">assert_eq!</span>(fact(<span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">assert_eq!</span>(fact(<span class="number">5</span>), <span class="number">120</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">test_dfs</span></span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> graph = graph();</span><br><span class="line">        <span class="keyword">let</span> n = graph.len();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> roots = <span class="built_in">vec!</span>[n; n];</span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> <span class="number">0</span>..n &#123;</span><br><span class="line">            recurse(u, &amp;<span class="keyword">mut</span> |v, go| &#123;</span><br><span class="line">                <span class="keyword">if</span> roots[v] &lt; n &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                roots[v] = u;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> &amp;w <span class="keyword">in</span> graph[v].iter() &#123;</span><br><span class="line">                    go(w);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">assert_eq!</span>(roots, <span class="built_in">vec!</span>[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">test_closure_is_dropped</span></span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> n = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">D</span></span>&lt;<span class="symbol">'a</span>&gt;(<span class="keyword">pub</span> &amp;<span class="symbol">'a</span> <span class="keyword">mut</span> <span class="built_in">i32</span>);</span><br><span class="line">        <span class="keyword">impl</span>&lt;<span class="symbol">'a</span>&gt; <span class="built_in">Drop</span> <span class="keyword">for</span> D&lt;<span class="symbol">'a</span>&gt; &#123;</span><br><span class="line">            <span class="function"><span class="keyword">fn</span> <span class="title">drop</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">                *<span class="keyword">self</span>.<span class="number">0</span> += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            recurse(<span class="number">0</span>, &amp;<span class="keyword">mut</span> |i, go| &#123;</span><br><span class="line">                <span class="keyword">let</span> d = D(&amp;<span class="keyword">mut</span> k);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> i &gt;= n &#123;</span><br><span class="line">                    <span class="built_in">assert_eq!</span>(*d.<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                go(i + <span class="number">1</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">assert_eq!</span>(k, n + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></details>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;クロージャを再帰呼び出しする方法を考えました。&lt;/p&gt;
&lt;p&gt;競技プログラミングではローカル変数を書き換えながら再帰する処理がよく出てきます。しかし Rust でそれを書こうとするとやや冗長になりがちです。&lt;/p&gt;
&lt;p&gt;本稿では小さなヘルパーを用意して記述を簡略化すること
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://vain0x.github.io/blog/tags/Rust/"/>
    
      <category term="競技プログラミング" scheme="http://vain0x.github.io/blog/tags/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
  </entry>
  
</feed>
