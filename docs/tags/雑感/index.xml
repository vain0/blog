<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>雑感 on ベインのブログ</title>
    <link>https://vain0x.github.io/blog/tags/%E9%9B%91%E6%84%9F/</link>
    <description>Recent content in 雑感 on ベインのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <managingEditor>vainzerox@gmail.com (ベイン)</managingEditor>
    <webMaster>vainzerox@gmail.com (ベイン)</webMaster>
    <lastBuildDate>Mon, 29 Mar 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://vain0x.github.io/blog/tags/%E9%9B%91%E6%84%9F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ミローネ言語の開発用にビルドツールninjaを使っている感想など</title>
      <link>https://vain0x.github.io/blog/2021-03-29/ninja-thoughts/</link>
      <pubDate>Mon, 29 Mar 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-03-29/ninja-thoughts/</guid>
      <description>ミローネ言語の開発にビルドツールninjaを使いはじめて、それなりに時間がたったので、雑感を記事に書いておく。
モチベーション ミローネ言語 (自作言語) の開発では複数のプログラミング言語を使うので、ビルドやテストの作業が複雑になっている。 dotnetコマンド1つでは完了しない。 特に100個ぐらいあるテストプロジェクトのそれぞれでCコンパイラを起動するのは時間がかかるので、ビルドツールを使って差分更新したくなった。
make vs. ninja 代表的なビルドツールは GNU make だが、ミローネ言語では ninja というビルドツールを使った。(※後で別のものに変えるかも)
 ninja-build/ninja: a small build system with a focus on speed: GitHubリポジトリ、バイナリの配布元  ninjaを選んだ最大の理由は設計思想が興味深かったから。ninjaの最初の作者による振り返り記事とマニュアルを参照:
 Tech Notes: The Success and Failure of Ninja (2020-05-12, ninja原作者による振り返り) The Ninja build system: マニュアル  マニュアルの Philosophical overview の部分にあるようにninjaはビルドツール界の「アセンブラ」を指向しているらしい。 つまり、機能を最小限にすることで性能を保つこと、ユーザーが直接ninjaを使うのではなく他のツールがninjaをバックエンドとして使うこと。
例えばninjaでは複数のファイルを *.ext のような形でまとめて指定する機能がない。 複数のファイルを参照するにはファイル名を列挙する必要がある。 当然ながら手動で列挙するのは厳しいので、ninjaに渡すビルドスクリプト (build.ninja) を何らかの方法で生成することになる。 ビルド手順を「build.ninja を生成する → ninjaを実行する」という2段階に分けることで、ninja自身の複雑化・低速化を防ぐ、という感じらしい。
また、makeよりよい点として、コマンド自体が依存関係に含まれていることがある。(これだけでは弱いかもしれないが。) 例えばmakeでは、ビルドを実行した後、ビルドコマンド自体を書き換えて再ビルドしても「更新済み」といわれてしまう。(make -B すればいいが。) ninjaはビルドの依存関係にコマンドを含めているので、このケースでも再ビルドが起こる。 この挙動はビルドスクリプトを試行錯誤しているときに便利だった。
ビルドスクリプトの生成 ninjaをバックエンドとして使うツールはいくつかあるが、目的のユースケースに合致するものが見当たらなかった。 ミローネ言語では F# で書いた小さいツールを使って build.</description>
    </item>
    
  </channel>
</rss>